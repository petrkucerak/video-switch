
video-switch.elf:     file format elf32-littlenios2
video-switch.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006444 memsz 0x00006444 flags r-x
    LOAD off    0x00007464 vaddr 0x00006464 paddr 0x00008010 align 2**12
         filesz 0x00001bac memsz 0x00001bac flags rw-
    LOAD off    0x00009bbc vaddr 0x00009bbc paddr 0x00009bbc align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006194  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  0000634c  0000634c  0000734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bac  00006464  00008010  00007464  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00009bbc  00009bbc  00009bbc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000938  00000000  00000000  00009038  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000010bf  00000000  00000000  00009970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001aa46  00000000  00000000  0000aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000051f6  00000000  00000000  00025475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d2c2  00000000  00000000  0002a66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001364  00000000  00000000  00037930  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001812  00000000  00000000  00038c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000434e  00000000  00000000  0003a4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003e7f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003e808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000415bf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000415c2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000415c5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000415c6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000415c7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000415cb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000415cf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000415d3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000415dc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000415e5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000415ee  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000013  00000000  00000000  000415f9  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00073cf6  00000000  00000000  0004160c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0000634c l    d  .rodata	00000000 .rodata
00006464 l    d  .rwdata	00000000 .rwdata
00009bbc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LSP_Nios_Utility.c
0000634c l     O .rodata	00000010 seven_seg_decode_table.1344
000005d8 l     F .text	000000f0 TestOfMemory
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00006464 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000020e0 l     F .text	00000058 std
000021ec l     F .text	00000008 __fp_lock
000021f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
000031ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000324c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003350 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003474 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003554 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000036b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000038e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00008000 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003b9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006e14 l     O .rwdata	00001060 JTAG_UART
00007e74 l     O .rwdata	0000002c character_lcd_0
00007ea0 l     O .rwdata	0000002c Green_LEDs
00007ecc l     O .rwdata	0000002c HEX3_HEX0
00007ef8 l     O .rwdata	0000002c HEX7_HEX4
00007f24 l     O .rwdata	0000002c Pushbuttons
00007f50 l     O .rwdata	0000002c Red_LEDs
00007f7c l     O .rwdata	0000002c Slider_Switches
00007fa8 l     O .rwdata	0000002c Serial_Port
00003cf8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003f30 l     F .text	0000022c altera_avalon_jtag_uart_irq
0000415c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000047d8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000053c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005598 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000058a8 l     F .text	000000f8 alt_file_locked
00005b2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00006134 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000062e8 l     F .text	00000040 alt_sim_halt
00002f8c g     F .text	00000070 _isatty_r
00003714 g     F .text	0000006c alt_main
000007a8 g     F .text	000000a0 _puts_r
00009c0c g     O .bss	00000100 alt_irq
00002ffc g     F .text	00000078 _lseek_r
00008010 g       *ABS*	00000000 __flash_rwdata_start
00004950 g     F .text	00000034 alt_up_character_lcd_send_cmd
00009e9c g       *ABS*	00000000 __alt_heap_start
00002bc8 g     F .text	00000068 __sseek
00002148 g     F .text	000000a4 __sinit
00002248 g     F .text	0000009c __sfmoreglue
000037a0 g     F .text	00000020 __malloc_unlock
00005038 g     F .text	00000090 alt_up_rs232_read_fd
0000036c g     F .text	00000070 LCD_cursor
00001630 g     F .text	000000e0 memmove
00002238 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
000048d4 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002f18 g     F .text	00000074 _fstat_r
00009bc8 g     O .bss	00000004 errno
00009bd0 g     O .bss	00000004 alt_argv
0000ffd4 g       *ABS*	00000000 _gp
00006c94 g     O .rwdata	00000180 alt_fd_list
000054e8 g     F .text	00000094 alt_find_dev
00001590 g     F .text	000000a0 memcpy
00004ae8 g     F .text	0000004c alt_up_character_lcd_write_fd
0000222c g     F .text	0000000c _cleanup_r
00005670 g     F .text	00000078 alt_io_redirect
0000634c g       *ABS*	00000000 __DTOR_END__
00004fc4 g     F .text	00000074 alt_up_rs232_read_data
00000848 g     F .text	00000014 puts
00004374 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000003dc g     F .text	00000098 LCD_text
000033b0 g     F .text	000000c4 isatty
00009bbc g     O .bss	00000004 __malloc_top_pad
000006c8 g     F .text	00000034 TestSRAM
000008d0 g     F .text	0000049c __sfvwrite_r
00001d04 g     F .text	00000070 _sbrk_r
00003074 g     F .text	00000078 _read_r
00007ff8 g     O .rwdata	00000004 alt_max_fd
00004f2c g     F .text	00000050 alt_up_rs232_check_parity
00002df4 g     F .text	00000110 _fclose_r
000020ac g     F .text	00000034 fflush
00009bc0 g     O .bss	00000004 __malloc_max_sbrked_mem
000056e8 g     F .text	000001c0 alt_irq_register
000035c0 g     F .text	000000f4 lseek
00007fdc g     O .rwdata	00000004 _global_impure_ptr
00001710 g     F .text	000005f4 _realloc_r
00009e9c g       *ABS*	00000000 __bss_end
00005c24 g     F .text	0000010c alt_tick
00002214 g     F .text	00000018 __fp_lock_all
00005b8c g     F .text	00000098 alt_alarm_stop
00009bd8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
00006c6c g     O .rwdata	00000028 alt_dev_null
00004dd0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000052f0 g     F .text	0000001c alt_dcache_flush_all
00008010 g       *ABS*	00000000 __ram_rwdata_end
00007ff0 g     O .rwdata	00000008 alt_dev_list
00003a78 g     F .text	00000124 write
00006464 g       *ABS*	00000000 __ram_rodata_end
00003278 g     F .text	000000d8 fstat
000050c8 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000001f4 g     F .text	0000003c Nibble2HexDisplay
00009e9c g       *ABS*	00000000 end
00003e78 g     F .text	000000b8 altera_avalon_jtag_uart_init
00006348 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000484c g     F .text	00000088 alt_avalon_timer_sc_init
00004598 g     F .text	00000240 altera_avalon_jtag_uart_write
00002138 g     F .text	00000004 __sfp_lock_acquire
000014ac g     F .text	000000e4 memchr
000049f8 g     F .text	00000078 alt_up_character_lcd_write
00002500 g     F .text	00000314 _free_r
00006138 g     F .text	000001b0 __call_exitprocs
00000230 g     F .text	0000013c WriteInt2HexDisplay
00007fe4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00009bdc g     O .bss	00000004 _alt_tick_rate
00009be0 g     O .bss	00000004 _alt_nticks
000037c0 g     F .text	00000124 read
00003c30 g     F .text	000000c8 alt_sys_init
00004c5c g     F .text	000000b0 alt_up_character_lcd_shift_display
00006000 g     F .text	00000134 __register_exitproc
00004eec g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00004d0c g     F .text	00000090 alt_up_character_lcd_erase_pos
0000420c g     F .text	00000074 altera_avalon_jtag_uart_close
00000770 g     F .text	00000038 __mulsi3
00006464 g       *ABS*	00000000 __ram_rwdata_start
0000634c g       *ABS*	00000000 __ram_rodata_start
00009be4 g     O .bss	00000028 __malloc_current_mallinfo
00003d30 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00005e70 g     F .text	000000d0 alt_get_fd
00002d84 g     F .text	00000070 _close_r
00005f8c g     F .text	00000074 memcmp
00003de0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00009e9c g       *ABS*	00000000 __alt_stack_base
00003e28 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00001d74 g     F .text	0000013c __swsetup_r
000022e4 g     F .text	000000f0 __sfp
00006864 g     O .rwdata	00000408 __malloc_av_
00002144 g     F .text	00000004 __sinit_lock_release
00002cac g     F .text	00000060 __sread
00004e58 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00005d50 g     F .text	00000120 alt_find_file
0000530c g     F .text	000000b4 alt_dev_llist_insert
00003780 g     F .text	00000020 __malloc_lock
000039bc g     F .text	000000bc sbrk
00001eb0 g     F .text	000001fc _fflush_r
00009bbc g       *ABS*	00000000 __bss_start
00002b28 g     F .text	00000098 memset
00000730 g     F .text	00000040 main
00009bd4 g     O .bss	00000004 alt_envp
00009bc4 g     O .bss	00000004 __malloc_max_total_mem
00003d88 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00000474 g     F .text	00000034 LCD_cursor_off
00004bac g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00002bc0 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00002f04 g     F .text	00000014 fclose
00009d0c g     O .bss	00000190 _atexit0
00000d6c g     F .text	00000740 _malloc_r
00007ffc g     O .rwdata	00000004 alt_errno
000028dc g     F .text	000000b8 _fwalk
000049b8 g     F .text	00000040 alt_up_character_lcd_open_dev
000023d4 g     F .text	0000012c _malloc_trim_r
0000634c g       *ABS*	00000000 __CTOR_END__
00004984 g     F .text	00000034 alt_up_character_lcd_init
0000634c g       *ABS*	00000000 __flash_rodata_start
0000634c g       *ABS*	00000000 __DTOR_LIST__
0000515c g     F .text	00000040 alt_up_rs232_open_dev
000006fc g     F .text	00000034 TestDRAM
0000056c g     F .text	0000006c TimerWait
00003bfc g     F .text	00000034 alt_irq_init
00003944 g     F .text	00000078 alt_release_fd
00004d9c g     F .text	00000034 alt_up_character_lcd_cursor_off
00005f40 g     F .text	00000014 atexit
00002d0c g     F .text	00000078 _write_r
00007fd8 g     O .rwdata	00000004 _impure_ptr
000004a8 g     F .text	000000c4 TimerStart
00009bcc g     O .bss	00000004 alt_argc
00005484 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000021fc g     F .text	00000018 __fp_unlock_all
00007fe8 g     O .rwdata	00000008 alt_fs_list
00004e04 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00004f7c g     F .text	00000048 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008010 g       *ABS*	00000000 _edata
00009e9c g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00004280 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00002c30 g     F .text	0000007c __swrite
00007fe0 g     O .rwdata	00000004 __malloc_trim_threshold
00005d30 g     F .text	00000020 altera_nios2_qsys_irq_init
00005f54 g     F .text	00000038 exit
00002814 g     F .text	000000c8 _fwalk_reent
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000213c g     F .text	00000004 __sfp_lock_release
00004a70 g     F .text	00000078 alt_up_character_lcd_string
00006328 g     F .text	00000020 _exit
0000519c g     F .text	00000154 alt_alarm_start
00002994 g     F .text	00000194 __smakebuf_r
0000085c g     F .text	00000074 strlen
000059a0 g     F .text	0000018c open
0000557c g     F .text	0000001c alt_icache_flush_all
00007fd4 g     O .rwdata	00000004 green_LED_ptr
00004b34 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00008004 g     O .rwdata	00000004 alt_priority_mask
00008008 g     O .rwdata	00000008 alt_alarm_list
00005420 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
00004eb0 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
000030ec g     F .text	00000100 close
000034d4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00002140 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18e70304 	addi	r3,r3,-25588
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18e70304 	addi	r3,r3,-25588
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6bff514 	ori	gp,gp,65492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10a6ef14 	ori	r2,r2,39868

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18e7a714 	ori	r3,r3,40604

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00034d40 	call	34d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00037140 	call	3714 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <Nibble2HexDisplay>:

/*******************************************************************************
// * Convert 4-lower bits (the rightmost nibble) to the hex display digit code.
 *******************************************************************************/
byte Nibble2HexDisplay(int nibble)
{
     1f4:	defffe04 	addi	sp,sp,-8
     1f8:	df000115 	stw	fp,4(sp)
     1fc:	df000104 	addi	fp,sp,4
     200:	e13fff15 	stw	r4,-4(fp)
	// hex display drive uses opposite polarity than direct access to HEXi[6 downto 0]
	// '1' here switch segment on.  HEXi[6 downto 0] segment is switched on when '0'.
	const byte	seven_seg_decode_table[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
			  								 0xFF, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
   return seven_seg_decode_table[nibble & 0xF];
     204:	e0bfff17 	ldw	r2,-4(fp)
     208:	10c003cc 	andi	r3,r2,15
     20c:	00800034 	movhi	r2,0
     210:	1098d304 	addi	r2,r2,25420
     214:	10c5883a 	add	r2,r2,r3
     218:	10800003 	ldbu	r2,0(r2)
     21c:	10803fcc 	andi	r2,r2,255
}
     220:	e037883a 	mov	sp,fp
     224:	df000017 	ldw	fp,0(sp)
     228:	dec00104 	addi	sp,sp,4
     22c:	f800283a 	ret

00000230 <WriteInt2HexDisplay>:
/*******************************************************************************
 * Write int as unsigned int to 8 digit-hex display.
 * If noLeadingZeros!=0 then left zeros are switched off;
********************************************************************************/
void WriteInt2HexDisplay(int n, int noLeadingZeros)
{
     230:	defff504 	addi	sp,sp,-44
     234:	dfc00a15 	stw	ra,40(sp)
     238:	df000915 	stw	fp,36(sp)
     23c:	dc000815 	stw	r16,32(sp)
     240:	df000804 	addi	fp,sp,32
     244:	e13ffe15 	stw	r4,-8(fp)
     248:	e17fff15 	stw	r5,-4(fp)
	byte	hex_segments[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     24c:	e03ffc05 	stb	zero,-16(fp)
     250:	e03ffc45 	stb	zero,-15(fp)
     254:	e03ffc85 	stb	zero,-14(fp)
     258:	e03ffcc5 	stb	zero,-13(fp)
     25c:	e03ffd05 	stb	zero,-12(fp)
     260:	e03ffd45 	stb	zero,-11(fp)
     264:	e03ffd85 	stb	zero,-10(fp)
     268:	e03ffdc5 	stb	zero,-9(fp)
	volatile int * HEX3_HEX0_ptr = (int *) HEX3_HEX0_BASE;
     26c:	00840034 	movhi	r2,4096
     270:	10800804 	addi	r2,r2,32
     274:	e0bffb15 	stw	r2,-20(fp)
	volatile int * HEX7_HEX4_ptr = (int *) HEX7_HEX4_BASE;
     278:	00840034 	movhi	r2,4096
     27c:	10800c04 	addi	r2,r2,48
     280:	e0bffa15 	stw	r2,-24(fp)
	unsigned int shift_buffer = (unsigned int) n;
     284:	e0bffe17 	ldw	r2,-8(fp)
     288:	e0bff915 	stw	r2,-28(fp)
	int i;

	for ( i = 0; i < 8; ++i )
     28c:	e03ff815 	stw	zero,-32(fp)
     290:	00000d06 	br	2c8 <WriteInt2HexDisplay+0x98>
	{
		// character is in rightmost nibble
		hex_segments[i] = Nibble2HexDisplay(shift_buffer);
     294:	e43ff817 	ldw	r16,-32(fp)
     298:	e13ff917 	ldw	r4,-28(fp)
     29c:	00001f40 	call	1f4 <Nibble2HexDisplay>
     2a0:	1007883a 	mov	r3,r2
     2a4:	e0bffc04 	addi	r2,fp,-16
     2a8:	1405883a 	add	r2,r2,r16
     2ac:	10c00005 	stb	r3,0(r2)
		shift_buffer = shift_buffer >> 4;
     2b0:	e0bff917 	ldw	r2,-28(fp)
     2b4:	1004d13a 	srli	r2,r2,4
     2b8:	e0bff915 	stw	r2,-28(fp)
	volatile int * HEX3_HEX0_ptr = (int *) HEX3_HEX0_BASE;
	volatile int * HEX7_HEX4_ptr = (int *) HEX7_HEX4_BASE;
	unsigned int shift_buffer = (unsigned int) n;
	int i;

	for ( i = 0; i < 8; ++i )
     2bc:	e0bff817 	ldw	r2,-32(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bff815 	stw	r2,-32(fp)
     2c8:	e0bff817 	ldw	r2,-32(fp)
     2cc:	10800210 	cmplti	r2,r2,8
     2d0:	103ff01e 	bne	r2,zero,294 <WriteInt2HexDisplay+0x64>
	{
		// character is in rightmost nibble
		hex_segments[i] = Nibble2HexDisplay(shift_buffer);
		shift_buffer = shift_buffer >> 4;
	}
	if(noLeadingZeros!=0)
     2d4:	e0bfff17 	ldw	r2,-4(fp)
     2d8:	1005003a 	cmpeq	r2,r2,zero
     2dc:	1000141e 	bne	r2,zero,330 <WriteInt2HexDisplay+0x100>
	{
	  for(i=7; i>1; i--)
     2e0:	008001c4 	movi	r2,7
     2e4:	e0bff815 	stw	r2,-32(fp)
     2e8:	00000e06 	br	324 <WriteInt2HexDisplay+0xf4>
	  { if(hex_segments[i]==0x3F) hex_segments[i]=0x0;
     2ec:	e0fff817 	ldw	r3,-32(fp)
     2f0:	e0bffc04 	addi	r2,fp,-16
     2f4:	10c5883a 	add	r2,r2,r3
     2f8:	10800003 	ldbu	r2,0(r2)
     2fc:	10803fcc 	andi	r2,r2,255
     300:	10800fd8 	cmpnei	r2,r2,63
     304:	10000a1e 	bne	r2,zero,330 <WriteInt2HexDisplay+0x100>
     308:	e0fff817 	ldw	r3,-32(fp)
     30c:	e0bffc04 	addi	r2,fp,-16
     310:	10c5883a 	add	r2,r2,r3
     314:	10000005 	stb	zero,0(r2)
		hex_segments[i] = Nibble2HexDisplay(shift_buffer);
		shift_buffer = shift_buffer >> 4;
	}
	if(noLeadingZeros!=0)
	{
	  for(i=7; i>1; i--)
     318:	e0bff817 	ldw	r2,-32(fp)
     31c:	10bfffc4 	addi	r2,r2,-1
     320:	e0bff815 	stw	r2,-32(fp)
     324:	e0bff817 	ldw	r2,-32(fp)
     328:	10800088 	cmpgei	r2,r2,2
     32c:	103fef1e 	bne	r2,zero,2ec <WriteInt2HexDisplay+0xbc>
	  { if(hex_segments[i]==0x3F) hex_segments[i]=0x0;
	    else break;
	  }
	}
	*(HEX3_HEX0_ptr) = *(int *) hex_segments; 		// drive the hex displays
     330:	e0bffc04 	addi	r2,fp,-16
     334:	10c00017 	ldw	r3,0(r2)
     338:	e0bffb17 	ldw	r2,-20(fp)
     33c:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segments+4);	// drive the hex displays
     340:	e0bffc04 	addi	r2,fp,-16
     344:	10800104 	addi	r2,r2,4
     348:	10c00017 	ldw	r3,0(r2)
     34c:	e0bffa17 	ldw	r2,-24(fp)
     350:	10c00015 	stw	r3,0(r2)

	return;
}
     354:	e037883a 	mov	sp,fp
     358:	dfc00217 	ldw	ra,8(sp)
     35c:	df000117 	ldw	fp,4(sp)
     360:	dc000017 	ldw	r16,0(sp)
     364:	dec00304 	addi	sp,sp,12
     368:	f800283a 	ret

0000036c <LCD_cursor>:
/****************************************************************************************
 * Subroutine to move the LCD cursor, x in <0,15> character, y in <0,1> line
****************************************************************************************/

void LCD_cursor(int x, int y)
{
     36c:	defffb04 	addi	sp,sp,-20
     370:	df000415 	stw	fp,16(sp)
     374:	df000404 	addi	fp,sp,16
     378:	e13ffe15 	stw	r4,-8(fp)
     37c:	e17fff15 	stw	r5,-4(fp)
	volatile char * const LCD_display_ptr = (char *) LCD_16x2_BASE;	// 16x2 character display
     380:	00840034 	movhi	r2,4096
     384:	108c1404 	addi	r2,r2,12368
     388:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x &0xF;
     38c:	e0bffe17 	ldw	r2,-8(fp)
     390:	108003cc 	andi	r2,r2,15
     394:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;	// set bit 6 for bottom row
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	1005003a 	cmpeq	r2,r2,zero
     3a0:	1000031e 	bne	r2,zero,3b0 <LCD_cursor+0x44>
     3a4:	e0bffc03 	ldbu	r2,-16(fp)
     3a8:	10801014 	ori	r2,r2,64
     3ac:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;		// need to set bit 7 to set the cursor location
     3b0:	00ffe004 	movi	r3,-128
     3b4:	e0bffc03 	ldbu	r2,-16(fp)
     3b8:	10c4b03a 	or	r2,r2,r3
     3bc:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;	// write to the LCD instruction register
     3c0:	e0fffd17 	ldw	r3,-12(fp)
     3c4:	e0bffc03 	ldbu	r2,-16(fp)
     3c8:	18800005 	stb	r2,0(r3)
}
     3cc:	e037883a 	mov	sp,fp
     3d0:	df000017 	ldw	fp,0(sp)
     3d4:	dec00104 	addi	sp,sp,4
     3d8:	f800283a 	ret

000003dc <LCD_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the LCD from current cursor, clear end of line
****************************************************************************************/
void LCD_text(const char * text_ptr)
{
     3dc:	defffb04 	addi	sp,sp,-20
     3e0:	df000415 	stw	fp,16(sp)
     3e4:	df000404 	addi	fp,sp,16
     3e8:	e13fff15 	stw	r4,-4(fp)
	volatile char * const LCD_display_ptr = (char *) LCD_16x2_BASE;	// 16x2 character display
     3ec:	00840034 	movhi	r2,4096
     3f0:	108c1404 	addi	r2,r2,12368
     3f4:	e0bffe15 	stw	r2,-8(fp)
	int i=16; // max line length
     3f8:	00800404 	movi	r2,16
     3fc:	e0bffd15 	stw	r2,-12(fp)
	while (--i>0)
     400:	00001206 	br	44c <LCD_text+0x70>
	{
		char c = *text_ptr;
     404:	e0bfff17 	ldw	r2,-4(fp)
     408:	10800003 	ldbu	r2,0(r2)
     40c:	e0bffc05 	stb	r2,-16(fp)
		if(c!=0)
     410:	e0bffc07 	ldb	r2,-16(fp)
     414:	1005003a 	cmpeq	r2,r2,zero
     418:	1000081e 	bne	r2,zero,43c <LCD_text+0x60>
		{
		  *(LCD_display_ptr + 1) = c;	// write to the LCD data register
     41c:	e0bffe17 	ldw	r2,-8(fp)
     420:	10c00044 	addi	r3,r2,1
     424:	e0bffc03 	ldbu	r2,-16(fp)
     428:	18800005 	stb	r2,0(r3)
		  text_ptr++;
     42c:	e0bfff17 	ldw	r2,-4(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bfff15 	stw	r2,-4(fp)
     438:	00000406 	br	44c <LCD_text+0x70>
		}
		else *(LCD_display_ptr + 1) = ' '; // clear end of line
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	10c00044 	addi	r3,r2,1
     444:	00800804 	movi	r2,32
     448:	18800005 	stb	r2,0(r3)
****************************************************************************************/
void LCD_text(const char * text_ptr)
{
	volatile char * const LCD_display_ptr = (char *) LCD_16x2_BASE;	// 16x2 character display
	int i=16; // max line length
	while (--i>0)
     44c:	e0bffd17 	ldw	r2,-12(fp)
     450:	10bfffc4 	addi	r2,r2,-1
     454:	e0bffd15 	stw	r2,-12(fp)
     458:	e0bffd17 	ldw	r2,-12(fp)
     45c:	10800048 	cmpgei	r2,r2,1
     460:	103fe81e 	bne	r2,zero,404 <LCD_text+0x28>
		  *(LCD_display_ptr + 1) = c;	// write to the LCD data register
		  text_ptr++;
		}
		else *(LCD_display_ptr + 1) = ' '; // clear end of line
	}
}
     464:	e037883a 	mov	sp,fp
     468:	df000017 	ldw	fp,0(sp)
     46c:	dec00104 	addi	sp,sp,4
     470:	f800283a 	ret

00000474 <LCD_cursor_off>:

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
     474:	defffe04 	addi	sp,sp,-8
     478:	df000115 	stw	fp,4(sp)
     47c:	df000104 	addi	fp,sp,4
	volatile char * const LCD_display_ptr = (char *) LCD_16x2_BASE;	// 16x2 character display
     480:	00840034 	movhi	r2,4096
     484:	108c1404 	addi	r2,r2,12368
     488:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x0C;	// turn off the LCD cursor
     48c:	e0ffff17 	ldw	r3,-4(fp)
     490:	00800304 	movi	r2,12
     494:	18800005 	stb	r2,0(r3)
}
     498:	e037883a 	mov	sp,fp
     49c:	df000017 	ldw	fp,0(sp)
     4a0:	dec00104 	addi	sp,sp,4
     4a4:	f800283a 	ret

000004a8 <TimerStart>:

/**************************************************************************************
 Load timer by time defined in milliseconds and start its timing
***************************************************************************************/
void TimerStart(int time_ms)
{
     4a8:	defff804 	addi	sp,sp,-32
     4ac:	dfc00715 	stw	ra,28(sp)
     4b0:	df000615 	stw	fp,24(sp)
     4b4:	df000604 	addi	fp,sp,24
     4b8:	e13fff15 	stw	r4,-4(fp)
	volatile unsigned int  * const interval_timer = (unsigned int *) INTERVAL_TIMER_BASE;  // interval timer base
     4bc:	00840034 	movhi	r2,4096
     4c0:	10880004 	addi	r2,r2,8192
     4c4:	e0bffe15 	stw	r2,-8(fp)
    const unsigned int MS = 50000; // 50 MHz/1000
     4c8:	00b0d414 	movui	r2,50000
     4cc:	e0bffd15 	stw	r2,-12(fp)
    const unsigned int STOP_TIMER_COMMAND=8;
     4d0:	00800204 	movi	r2,8
     4d4:	e0bffc15 	stw	r2,-16(fp)
    const unsigned int START_TIMER_COMMAND=4; // start timer command without enabling interrupt!
     4d8:	00800104 	movi	r2,4
     4dc:	e0bffb15 	stw	r2,-20(fp)
    if(time_ms<1) time_ms=1;
     4e0:	e0bfff17 	ldw	r2,-4(fp)
     4e4:	10800048 	cmpgei	r2,r2,1
     4e8:	1000021e 	bne	r2,zero,4f4 <TimerStart+0x4c>
     4ec:	00800044 	movi	r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)

    unsigned int time = MS * (unsigned int)time_ms;
     4f4:	e17fff17 	ldw	r5,-4(fp)
     4f8:	e13ffd17 	ldw	r4,-12(fp)
     4fc:	00007700 	call	770 <__mulsi3>
     500:	e0bffa15 	stw	r2,-24(fp)
    interval_timer[1] =  STOP_TIMER_COMMAND; // stop timer command
     504:	e0bffe17 	ldw	r2,-8(fp)
     508:	10c00104 	addi	r3,r2,4
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	18800015 	stw	r2,0(r3)
    interval_timer[0] =  0;   // reset Time Out bit
     514:	e0bffe17 	ldw	r2,-8(fp)
     518:	10000015 	stw	zero,0(r2)
    interval_timer[2] =  (time & 0xFFFF);  // lower 16 bits
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10c00204 	addi	r3,r2,8
     524:	e0bffa17 	ldw	r2,-24(fp)
     528:	10bfffcc 	andi	r2,r2,65535
     52c:	18800015 	stw	r2,0(r3)
    interval_timer[3] =  (time>>16) & 0xFFFF;   // upper 16 bits
     530:	e0bffe17 	ldw	r2,-8(fp)
     534:	10c00304 	addi	r3,r2,12
     538:	e0bffa17 	ldw	r2,-24(fp)
     53c:	1004d43a 	srli	r2,r2,16
     540:	10bfffcc 	andi	r2,r2,65535
     544:	18800015 	stw	r2,0(r3)
    interval_timer[1] =  START_TIMER_COMMAND;
     548:	e0bffe17 	ldw	r2,-8(fp)
     54c:	10c00104 	addi	r3,r2,4
     550:	e0bffb17 	ldw	r2,-20(fp)
     554:	18800015 	stw	r2,0(r3)
}
     558:	e037883a 	mov	sp,fp
     55c:	dfc00117 	ldw	ra,4(sp)
     560:	df000017 	ldw	fp,0(sp)
     564:	dec00204 	addi	sp,sp,8
     568:	f800283a 	ret

0000056c <TimerWait>:
/**************************************************************************************
 Wait until started timer elapsed
***************************************************************************************/
void TimerWait(void)
{
     56c:	defffb04 	addi	sp,sp,-20
     570:	df000415 	stw	fp,16(sp)
     574:	df000404 	addi	fp,sp,16
	volatile unsigned int  * const interval_timer = (unsigned int *) INTERVAL_TIMER_BASE;  // interval timer base
     578:	00840034 	movhi	r2,4096
     57c:	10880004 	addi	r2,r2,8192
     580:	e0bfff15 	stw	r2,-4(fp)
   const unsigned int TIMEOUT_BIT_MASK = 1;
     584:	00800044 	movi	r2,1
     588:	e0bffe15 	stw	r2,-8(fp)
    const unsigned int RUNNING_BIT_MASK = 2;
     58c:	00800084 	movi	r2,2
     590:	e0bffd15 	stw	r2,-12(fp)
    unsigned int status;
    do
    {
	  status = interval_timer[0];
     594:	e0bfff17 	ldw	r2,-4(fp)
     598:	10800017 	ldw	r2,0(r2)
     59c:	e0bffc15 	stw	r2,-16(fp)
    }
    while(      (status & RUNNING_BIT_MASK)!=0 // timer is still running
              && (status & TIMEOUT_BIT_MASK)==0 // timer has not reached 0 yet
            );
     5a0:	e0fffc17 	ldw	r3,-16(fp)
     5a4:	e0bffd17 	ldw	r2,-12(fp)
     5a8:	1884703a 	and	r2,r3,r2
     5ac:	1005003a 	cmpeq	r2,r2,zero
     5b0:	1000051e 	bne	r2,zero,5c8 <TimerWait+0x5c>
     5b4:	e0fffc17 	ldw	r3,-16(fp)
     5b8:	e0bffe17 	ldw	r2,-8(fp)
     5bc:	1884703a 	and	r2,r3,r2
     5c0:	1005003a 	cmpeq	r2,r2,zero
     5c4:	103ff31e 	bne	r2,zero,594 <TimerWait+0x28>
}
     5c8:	e037883a 	mov	sp,fp
     5cc:	df000017 	ldw	fp,0(sp)
     5d0:	dec00104 	addi	sp,sp,4
     5d4:	f800283a 	ret

000005d8 <TestOfMemory>:

/*********************************************************************************
 * Test memory
 */
static int TestOfMemory(int startAddress, int endAddress)
{
     5d8:	defff904 	addi	sp,sp,-28
     5dc:	df000615 	stw	fp,24(sp)
     5e0:	df000604 	addi	fp,sp,24
     5e4:	e13ffe15 	stw	r4,-8(fp)
     5e8:	e17fff15 	stw	r5,-4(fp)
	int * RAM_ptr;
	const int RAM_write = 0x55555555;
     5ec:	00955574 	movhi	r2,21845
     5f0:	10955544 	addi	r2,r2,21845
     5f4:	e0bffc15 	stw	r2,-16(fp)
	int RAM_read;
	int memory_OK = 1;
     5f8:	00800044 	movi	r2,1
     5fc:	e0bffa15 	stw	r2,-24(fp)
	while ( !memory_OK )
     600:	00002906 	br	6a8 <TestOfMemory+0xd0>
	{
		RAM_ptr = (int *) startAddress;
     604:	e0bffe17 	ldw	r2,-8(fp)
     608:	e0bffd15 	stw	r2,-12(fp)
		while( (RAM_ptr <= (int *) endAddress) && (memory_OK!=0) )
     60c:	00002006 	br	690 <TestOfMemory+0xb8>
		{
			// test SRAM
			RAM_read = * RAM_ptr;
     610:	e0bffd17 	ldw	r2,-12(fp)
     614:	10800017 	ldw	r2,0(r2)
     618:	e0bffb15 	stw	r2,-20(fp)
			* RAM_ptr=RAM_write;
     61c:	e0fffd17 	ldw	r3,-12(fp)
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	18800015 	stw	r2,0(r3)
			if (*RAM_ptr != RAM_write)	{	memory_OK = 0;	}
     628:	e0bffd17 	ldw	r2,-12(fp)
     62c:	10c00017 	ldw	r3,0(r2)
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	18800126 	beq	r3,r2,63c <TestOfMemory+0x64>
     638:	e03ffa15 	stw	zero,-24(fp)
			* RAM_ptr = ~RAM_write;
     63c:	e0bffc17 	ldw	r2,-16(fp)
     640:	0086303a 	nor	r3,zero,r2
     644:	e0bffd17 	ldw	r2,-12(fp)
     648:	10c00015 	stw	r3,0(r2)
			if (*RAM_ptr != ~RAM_write)	{	memory_OK = 0;	}
     64c:	e0bffd17 	ldw	r2,-12(fp)
     650:	10c00017 	ldw	r3,0(r2)
     654:	e0bffc17 	ldw	r2,-16(fp)
     658:	0084303a 	nor	r2,zero,r2
     65c:	18800126 	beq	r3,r2,664 <TestOfMemory+0x8c>
     660:	e03ffa15 	stw	zero,-24(fp)
			* RAM_ptr = RAM_read;
     664:	e0fffd17 	ldw	r3,-12(fp)
     668:	e0bffb17 	ldw	r2,-20(fp)
     66c:	18800015 	stw	r2,0(r3)
			if(* RAM_ptr != RAM_read)   {	memory_OK = 0;	}
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10c00017 	ldw	r3,0(r2)
     678:	e0bffb17 	ldw	r2,-20(fp)
     67c:	18800126 	beq	r3,r2,684 <TestOfMemory+0xac>
     680:	e03ffa15 	stw	zero,-24(fp)
			RAM_ptr += 1;
     684:	e0bffd17 	ldw	r2,-12(fp)
     688:	10800104 	addi	r2,r2,4
     68c:	e0bffd15 	stw	r2,-12(fp)
	int RAM_read;
	int memory_OK = 1;
	while ( !memory_OK )
	{
		RAM_ptr = (int *) startAddress;
		while( (RAM_ptr <= (int *) endAddress) && (memory_OK!=0) )
     690:	e0ffff17 	ldw	r3,-4(fp)
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	18800336 	bltu	r3,r2,6a8 <TestOfMemory+0xd0>
     69c:	e0bffa17 	ldw	r2,-24(fp)
     6a0:	1004c03a 	cmpne	r2,r2,zero
     6a4:	103fda1e 	bne	r2,zero,610 <TestOfMemory+0x38>
{
	int * RAM_ptr;
	const int RAM_write = 0x55555555;
	int RAM_read;
	int memory_OK = 1;
	while ( !memory_OK )
     6a8:	e0bffa17 	ldw	r2,-24(fp)
     6ac:	1005003a 	cmpeq	r2,r2,zero
     6b0:	103fd41e 	bne	r2,zero,604 <TestOfMemory+0x2c>
			* RAM_ptr = RAM_read;
			if(* RAM_ptr != RAM_read)   {	memory_OK = 0;	}
			RAM_ptr += 1;
		};
	};
	return memory_OK;
     6b4:	e0bffa17 	ldw	r2,-24(fp)
}
     6b8:	e037883a 	mov	sp,fp
     6bc:	df000017 	ldw	fp,0(sp)
     6c0:	dec00104 	addi	sp,sp,4
     6c4:	f800283a 	ret

000006c8 <TestSRAM>:

// return 1, if Static RAM is OK, otherwise 0
int TestSRAM()
{
     6c8:	defffe04 	addi	sp,sp,-8
     6cc:	dfc00115 	stw	ra,4(sp)
     6d0:	df000015 	stw	fp,0(sp)
     6d4:	d839883a 	mov	fp,sp
	return TestOfMemory(SRAM_BASE, SRAM_END);
     6d8:	01020034 	movhi	r4,2048
     6dc:	01420834 	movhi	r5,2080
     6e0:	297fffc4 	addi	r5,r5,-1
     6e4:	00005d80 	call	5d8 <TestOfMemory>
}
     6e8:	e037883a 	mov	sp,fp
     6ec:	dfc00117 	ldw	ra,4(sp)
     6f0:	df000017 	ldw	fp,0(sp)
     6f4:	dec00204 	addi	sp,sp,8
     6f8:	f800283a 	ret

000006fc <TestDRAM>:
// return 1, if Dynamic RAM is OK, otherwise 0
int TestDRAM()
{
     6fc:	defffe04 	addi	sp,sp,-8
     700:	dfc00115 	stw	ra,4(sp)
     704:	df000015 	stw	fp,0(sp)
     708:	d839883a 	mov	fp,sp
	return TestOfMemory(DRAM_BASE, DRAM_END);
     70c:	0009883a 	mov	r4,zero
     710:	01420034 	movhi	r5,2048
     714:	297fffc4 	addi	r5,r5,-1
     718:	00005d80 	call	5d8 <TestOfMemory>
}
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <main>:
#define TIME 1000 /* setting ms to hardware timer of DE2-115 board */

volatile int * const green_LED_ptr	= (int *) GREEN_LED_BASE;	// green LED address

int main()
{
     730:	defffe04 	addi	sp,sp,-8
     734:	dfc00115 	stw	ra,4(sp)
     738:	df000015 	stw	fp,0(sp)
     73c:	d839883a 	mov	fp,sp
  printf("Nios II has been started\n");
     740:	01000034 	movhi	r4,0
     744:	2118d704 	addi	r4,r4,25436
     748:	00008480 	call	848 <puts>
  while(1){
	  *green_LED_ptr=0; // 100
     74c:	d0a00017 	ldw	r2,-32768(gp)
     750:	10000015 	stw	zero,0(r2)
	  printf("Time has been set on value 100\n");
     754:	01000034 	movhi	r4,0
     758:	2118de04 	addi	r4,r4,25464
     75c:	00008480 	call	848 <puts>
	  TimerStart(TIME);
     760:	0100fa04 	movi	r4,1000
     764:	00004a80 	call	4a8 <TimerStart>
	  TimerWait();
     768:	000056c0 	call	56c <TimerWait>

	  /**green_LED_ptr=11; // 1100
	  printf("Time has been set on value 1100\n");
	  TimerStart(TIME);
	  TimerWait();**/
  }
     76c:	003ff706 	br	74c <main+0x1c>

00000770 <__mulsi3>:
     770:	20000a26 	beq	r4,zero,79c <__mulsi3+0x2c>
     774:	0007883a 	mov	r3,zero
     778:	2080004c 	andi	r2,r4,1
     77c:	1005003a 	cmpeq	r2,r2,zero
     780:	2008d07a 	srli	r4,r4,1
     784:	1000011e 	bne	r2,zero,78c <__mulsi3+0x1c>
     788:	1947883a 	add	r3,r3,r5
     78c:	294b883a 	add	r5,r5,r5
     790:	203ff91e 	bne	r4,zero,778 <__mulsi3+0x8>
     794:	1805883a 	mov	r2,r3
     798:	f800283a 	ret
     79c:	0007883a 	mov	r3,zero
     7a0:	1805883a 	mov	r2,r3
     7a4:	f800283a 	ret

000007a8 <_puts_r>:
     7a8:	defff604 	addi	sp,sp,-40
     7ac:	dc400715 	stw	r17,28(sp)
     7b0:	2023883a 	mov	r17,r4
     7b4:	2809883a 	mov	r4,r5
     7b8:	dfc00915 	stw	ra,36(sp)
     7bc:	dcc00815 	stw	r19,32(sp)
     7c0:	2827883a 	mov	r19,r5
     7c4:	000085c0 	call	85c <strlen>
     7c8:	89400217 	ldw	r5,8(r17)
     7cc:	00c00034 	movhi	r3,0
     7d0:	18d8e604 	addi	r3,r3,25496
     7d4:	01c00044 	movi	r7,1
     7d8:	12000044 	addi	r8,r2,1
     7dc:	d8c00515 	stw	r3,20(sp)
     7e0:	d9c00615 	stw	r7,24(sp)
     7e4:	d8c00304 	addi	r3,sp,12
     7e8:	01c00084 	movi	r7,2
     7ec:	8809883a 	mov	r4,r17
     7f0:	d80d883a 	mov	r6,sp
     7f4:	d8c00015 	stw	r3,0(sp)
     7f8:	dcc00315 	stw	r19,12(sp)
     7fc:	da000215 	stw	r8,8(sp)
     800:	d9c00115 	stw	r7,4(sp)
     804:	d8800415 	stw	r2,16(sp)
     808:	00008d00 	call	8d0 <__sfvwrite_r>
     80c:	00ffffc4 	movi	r3,-1
     810:	10000626 	beq	r2,zero,82c <_puts_r+0x84>
     814:	1805883a 	mov	r2,r3
     818:	dfc00917 	ldw	ra,36(sp)
     81c:	dcc00817 	ldw	r19,32(sp)
     820:	dc400717 	ldw	r17,28(sp)
     824:	dec00a04 	addi	sp,sp,40
     828:	f800283a 	ret
     82c:	00c00284 	movi	r3,10
     830:	1805883a 	mov	r2,r3
     834:	dfc00917 	ldw	ra,36(sp)
     838:	dcc00817 	ldw	r19,32(sp)
     83c:	dc400717 	ldw	r17,28(sp)
     840:	dec00a04 	addi	sp,sp,40
     844:	f800283a 	ret

00000848 <puts>:
     848:	00800034 	movhi	r2,0
     84c:	109ff604 	addi	r2,r2,32728
     850:	200b883a 	mov	r5,r4
     854:	11000017 	ldw	r4,0(r2)
     858:	00007a81 	jmpi	7a8 <_puts_r>

0000085c <strlen>:
     85c:	208000cc 	andi	r2,r4,3
     860:	2011883a 	mov	r8,r4
     864:	1000161e 	bne	r2,zero,8c0 <strlen+0x64>
     868:	20c00017 	ldw	r3,0(r4)
     86c:	017fbff4 	movhi	r5,65279
     870:	297fbfc4 	addi	r5,r5,-257
     874:	01e02074 	movhi	r7,32897
     878:	39e02004 	addi	r7,r7,-32640
     87c:	1945883a 	add	r2,r3,r5
     880:	11c4703a 	and	r2,r2,r7
     884:	00c6303a 	nor	r3,zero,r3
     888:	1886703a 	and	r3,r3,r2
     88c:	18000c1e 	bne	r3,zero,8c0 <strlen+0x64>
     890:	280d883a 	mov	r6,r5
     894:	380b883a 	mov	r5,r7
     898:	21000104 	addi	r4,r4,4
     89c:	20800017 	ldw	r2,0(r4)
     8a0:	1187883a 	add	r3,r2,r6
     8a4:	1946703a 	and	r3,r3,r5
     8a8:	0084303a 	nor	r2,zero,r2
     8ac:	10c4703a 	and	r2,r2,r3
     8b0:	103ff926 	beq	r2,zero,898 <strlen+0x3c>
     8b4:	20800007 	ldb	r2,0(r4)
     8b8:	10000326 	beq	r2,zero,8c8 <strlen+0x6c>
     8bc:	21000044 	addi	r4,r4,1
     8c0:	20800007 	ldb	r2,0(r4)
     8c4:	103ffd1e 	bne	r2,zero,8bc <strlen+0x60>
     8c8:	2205c83a 	sub	r2,r4,r8
     8cc:	f800283a 	ret

000008d0 <__sfvwrite_r>:
     8d0:	30800217 	ldw	r2,8(r6)
     8d4:	defff504 	addi	sp,sp,-44
     8d8:	df000915 	stw	fp,36(sp)
     8dc:	dd800715 	stw	r22,28(sp)
     8e0:	dc800315 	stw	r18,12(sp)
     8e4:	dfc00a15 	stw	ra,40(sp)
     8e8:	ddc00815 	stw	r23,32(sp)
     8ec:	dd400615 	stw	r21,24(sp)
     8f0:	dd000515 	stw	r20,20(sp)
     8f4:	dcc00415 	stw	r19,16(sp)
     8f8:	dc400215 	stw	r17,8(sp)
     8fc:	dc000115 	stw	r16,4(sp)
     900:	302d883a 	mov	r22,r6
     904:	2039883a 	mov	fp,r4
     908:	2825883a 	mov	r18,r5
     90c:	10001c26 	beq	r2,zero,980 <__sfvwrite_r+0xb0>
     910:	29c0030b 	ldhu	r7,12(r5)
     914:	3880020c 	andi	r2,r7,8
     918:	10002726 	beq	r2,zero,9b8 <__sfvwrite_r+0xe8>
     91c:	28800417 	ldw	r2,16(r5)
     920:	10002526 	beq	r2,zero,9b8 <__sfvwrite_r+0xe8>
     924:	3880008c 	andi	r2,r7,2
     928:	b5400017 	ldw	r21,0(r22)
     92c:	10002826 	beq	r2,zero,9d0 <__sfvwrite_r+0x100>
     930:	0021883a 	mov	r16,zero
     934:	0023883a 	mov	r17,zero
     938:	880d883a 	mov	r6,r17
     93c:	e009883a 	mov	r4,fp
     940:	00810004 	movi	r2,1024
     944:	80006e26 	beq	r16,zero,b00 <__sfvwrite_r+0x230>
     948:	800f883a 	mov	r7,r16
     94c:	91400717 	ldw	r5,28(r18)
     950:	1400012e 	bgeu	r2,r16,958 <__sfvwrite_r+0x88>
     954:	100f883a 	mov	r7,r2
     958:	90c00917 	ldw	r3,36(r18)
     95c:	183ee83a 	callr	r3
     960:	1007883a 	mov	r3,r2
     964:	80a1c83a 	sub	r16,r16,r2
     968:	88a3883a 	add	r17,r17,r2
     96c:	00806d0e 	bge	zero,r2,b24 <__sfvwrite_r+0x254>
     970:	b0800217 	ldw	r2,8(r22)
     974:	10c5c83a 	sub	r2,r2,r3
     978:	b0800215 	stw	r2,8(r22)
     97c:	103fee1e 	bne	r2,zero,938 <__sfvwrite_r+0x68>
     980:	0009883a 	mov	r4,zero
     984:	2005883a 	mov	r2,r4
     988:	dfc00a17 	ldw	ra,40(sp)
     98c:	df000917 	ldw	fp,36(sp)
     990:	ddc00817 	ldw	r23,32(sp)
     994:	dd800717 	ldw	r22,28(sp)
     998:	dd400617 	ldw	r21,24(sp)
     99c:	dd000517 	ldw	r20,20(sp)
     9a0:	dcc00417 	ldw	r19,16(sp)
     9a4:	dc800317 	ldw	r18,12(sp)
     9a8:	dc400217 	ldw	r17,8(sp)
     9ac:	dc000117 	ldw	r16,4(sp)
     9b0:	dec00b04 	addi	sp,sp,44
     9b4:	f800283a 	ret
     9b8:	0001d740 	call	1d74 <__swsetup_r>
     9bc:	1000e41e 	bne	r2,zero,d50 <__sfvwrite_r+0x480>
     9c0:	91c0030b 	ldhu	r7,12(r18)
     9c4:	b5400017 	ldw	r21,0(r22)
     9c8:	3880008c 	andi	r2,r7,2
     9cc:	103fd81e 	bne	r2,zero,930 <__sfvwrite_r+0x60>
     9d0:	3880004c 	andi	r2,r7,1
     9d4:	1005003a 	cmpeq	r2,r2,zero
     9d8:	10005726 	beq	r2,zero,b38 <__sfvwrite_r+0x268>
     9dc:	0029883a 	mov	r20,zero
     9e0:	002f883a 	mov	r23,zero
     9e4:	a0004226 	beq	r20,zero,af0 <__sfvwrite_r+0x220>
     9e8:	3880800c 	andi	r2,r7,512
     9ec:	94000217 	ldw	r16,8(r18)
     9f0:	10008b26 	beq	r2,zero,c20 <__sfvwrite_r+0x350>
     9f4:	800d883a 	mov	r6,r16
     9f8:	a400a536 	bltu	r20,r16,c90 <__sfvwrite_r+0x3c0>
     9fc:	3881200c 	andi	r2,r7,1152
     a00:	10002726 	beq	r2,zero,aa0 <__sfvwrite_r+0x1d0>
     a04:	90800517 	ldw	r2,20(r18)
     a08:	92000417 	ldw	r8,16(r18)
     a0c:	91400017 	ldw	r5,0(r18)
     a10:	1087883a 	add	r3,r2,r2
     a14:	1887883a 	add	r3,r3,r2
     a18:	1808d7fa 	srli	r4,r3,31
     a1c:	2a21c83a 	sub	r16,r5,r8
     a20:	80800044 	addi	r2,r16,1
     a24:	20c9883a 	add	r4,r4,r3
     a28:	2027d07a 	srai	r19,r4,1
     a2c:	a085883a 	add	r2,r20,r2
     a30:	980d883a 	mov	r6,r19
     a34:	9880022e 	bgeu	r19,r2,a40 <__sfvwrite_r+0x170>
     a38:	1027883a 	mov	r19,r2
     a3c:	100d883a 	mov	r6,r2
     a40:	3881000c 	andi	r2,r7,1024
     a44:	1000b826 	beq	r2,zero,d28 <__sfvwrite_r+0x458>
     a48:	300b883a 	mov	r5,r6
     a4c:	e009883a 	mov	r4,fp
     a50:	0000d6c0 	call	d6c <_malloc_r>
     a54:	10003126 	beq	r2,zero,b1c <__sfvwrite_r+0x24c>
     a58:	91400417 	ldw	r5,16(r18)
     a5c:	1009883a 	mov	r4,r2
     a60:	800d883a 	mov	r6,r16
     a64:	1023883a 	mov	r17,r2
     a68:	00015900 	call	1590 <memcpy>
     a6c:	90c0030b 	ldhu	r3,12(r18)
     a70:	00beffc4 	movi	r2,-1025
     a74:	1886703a 	and	r3,r3,r2
     a78:	18c02014 	ori	r3,r3,128
     a7c:	90c0030d 	sth	r3,12(r18)
     a80:	9c07c83a 	sub	r3,r19,r16
     a84:	8c05883a 	add	r2,r17,r16
     a88:	a00d883a 	mov	r6,r20
     a8c:	a021883a 	mov	r16,r20
     a90:	90800015 	stw	r2,0(r18)
     a94:	90c00215 	stw	r3,8(r18)
     a98:	94400415 	stw	r17,16(r18)
     a9c:	94c00515 	stw	r19,20(r18)
     aa0:	91000017 	ldw	r4,0(r18)
     aa4:	b80b883a 	mov	r5,r23
     aa8:	a023883a 	mov	r17,r20
     aac:	00016300 	call	1630 <memmove>
     ab0:	90c00217 	ldw	r3,8(r18)
     ab4:	90800017 	ldw	r2,0(r18)
     ab8:	a027883a 	mov	r19,r20
     abc:	1c07c83a 	sub	r3,r3,r16
     ac0:	1405883a 	add	r2,r2,r16
     ac4:	90c00215 	stw	r3,8(r18)
     ac8:	a021883a 	mov	r16,r20
     acc:	90800015 	stw	r2,0(r18)
     ad0:	b0800217 	ldw	r2,8(r22)
     ad4:	1405c83a 	sub	r2,r2,r16
     ad8:	b0800215 	stw	r2,8(r22)
     adc:	103fa826 	beq	r2,zero,980 <__sfvwrite_r+0xb0>
     ae0:	a469c83a 	sub	r20,r20,r17
     ae4:	91c0030b 	ldhu	r7,12(r18)
     ae8:	bcef883a 	add	r23,r23,r19
     aec:	a03fbe1e 	bne	r20,zero,9e8 <__sfvwrite_r+0x118>
     af0:	adc00017 	ldw	r23,0(r21)
     af4:	ad000117 	ldw	r20,4(r21)
     af8:	ad400204 	addi	r21,r21,8
     afc:	003fb906 	br	9e4 <__sfvwrite_r+0x114>
     b00:	ac400017 	ldw	r17,0(r21)
     b04:	ac000117 	ldw	r16,4(r21)
     b08:	ad400204 	addi	r21,r21,8
     b0c:	003f8a06 	br	938 <__sfvwrite_r+0x68>
     b10:	91400417 	ldw	r5,16(r18)
     b14:	e009883a 	mov	r4,fp
     b18:	00025000 	call	2500 <_free_r>
     b1c:	00800304 	movi	r2,12
     b20:	e0800015 	stw	r2,0(fp)
     b24:	9080030b 	ldhu	r2,12(r18)
     b28:	013fffc4 	movi	r4,-1
     b2c:	10801014 	ori	r2,r2,64
     b30:	9080030d 	sth	r2,12(r18)
     b34:	003f9306 	br	984 <__sfvwrite_r+0xb4>
     b38:	0027883a 	mov	r19,zero
     b3c:	002f883a 	mov	r23,zero
     b40:	d8000015 	stw	zero,0(sp)
     b44:	0029883a 	mov	r20,zero
     b48:	98001e26 	beq	r19,zero,bc4 <__sfvwrite_r+0x2f4>
     b4c:	d8c00017 	ldw	r3,0(sp)
     b50:	1804c03a 	cmpne	r2,r3,zero
     b54:	10005e26 	beq	r2,zero,cd0 <__sfvwrite_r+0x400>
     b58:	9821883a 	mov	r16,r19
     b5c:	a4c0012e 	bgeu	r20,r19,b64 <__sfvwrite_r+0x294>
     b60:	a021883a 	mov	r16,r20
     b64:	91000017 	ldw	r4,0(r18)
     b68:	90800417 	ldw	r2,16(r18)
     b6c:	91800217 	ldw	r6,8(r18)
     b70:	91c00517 	ldw	r7,20(r18)
     b74:	1100022e 	bgeu	r2,r4,b80 <__sfvwrite_r+0x2b0>
     b78:	31e3883a 	add	r17,r6,r7
     b7c:	8c001616 	blt	r17,r16,bd8 <__sfvwrite_r+0x308>
     b80:	81c03816 	blt	r16,r7,c64 <__sfvwrite_r+0x394>
     b84:	90c00917 	ldw	r3,36(r18)
     b88:	91400717 	ldw	r5,28(r18)
     b8c:	e009883a 	mov	r4,fp
     b90:	b80d883a 	mov	r6,r23
     b94:	183ee83a 	callr	r3
     b98:	1023883a 	mov	r17,r2
     b9c:	00bfe10e 	bge	zero,r2,b24 <__sfvwrite_r+0x254>
     ba0:	a469c83a 	sub	r20,r20,r17
     ba4:	a0001826 	beq	r20,zero,c08 <__sfvwrite_r+0x338>
     ba8:	b0800217 	ldw	r2,8(r22)
     bac:	1445c83a 	sub	r2,r2,r17
     bb0:	b0800215 	stw	r2,8(r22)
     bb4:	103f7226 	beq	r2,zero,980 <__sfvwrite_r+0xb0>
     bb8:	9c67c83a 	sub	r19,r19,r17
     bbc:	bc6f883a 	add	r23,r23,r17
     bc0:	983fe21e 	bne	r19,zero,b4c <__sfvwrite_r+0x27c>
     bc4:	adc00017 	ldw	r23,0(r21)
     bc8:	acc00117 	ldw	r19,4(r21)
     bcc:	ad400204 	addi	r21,r21,8
     bd0:	d8000015 	stw	zero,0(sp)
     bd4:	003fdc06 	br	b48 <__sfvwrite_r+0x278>
     bd8:	b80b883a 	mov	r5,r23
     bdc:	880d883a 	mov	r6,r17
     be0:	00016300 	call	1630 <memmove>
     be4:	90c00017 	ldw	r3,0(r18)
     be8:	e009883a 	mov	r4,fp
     bec:	900b883a 	mov	r5,r18
     bf0:	1c47883a 	add	r3,r3,r17
     bf4:	90c00015 	stw	r3,0(r18)
     bf8:	0001eb00 	call	1eb0 <_fflush_r>
     bfc:	103fc91e 	bne	r2,zero,b24 <__sfvwrite_r+0x254>
     c00:	a469c83a 	sub	r20,r20,r17
     c04:	a03fe81e 	bne	r20,zero,ba8 <__sfvwrite_r+0x2d8>
     c08:	e009883a 	mov	r4,fp
     c0c:	900b883a 	mov	r5,r18
     c10:	0001eb00 	call	1eb0 <_fflush_r>
     c14:	103fc31e 	bne	r2,zero,b24 <__sfvwrite_r+0x254>
     c18:	d8000015 	stw	zero,0(sp)
     c1c:	003fe206 	br	ba8 <__sfvwrite_r+0x2d8>
     c20:	91000017 	ldw	r4,0(r18)
     c24:	90800417 	ldw	r2,16(r18)
     c28:	1100022e 	bgeu	r2,r4,c34 <__sfvwrite_r+0x364>
     c2c:	8023883a 	mov	r17,r16
     c30:	85003136 	bltu	r16,r20,cf8 <__sfvwrite_r+0x428>
     c34:	91c00517 	ldw	r7,20(r18)
     c38:	a1c01836 	bltu	r20,r7,c9c <__sfvwrite_r+0x3cc>
     c3c:	90c00917 	ldw	r3,36(r18)
     c40:	91400717 	ldw	r5,28(r18)
     c44:	e009883a 	mov	r4,fp
     c48:	b80d883a 	mov	r6,r23
     c4c:	183ee83a 	callr	r3
     c50:	1021883a 	mov	r16,r2
     c54:	00bfb30e 	bge	zero,r2,b24 <__sfvwrite_r+0x254>
     c58:	1023883a 	mov	r17,r2
     c5c:	1027883a 	mov	r19,r2
     c60:	003f9b06 	br	ad0 <__sfvwrite_r+0x200>
     c64:	b80b883a 	mov	r5,r23
     c68:	800d883a 	mov	r6,r16
     c6c:	00016300 	call	1630 <memmove>
     c70:	90c00217 	ldw	r3,8(r18)
     c74:	90800017 	ldw	r2,0(r18)
     c78:	8023883a 	mov	r17,r16
     c7c:	1c07c83a 	sub	r3,r3,r16
     c80:	1405883a 	add	r2,r2,r16
     c84:	90c00215 	stw	r3,8(r18)
     c88:	90800015 	stw	r2,0(r18)
     c8c:	003fc406 	br	ba0 <__sfvwrite_r+0x2d0>
     c90:	a00d883a 	mov	r6,r20
     c94:	a021883a 	mov	r16,r20
     c98:	003f8106 	br	aa0 <__sfvwrite_r+0x1d0>
     c9c:	b80b883a 	mov	r5,r23
     ca0:	a00d883a 	mov	r6,r20
     ca4:	00016300 	call	1630 <memmove>
     ca8:	90c00217 	ldw	r3,8(r18)
     cac:	90800017 	ldw	r2,0(r18)
     cb0:	a021883a 	mov	r16,r20
     cb4:	1d07c83a 	sub	r3,r3,r20
     cb8:	1505883a 	add	r2,r2,r20
     cbc:	a023883a 	mov	r17,r20
     cc0:	a027883a 	mov	r19,r20
     cc4:	90c00215 	stw	r3,8(r18)
     cc8:	90800015 	stw	r2,0(r18)
     ccc:	003f8006 	br	ad0 <__sfvwrite_r+0x200>
     cd0:	b809883a 	mov	r4,r23
     cd4:	01400284 	movi	r5,10
     cd8:	980d883a 	mov	r6,r19
     cdc:	00014ac0 	call	14ac <memchr>
     ce0:	10001726 	beq	r2,zero,d40 <__sfvwrite_r+0x470>
     ce4:	15c5c83a 	sub	r2,r2,r23
     ce8:	15000044 	addi	r20,r2,1
     cec:	00800044 	movi	r2,1
     cf0:	d8800015 	stw	r2,0(sp)
     cf4:	003f9806 	br	b58 <__sfvwrite_r+0x288>
     cf8:	b80b883a 	mov	r5,r23
     cfc:	800d883a 	mov	r6,r16
     d00:	00016300 	call	1630 <memmove>
     d04:	90c00017 	ldw	r3,0(r18)
     d08:	e009883a 	mov	r4,fp
     d0c:	900b883a 	mov	r5,r18
     d10:	1c07883a 	add	r3,r3,r16
     d14:	90c00015 	stw	r3,0(r18)
     d18:	8027883a 	mov	r19,r16
     d1c:	0001eb00 	call	1eb0 <_fflush_r>
     d20:	103f6b26 	beq	r2,zero,ad0 <__sfvwrite_r+0x200>
     d24:	003f7f06 	br	b24 <__sfvwrite_r+0x254>
     d28:	400b883a 	mov	r5,r8
     d2c:	e009883a 	mov	r4,fp
     d30:	00017100 	call	1710 <_realloc_r>
     d34:	103f7626 	beq	r2,zero,b10 <__sfvwrite_r+0x240>
     d38:	1023883a 	mov	r17,r2
     d3c:	003f5006 	br	a80 <__sfvwrite_r+0x1b0>
     d40:	00c00044 	movi	r3,1
     d44:	9d000044 	addi	r20,r19,1
     d48:	d8c00015 	stw	r3,0(sp)
     d4c:	003f8206 	br	b58 <__sfvwrite_r+0x288>
     d50:	9080030b 	ldhu	r2,12(r18)
     d54:	00c00244 	movi	r3,9
     d58:	013fffc4 	movi	r4,-1
     d5c:	10801014 	ori	r2,r2,64
     d60:	9080030d 	sth	r2,12(r18)
     d64:	e0c00015 	stw	r3,0(fp)
     d68:	003f0606 	br	984 <__sfvwrite_r+0xb4>

00000d6c <_malloc_r>:
     d6c:	defff604 	addi	sp,sp,-40
     d70:	28c002c4 	addi	r3,r5,11
     d74:	00800584 	movi	r2,22
     d78:	dc800215 	stw	r18,8(sp)
     d7c:	dfc00915 	stw	ra,36(sp)
     d80:	df000815 	stw	fp,32(sp)
     d84:	ddc00715 	stw	r23,28(sp)
     d88:	dd800615 	stw	r22,24(sp)
     d8c:	dd400515 	stw	r21,20(sp)
     d90:	dd000415 	stw	r20,16(sp)
     d94:	dcc00315 	stw	r19,12(sp)
     d98:	dc400115 	stw	r17,4(sp)
     d9c:	dc000015 	stw	r16,0(sp)
     da0:	2025883a 	mov	r18,r4
     da4:	10c01236 	bltu	r2,r3,df0 <_malloc_r+0x84>
     da8:	04400404 	movi	r17,16
     dac:	8940142e 	bgeu	r17,r5,e00 <_malloc_r+0x94>
     db0:	00800304 	movi	r2,12
     db4:	0007883a 	mov	r3,zero
     db8:	90800015 	stw	r2,0(r18)
     dbc:	1805883a 	mov	r2,r3
     dc0:	dfc00917 	ldw	ra,36(sp)
     dc4:	df000817 	ldw	fp,32(sp)
     dc8:	ddc00717 	ldw	r23,28(sp)
     dcc:	dd800617 	ldw	r22,24(sp)
     dd0:	dd400517 	ldw	r21,20(sp)
     dd4:	dd000417 	ldw	r20,16(sp)
     dd8:	dcc00317 	ldw	r19,12(sp)
     ddc:	dc800217 	ldw	r18,8(sp)
     de0:	dc400117 	ldw	r17,4(sp)
     de4:	dc000017 	ldw	r16,0(sp)
     de8:	dec00a04 	addi	sp,sp,40
     dec:	f800283a 	ret
     df0:	00bffe04 	movi	r2,-8
     df4:	18a2703a 	and	r17,r3,r2
     df8:	883fed16 	blt	r17,zero,db0 <_malloc_r+0x44>
     dfc:	897fec36 	bltu	r17,r5,db0 <_malloc_r+0x44>
     e00:	9009883a 	mov	r4,r18
     e04:	00037800 	call	3780 <__malloc_lock>
     e08:	00807dc4 	movi	r2,503
     e0c:	14402b2e 	bgeu	r2,r17,ebc <_malloc_r+0x150>
     e10:	8806d27a 	srli	r3,r17,9
     e14:	18003f1e 	bne	r3,zero,f14 <_malloc_r+0x1a8>
     e18:	880cd0fa 	srli	r6,r17,3
     e1c:	300490fa 	slli	r2,r6,3
     e20:	02c00034 	movhi	r11,0
     e24:	5ada1904 	addi	r11,r11,26724
     e28:	12cb883a 	add	r5,r2,r11
     e2c:	2c000317 	ldw	r16,12(r5)
     e30:	580f883a 	mov	r7,r11
     e34:	2c00041e 	bne	r5,r16,e48 <_malloc_r+0xdc>
     e38:	00000a06 	br	e64 <_malloc_r+0xf8>
     e3c:	1800860e 	bge	r3,zero,1058 <_malloc_r+0x2ec>
     e40:	84000317 	ldw	r16,12(r16)
     e44:	2c000726 	beq	r5,r16,e64 <_malloc_r+0xf8>
     e48:	80800117 	ldw	r2,4(r16)
     e4c:	00ffff04 	movi	r3,-4
     e50:	10c8703a 	and	r4,r2,r3
     e54:	2447c83a 	sub	r3,r4,r17
     e58:	008003c4 	movi	r2,15
     e5c:	10fff70e 	bge	r2,r3,e3c <_malloc_r+0xd0>
     e60:	31bfffc4 	addi	r6,r6,-1
     e64:	32400044 	addi	r9,r6,1
     e68:	02800034 	movhi	r10,0
     e6c:	529a1b04 	addi	r10,r10,26732
     e70:	54000217 	ldw	r16,8(r10)
     e74:	8280a026 	beq	r16,r10,10f8 <_malloc_r+0x38c>
     e78:	80800117 	ldw	r2,4(r16)
     e7c:	00ffff04 	movi	r3,-4
     e80:	10ca703a 	and	r5,r2,r3
     e84:	2c4dc83a 	sub	r6,r5,r17
     e88:	008003c4 	movi	r2,15
     e8c:	11808316 	blt	r2,r6,109c <_malloc_r+0x330>
     e90:	52800315 	stw	r10,12(r10)
     e94:	52800215 	stw	r10,8(r10)
     e98:	30002916 	blt	r6,zero,f40 <_malloc_r+0x1d4>
     e9c:	8147883a 	add	r3,r16,r5
     ea0:	18800117 	ldw	r2,4(r3)
     ea4:	9009883a 	mov	r4,r18
     ea8:	10800054 	ori	r2,r2,1
     eac:	18800115 	stw	r2,4(r3)
     eb0:	00037a00 	call	37a0 <__malloc_unlock>
     eb4:	80c00204 	addi	r3,r16,8
     eb8:	003fc006 	br	dbc <_malloc_r+0x50>
     ebc:	02c00034 	movhi	r11,0
     ec0:	5ada1904 	addi	r11,r11,26724
     ec4:	8ac5883a 	add	r2,r17,r11
     ec8:	14000317 	ldw	r16,12(r2)
     ecc:	580f883a 	mov	r7,r11
     ed0:	8806d0fa 	srli	r3,r17,3
     ed4:	14006c26 	beq	r2,r16,1088 <_malloc_r+0x31c>
     ed8:	80c00117 	ldw	r3,4(r16)
     edc:	00bfff04 	movi	r2,-4
     ee0:	81800317 	ldw	r6,12(r16)
     ee4:	1886703a 	and	r3,r3,r2
     ee8:	80c7883a 	add	r3,r16,r3
     eec:	18800117 	ldw	r2,4(r3)
     ef0:	81400217 	ldw	r5,8(r16)
     ef4:	9009883a 	mov	r4,r18
     ef8:	10800054 	ori	r2,r2,1
     efc:	18800115 	stw	r2,4(r3)
     f00:	31400215 	stw	r5,8(r6)
     f04:	29800315 	stw	r6,12(r5)
     f08:	00037a00 	call	37a0 <__malloc_unlock>
     f0c:	80c00204 	addi	r3,r16,8
     f10:	003faa06 	br	dbc <_malloc_r+0x50>
     f14:	00800104 	movi	r2,4
     f18:	10c0052e 	bgeu	r2,r3,f30 <_malloc_r+0x1c4>
     f1c:	00800504 	movi	r2,20
     f20:	10c07836 	bltu	r2,r3,1104 <_malloc_r+0x398>
     f24:	198016c4 	addi	r6,r3,91
     f28:	300490fa 	slli	r2,r6,3
     f2c:	003fbc06 	br	e20 <_malloc_r+0xb4>
     f30:	8804d1ba 	srli	r2,r17,6
     f34:	11800e04 	addi	r6,r2,56
     f38:	300490fa 	slli	r2,r6,3
     f3c:	003fb806 	br	e20 <_malloc_r+0xb4>
     f40:	00807fc4 	movi	r2,511
     f44:	1140bb36 	bltu	r2,r5,1234 <_malloc_r+0x4c8>
     f48:	2806d0fa 	srli	r3,r5,3
     f4c:	573ffe04 	addi	fp,r10,-8
     f50:	00800044 	movi	r2,1
     f54:	180890fa 	slli	r4,r3,3
     f58:	1807d0ba 	srai	r3,r3,2
     f5c:	e1c00117 	ldw	r7,4(fp)
     f60:	5909883a 	add	r4,r11,r4
     f64:	21400217 	ldw	r5,8(r4)
     f68:	10c4983a 	sll	r2,r2,r3
     f6c:	81000315 	stw	r4,12(r16)
     f70:	81400215 	stw	r5,8(r16)
     f74:	388eb03a 	or	r7,r7,r2
     f78:	2c000315 	stw	r16,12(r5)
     f7c:	24000215 	stw	r16,8(r4)
     f80:	e1c00115 	stw	r7,4(fp)
     f84:	4807883a 	mov	r3,r9
     f88:	4800cd16 	blt	r9,zero,12c0 <_malloc_r+0x554>
     f8c:	1807d0ba 	srai	r3,r3,2
     f90:	00800044 	movi	r2,1
     f94:	10c8983a 	sll	r4,r2,r3
     f98:	39004436 	bltu	r7,r4,10ac <_malloc_r+0x340>
     f9c:	21c4703a 	and	r2,r4,r7
     fa0:	10000a1e 	bne	r2,zero,fcc <_malloc_r+0x260>
     fa4:	2109883a 	add	r4,r4,r4
     fa8:	00bfff04 	movi	r2,-4
     fac:	4884703a 	and	r2,r9,r2
     fb0:	3906703a 	and	r3,r7,r4
     fb4:	12400104 	addi	r9,r2,4
     fb8:	1800041e 	bne	r3,zero,fcc <_malloc_r+0x260>
     fbc:	2109883a 	add	r4,r4,r4
     fc0:	3904703a 	and	r2,r7,r4
     fc4:	4a400104 	addi	r9,r9,4
     fc8:	103ffc26 	beq	r2,zero,fbc <_malloc_r+0x250>
     fcc:	480490fa 	slli	r2,r9,3
     fd0:	4819883a 	mov	r12,r9
     fd4:	023fff04 	movi	r8,-4
     fd8:	589b883a 	add	r13,r11,r2
     fdc:	6807883a 	mov	r3,r13
     fe0:	014003c4 	movi	r5,15
     fe4:	1c000317 	ldw	r16,12(r3)
     fe8:	1c00041e 	bne	r3,r16,ffc <_malloc_r+0x290>
     fec:	0000a706 	br	128c <_malloc_r+0x520>
     ff0:	3000ab0e 	bge	r6,zero,12a0 <_malloc_r+0x534>
     ff4:	84000317 	ldw	r16,12(r16)
     ff8:	1c00a426 	beq	r3,r16,128c <_malloc_r+0x520>
     ffc:	80800117 	ldw	r2,4(r16)
    1000:	1204703a 	and	r2,r2,r8
    1004:	144dc83a 	sub	r6,r2,r17
    1008:	29bff90e 	bge	r5,r6,ff0 <_malloc_r+0x284>
    100c:	81000317 	ldw	r4,12(r16)
    1010:	80c00217 	ldw	r3,8(r16)
    1014:	89400054 	ori	r5,r17,1
    1018:	8445883a 	add	r2,r16,r17
    101c:	20c00215 	stw	r3,8(r4)
    1020:	19000315 	stw	r4,12(r3)
    1024:	81400115 	stw	r5,4(r16)
    1028:	1187883a 	add	r3,r2,r6
    102c:	31000054 	ori	r4,r6,1
    1030:	50800315 	stw	r2,12(r10)
    1034:	50800215 	stw	r2,8(r10)
    1038:	19800015 	stw	r6,0(r3)
    103c:	11000115 	stw	r4,4(r2)
    1040:	12800215 	stw	r10,8(r2)
    1044:	12800315 	stw	r10,12(r2)
    1048:	9009883a 	mov	r4,r18
    104c:	00037a00 	call	37a0 <__malloc_unlock>
    1050:	80c00204 	addi	r3,r16,8
    1054:	003f5906 	br	dbc <_malloc_r+0x50>
    1058:	8109883a 	add	r4,r16,r4
    105c:	20800117 	ldw	r2,4(r4)
    1060:	80c00217 	ldw	r3,8(r16)
    1064:	81400317 	ldw	r5,12(r16)
    1068:	10800054 	ori	r2,r2,1
    106c:	20800115 	stw	r2,4(r4)
    1070:	28c00215 	stw	r3,8(r5)
    1074:	19400315 	stw	r5,12(r3)
    1078:	9009883a 	mov	r4,r18
    107c:	00037a00 	call	37a0 <__malloc_unlock>
    1080:	80c00204 	addi	r3,r16,8
    1084:	003f4d06 	br	dbc <_malloc_r+0x50>
    1088:	80800204 	addi	r2,r16,8
    108c:	14000317 	ldw	r16,12(r2)
    1090:	143f911e 	bne	r2,r16,ed8 <_malloc_r+0x16c>
    1094:	1a400084 	addi	r9,r3,2
    1098:	003f7306 	br	e68 <_malloc_r+0xfc>
    109c:	88c00054 	ori	r3,r17,1
    10a0:	8445883a 	add	r2,r16,r17
    10a4:	80c00115 	stw	r3,4(r16)
    10a8:	003fdf06 	br	1028 <_malloc_r+0x2bc>
    10ac:	e4000217 	ldw	r16,8(fp)
    10b0:	00bfff04 	movi	r2,-4
    10b4:	80c00117 	ldw	r3,4(r16)
    10b8:	802d883a 	mov	r22,r16
    10bc:	18aa703a 	and	r21,r3,r2
    10c0:	ac401636 	bltu	r21,r17,111c <_malloc_r+0x3b0>
    10c4:	ac49c83a 	sub	r4,r21,r17
    10c8:	008003c4 	movi	r2,15
    10cc:	1100130e 	bge	r2,r4,111c <_malloc_r+0x3b0>
    10d0:	88800054 	ori	r2,r17,1
    10d4:	8447883a 	add	r3,r16,r17
    10d8:	80800115 	stw	r2,4(r16)
    10dc:	20800054 	ori	r2,r4,1
    10e0:	18800115 	stw	r2,4(r3)
    10e4:	e0c00215 	stw	r3,8(fp)
    10e8:	9009883a 	mov	r4,r18
    10ec:	00037a00 	call	37a0 <__malloc_unlock>
    10f0:	80c00204 	addi	r3,r16,8
    10f4:	003f3106 	br	dbc <_malloc_r+0x50>
    10f8:	39c00117 	ldw	r7,4(r7)
    10fc:	573ffe04 	addi	fp,r10,-8
    1100:	003fa006 	br	f84 <_malloc_r+0x218>
    1104:	00801504 	movi	r2,84
    1108:	10c06736 	bltu	r2,r3,12a8 <_malloc_r+0x53c>
    110c:	8804d33a 	srli	r2,r17,12
    1110:	11801b84 	addi	r6,r2,110
    1114:	300490fa 	slli	r2,r6,3
    1118:	003f4106 	br	e20 <_malloc_r+0xb4>
    111c:	d0a6fa17 	ldw	r2,-25624(gp)
    1120:	d0e00417 	ldw	r3,-32752(gp)
    1124:	053fffc4 	movi	r20,-1
    1128:	10800404 	addi	r2,r2,16
    112c:	88a7883a 	add	r19,r17,r2
    1130:	1d000326 	beq	r3,r20,1140 <_malloc_r+0x3d4>
    1134:	98c3ffc4 	addi	r3,r19,4095
    1138:	00bc0004 	movi	r2,-4096
    113c:	18a6703a 	and	r19,r3,r2
    1140:	9009883a 	mov	r4,r18
    1144:	980b883a 	mov	r5,r19
    1148:	0001d040 	call	1d04 <_sbrk_r>
    114c:	1009883a 	mov	r4,r2
    1150:	15000426 	beq	r2,r20,1164 <_malloc_r+0x3f8>
    1154:	854b883a 	add	r5,r16,r21
    1158:	1029883a 	mov	r20,r2
    115c:	11405a2e 	bgeu	r2,r5,12c8 <_malloc_r+0x55c>
    1160:	87000c26 	beq	r16,fp,1194 <_malloc_r+0x428>
    1164:	e4000217 	ldw	r16,8(fp)
    1168:	80c00117 	ldw	r3,4(r16)
    116c:	00bfff04 	movi	r2,-4
    1170:	1884703a 	and	r2,r3,r2
    1174:	14400336 	bltu	r2,r17,1184 <_malloc_r+0x418>
    1178:	1449c83a 	sub	r4,r2,r17
    117c:	008003c4 	movi	r2,15
    1180:	113fd316 	blt	r2,r4,10d0 <_malloc_r+0x364>
    1184:	9009883a 	mov	r4,r18
    1188:	00037a00 	call	37a0 <__malloc_unlock>
    118c:	0007883a 	mov	r3,zero
    1190:	003f0a06 	br	dbc <_malloc_r+0x50>
    1194:	05c00074 	movhi	r23,1
    1198:	bde6f904 	addi	r23,r23,-25628
    119c:	b8800017 	ldw	r2,0(r23)
    11a0:	988d883a 	add	r6,r19,r2
    11a4:	b9800015 	stw	r6,0(r23)
    11a8:	d0e00417 	ldw	r3,-32752(gp)
    11ac:	00bfffc4 	movi	r2,-1
    11b0:	18808e26 	beq	r3,r2,13ec <_malloc_r+0x680>
    11b4:	2145c83a 	sub	r2,r4,r5
    11b8:	3085883a 	add	r2,r6,r2
    11bc:	b8800015 	stw	r2,0(r23)
    11c0:	20c001cc 	andi	r3,r4,7
    11c4:	18005f1e 	bne	r3,zero,1344 <_malloc_r+0x5d8>
    11c8:	000b883a 	mov	r5,zero
    11cc:	a4c5883a 	add	r2,r20,r19
    11d0:	1083ffcc 	andi	r2,r2,4095
    11d4:	00c40004 	movi	r3,4096
    11d8:	1887c83a 	sub	r3,r3,r2
    11dc:	28e7883a 	add	r19,r5,r3
    11e0:	9009883a 	mov	r4,r18
    11e4:	980b883a 	mov	r5,r19
    11e8:	0001d040 	call	1d04 <_sbrk_r>
    11ec:	1007883a 	mov	r3,r2
    11f0:	00bfffc4 	movi	r2,-1
    11f4:	18807a26 	beq	r3,r2,13e0 <_malloc_r+0x674>
    11f8:	1d05c83a 	sub	r2,r3,r20
    11fc:	9885883a 	add	r2,r19,r2
    1200:	10c00054 	ori	r3,r2,1
    1204:	b8800017 	ldw	r2,0(r23)
    1208:	a021883a 	mov	r16,r20
    120c:	a0c00115 	stw	r3,4(r20)
    1210:	9885883a 	add	r2,r19,r2
    1214:	b8800015 	stw	r2,0(r23)
    1218:	e5000215 	stw	r20,8(fp)
    121c:	b7003626 	beq	r22,fp,12f8 <_malloc_r+0x58c>
    1220:	018003c4 	movi	r6,15
    1224:	35404b36 	bltu	r6,r21,1354 <_malloc_r+0x5e8>
    1228:	00800044 	movi	r2,1
    122c:	a0800115 	stw	r2,4(r20)
    1230:	003fcd06 	br	1168 <_malloc_r+0x3fc>
    1234:	2808d27a 	srli	r4,r5,9
    1238:	2000371e 	bne	r4,zero,1318 <_malloc_r+0x5ac>
    123c:	2808d0fa 	srli	r4,r5,3
    1240:	200690fa 	slli	r3,r4,3
    1244:	1ad1883a 	add	r8,r3,r11
    1248:	41800217 	ldw	r6,8(r8)
    124c:	41805b26 	beq	r8,r6,13bc <_malloc_r+0x650>
    1250:	30800117 	ldw	r2,4(r6)
    1254:	00ffff04 	movi	r3,-4
    1258:	10c4703a 	and	r2,r2,r3
    125c:	2880022e 	bgeu	r5,r2,1268 <_malloc_r+0x4fc>
    1260:	31800217 	ldw	r6,8(r6)
    1264:	41bffa1e 	bne	r8,r6,1250 <_malloc_r+0x4e4>
    1268:	32000317 	ldw	r8,12(r6)
    126c:	39c00117 	ldw	r7,4(r7)
    1270:	82000315 	stw	r8,12(r16)
    1274:	81800215 	stw	r6,8(r16)
    1278:	07000034 	movhi	fp,0
    127c:	e71a1904 	addi	fp,fp,26724
    1280:	34000315 	stw	r16,12(r6)
    1284:	44000215 	stw	r16,8(r8)
    1288:	003f3e06 	br	f84 <_malloc_r+0x218>
    128c:	63000044 	addi	r12,r12,1
    1290:	608000cc 	andi	r2,r12,3
    1294:	10005d26 	beq	r2,zero,140c <_malloc_r+0x6a0>
    1298:	18c00204 	addi	r3,r3,8
    129c:	003f5106 	br	fe4 <_malloc_r+0x278>
    12a0:	8089883a 	add	r4,r16,r2
    12a4:	003f6d06 	br	105c <_malloc_r+0x2f0>
    12a8:	00805504 	movi	r2,340
    12ac:	10c02036 	bltu	r2,r3,1330 <_malloc_r+0x5c4>
    12b0:	8804d3fa 	srli	r2,r17,15
    12b4:	11801dc4 	addi	r6,r2,119
    12b8:	300490fa 	slli	r2,r6,3
    12bc:	003ed806 	br	e20 <_malloc_r+0xb4>
    12c0:	48c000c4 	addi	r3,r9,3
    12c4:	003f3106 	br	f8c <_malloc_r+0x220>
    12c8:	05c00074 	movhi	r23,1
    12cc:	bde6f904 	addi	r23,r23,-25628
    12d0:	b8800017 	ldw	r2,0(r23)
    12d4:	988d883a 	add	r6,r19,r2
    12d8:	b9800015 	stw	r6,0(r23)
    12dc:	293fb21e 	bne	r5,r4,11a8 <_malloc_r+0x43c>
    12e0:	2083ffcc 	andi	r2,r4,4095
    12e4:	103fb01e 	bne	r2,zero,11a8 <_malloc_r+0x43c>
    12e8:	e4000217 	ldw	r16,8(fp)
    12ec:	9d45883a 	add	r2,r19,r21
    12f0:	10800054 	ori	r2,r2,1
    12f4:	80800115 	stw	r2,4(r16)
    12f8:	b8c00017 	ldw	r3,0(r23)
    12fc:	d0a6fb17 	ldw	r2,-25620(gp)
    1300:	10c0012e 	bgeu	r2,r3,1308 <_malloc_r+0x59c>
    1304:	d0e6fb15 	stw	r3,-25620(gp)
    1308:	d0a6fc17 	ldw	r2,-25616(gp)
    130c:	10ff962e 	bgeu	r2,r3,1168 <_malloc_r+0x3fc>
    1310:	d0e6fc15 	stw	r3,-25616(gp)
    1314:	003f9406 	br	1168 <_malloc_r+0x3fc>
    1318:	00800104 	movi	r2,4
    131c:	11001e36 	bltu	r2,r4,1398 <_malloc_r+0x62c>
    1320:	2804d1ba 	srli	r2,r5,6
    1324:	11000e04 	addi	r4,r2,56
    1328:	200690fa 	slli	r3,r4,3
    132c:	003fc506 	br	1244 <_malloc_r+0x4d8>
    1330:	00815504 	movi	r2,1364
    1334:	10c01d2e 	bgeu	r2,r3,13ac <_malloc_r+0x640>
    1338:	01801f84 	movi	r6,126
    133c:	0080fc04 	movi	r2,1008
    1340:	003eb706 	br	e20 <_malloc_r+0xb4>
    1344:	00800204 	movi	r2,8
    1348:	10cbc83a 	sub	r5,r2,r3
    134c:	2169883a 	add	r20,r4,r5
    1350:	003f9e06 	br	11cc <_malloc_r+0x460>
    1354:	00bffe04 	movi	r2,-8
    1358:	a93ffd04 	addi	r4,r21,-12
    135c:	2088703a 	and	r4,r4,r2
    1360:	b10b883a 	add	r5,r22,r4
    1364:	00c00144 	movi	r3,5
    1368:	28c00215 	stw	r3,8(r5)
    136c:	28c00115 	stw	r3,4(r5)
    1370:	b0800117 	ldw	r2,4(r22)
    1374:	1080004c 	andi	r2,r2,1
    1378:	2084b03a 	or	r2,r4,r2
    137c:	b0800115 	stw	r2,4(r22)
    1380:	313fdd2e 	bgeu	r6,r4,12f8 <_malloc_r+0x58c>
    1384:	b1400204 	addi	r5,r22,8
    1388:	9009883a 	mov	r4,r18
    138c:	00025000 	call	2500 <_free_r>
    1390:	e4000217 	ldw	r16,8(fp)
    1394:	003fd806 	br	12f8 <_malloc_r+0x58c>
    1398:	00800504 	movi	r2,20
    139c:	11001536 	bltu	r2,r4,13f4 <_malloc_r+0x688>
    13a0:	210016c4 	addi	r4,r4,91
    13a4:	200690fa 	slli	r3,r4,3
    13a8:	003fa606 	br	1244 <_malloc_r+0x4d8>
    13ac:	8804d4ba 	srli	r2,r17,18
    13b0:	11801f04 	addi	r6,r2,124
    13b4:	300490fa 	slli	r2,r6,3
    13b8:	003e9906 	br	e20 <_malloc_r+0xb4>
    13bc:	2009d0ba 	srai	r4,r4,2
    13c0:	01400034 	movhi	r5,0
    13c4:	295a1904 	addi	r5,r5,26724
    13c8:	00c00044 	movi	r3,1
    13cc:	28800117 	ldw	r2,4(r5)
    13d0:	1906983a 	sll	r3,r3,r4
    13d4:	10c4b03a 	or	r2,r2,r3
    13d8:	28800115 	stw	r2,4(r5)
    13dc:	003fa306 	br	126c <_malloc_r+0x500>
    13e0:	0027883a 	mov	r19,zero
    13e4:	00c00044 	movi	r3,1
    13e8:	003f8606 	br	1204 <_malloc_r+0x498>
    13ec:	d1200415 	stw	r4,-32752(gp)
    13f0:	003f7306 	br	11c0 <_malloc_r+0x454>
    13f4:	00801504 	movi	r2,84
    13f8:	11001936 	bltu	r2,r4,1460 <_malloc_r+0x6f4>
    13fc:	2804d33a 	srli	r2,r5,12
    1400:	11001b84 	addi	r4,r2,110
    1404:	200690fa 	slli	r3,r4,3
    1408:	003f8e06 	br	1244 <_malloc_r+0x4d8>
    140c:	480b883a 	mov	r5,r9
    1410:	6807883a 	mov	r3,r13
    1414:	288000cc 	andi	r2,r5,3
    1418:	18fffe04 	addi	r3,r3,-8
    141c:	297fffc4 	addi	r5,r5,-1
    1420:	10001526 	beq	r2,zero,1478 <_malloc_r+0x70c>
    1424:	18800217 	ldw	r2,8(r3)
    1428:	10fffa26 	beq	r2,r3,1414 <_malloc_r+0x6a8>
    142c:	2109883a 	add	r4,r4,r4
    1430:	393f1e36 	bltu	r7,r4,10ac <_malloc_r+0x340>
    1434:	203f1d26 	beq	r4,zero,10ac <_malloc_r+0x340>
    1438:	21c4703a 	and	r2,r4,r7
    143c:	10000226 	beq	r2,zero,1448 <_malloc_r+0x6dc>
    1440:	6013883a 	mov	r9,r12
    1444:	003ee106 	br	fcc <_malloc_r+0x260>
    1448:	2109883a 	add	r4,r4,r4
    144c:	3904703a 	and	r2,r7,r4
    1450:	63000104 	addi	r12,r12,4
    1454:	103ffc26 	beq	r2,zero,1448 <_malloc_r+0x6dc>
    1458:	6013883a 	mov	r9,r12
    145c:	003edb06 	br	fcc <_malloc_r+0x260>
    1460:	00805504 	movi	r2,340
    1464:	11000836 	bltu	r2,r4,1488 <_malloc_r+0x71c>
    1468:	2804d3fa 	srli	r2,r5,15
    146c:	11001dc4 	addi	r4,r2,119
    1470:	200690fa 	slli	r3,r4,3
    1474:	003f7306 	br	1244 <_malloc_r+0x4d8>
    1478:	0104303a 	nor	r2,zero,r4
    147c:	388e703a 	and	r7,r7,r2
    1480:	e1c00115 	stw	r7,4(fp)
    1484:	003fe906 	br	142c <_malloc_r+0x6c0>
    1488:	00815504 	movi	r2,1364
    148c:	1100032e 	bgeu	r2,r4,149c <_malloc_r+0x730>
    1490:	01001f84 	movi	r4,126
    1494:	00c0fc04 	movi	r3,1008
    1498:	003f6a06 	br	1244 <_malloc_r+0x4d8>
    149c:	2804d4ba 	srli	r2,r5,18
    14a0:	11001f04 	addi	r4,r2,124
    14a4:	200690fa 	slli	r3,r4,3
    14a8:	003f6606 	br	1244 <_malloc_r+0x4d8>

000014ac <memchr>:
    14ac:	008000c4 	movi	r2,3
    14b0:	29403fcc 	andi	r5,r5,255
    14b4:	2007883a 	mov	r3,r4
    14b8:	1180022e 	bgeu	r2,r6,14c4 <memchr+0x18>
    14bc:	2084703a 	and	r2,r4,r2
    14c0:	10000b26 	beq	r2,zero,14f0 <memchr+0x44>
    14c4:	313fffc4 	addi	r4,r6,-1
    14c8:	3000051e 	bne	r6,zero,14e0 <memchr+0x34>
    14cc:	00002c06 	br	1580 <memchr+0xd4>
    14d0:	213fffc4 	addi	r4,r4,-1
    14d4:	00bfffc4 	movi	r2,-1
    14d8:	18c00044 	addi	r3,r3,1
    14dc:	20802826 	beq	r4,r2,1580 <memchr+0xd4>
    14e0:	18800003 	ldbu	r2,0(r3)
    14e4:	28bffa1e 	bne	r5,r2,14d0 <memchr+0x24>
    14e8:	1805883a 	mov	r2,r3
    14ec:	f800283a 	ret
    14f0:	0011883a 	mov	r8,zero
    14f4:	0007883a 	mov	r3,zero
    14f8:	01c00104 	movi	r7,4
    14fc:	4004923a 	slli	r2,r8,8
    1500:	18c00044 	addi	r3,r3,1
    1504:	1151883a 	add	r8,r2,r5
    1508:	19fffc1e 	bne	r3,r7,14fc <memchr+0x50>
    150c:	02bfbff4 	movhi	r10,65279
    1510:	52bfbfc4 	addi	r10,r10,-257
    1514:	02602074 	movhi	r9,32897
    1518:	4a602004 	addi	r9,r9,-32640
    151c:	02c000c4 	movi	r11,3
    1520:	20800017 	ldw	r2,0(r4)
    1524:	31bfff04 	addi	r6,r6,-4
    1528:	200f883a 	mov	r7,r4
    152c:	1204f03a 	xor	r2,r2,r8
    1530:	1287883a 	add	r3,r2,r10
    1534:	1a46703a 	and	r3,r3,r9
    1538:	0084303a 	nor	r2,zero,r2
    153c:	10c4703a 	and	r2,r2,r3
    1540:	10000b26 	beq	r2,zero,1570 <memchr+0xc4>
    1544:	20800003 	ldbu	r2,0(r4)
    1548:	28800f26 	beq	r5,r2,1588 <memchr+0xdc>
    154c:	20800043 	ldbu	r2,1(r4)
    1550:	21c00044 	addi	r7,r4,1
    1554:	28800c26 	beq	r5,r2,1588 <memchr+0xdc>
    1558:	20800083 	ldbu	r2,2(r4)
    155c:	21c00084 	addi	r7,r4,2
    1560:	28800926 	beq	r5,r2,1588 <memchr+0xdc>
    1564:	208000c3 	ldbu	r2,3(r4)
    1568:	21c000c4 	addi	r7,r4,3
    156c:	28800626 	beq	r5,r2,1588 <memchr+0xdc>
    1570:	21000104 	addi	r4,r4,4
    1574:	59bfea36 	bltu	r11,r6,1520 <memchr+0x74>
    1578:	2007883a 	mov	r3,r4
    157c:	003fd106 	br	14c4 <memchr+0x18>
    1580:	0005883a 	mov	r2,zero
    1584:	f800283a 	ret
    1588:	3805883a 	mov	r2,r7
    158c:	f800283a 	ret

00001590 <memcpy>:
    1590:	01c003c4 	movi	r7,15
    1594:	2007883a 	mov	r3,r4
    1598:	3980032e 	bgeu	r7,r6,15a8 <memcpy+0x18>
    159c:	2904b03a 	or	r2,r5,r4
    15a0:	108000cc 	andi	r2,r2,3
    15a4:	10000926 	beq	r2,zero,15cc <memcpy+0x3c>
    15a8:	30000626 	beq	r6,zero,15c4 <memcpy+0x34>
    15ac:	30cd883a 	add	r6,r6,r3
    15b0:	28800003 	ldbu	r2,0(r5)
    15b4:	29400044 	addi	r5,r5,1
    15b8:	18800005 	stb	r2,0(r3)
    15bc:	18c00044 	addi	r3,r3,1
    15c0:	30fffb1e 	bne	r6,r3,15b0 <memcpy+0x20>
    15c4:	2005883a 	mov	r2,r4
    15c8:	f800283a 	ret
    15cc:	3811883a 	mov	r8,r7
    15d0:	200f883a 	mov	r7,r4
    15d4:	28c00017 	ldw	r3,0(r5)
    15d8:	31bffc04 	addi	r6,r6,-16
    15dc:	38c00015 	stw	r3,0(r7)
    15e0:	28800117 	ldw	r2,4(r5)
    15e4:	38800115 	stw	r2,4(r7)
    15e8:	28c00217 	ldw	r3,8(r5)
    15ec:	38c00215 	stw	r3,8(r7)
    15f0:	28800317 	ldw	r2,12(r5)
    15f4:	29400404 	addi	r5,r5,16
    15f8:	38800315 	stw	r2,12(r7)
    15fc:	39c00404 	addi	r7,r7,16
    1600:	41bff436 	bltu	r8,r6,15d4 <memcpy+0x44>
    1604:	008000c4 	movi	r2,3
    1608:	1180072e 	bgeu	r2,r6,1628 <memcpy+0x98>
    160c:	1007883a 	mov	r3,r2
    1610:	28800017 	ldw	r2,0(r5)
    1614:	31bfff04 	addi	r6,r6,-4
    1618:	29400104 	addi	r5,r5,4
    161c:	38800015 	stw	r2,0(r7)
    1620:	39c00104 	addi	r7,r7,4
    1624:	19bffa36 	bltu	r3,r6,1610 <memcpy+0x80>
    1628:	3807883a 	mov	r3,r7
    162c:	003fde06 	br	15a8 <memcpy+0x18>

00001630 <memmove>:
    1630:	2807883a 	mov	r3,r5
    1634:	2011883a 	mov	r8,r4
    1638:	29000c2e 	bgeu	r5,r4,166c <memmove+0x3c>
    163c:	298f883a 	add	r7,r5,r6
    1640:	21c00a2e 	bgeu	r4,r7,166c <memmove+0x3c>
    1644:	30000726 	beq	r6,zero,1664 <memmove+0x34>
    1648:	2187883a 	add	r3,r4,r6
    164c:	198dc83a 	sub	r6,r3,r6
    1650:	39ffffc4 	addi	r7,r7,-1
    1654:	38800003 	ldbu	r2,0(r7)
    1658:	18ffffc4 	addi	r3,r3,-1
    165c:	18800005 	stb	r2,0(r3)
    1660:	19bffb1e 	bne	r3,r6,1650 <memmove+0x20>
    1664:	2005883a 	mov	r2,r4
    1668:	f800283a 	ret
    166c:	01c003c4 	movi	r7,15
    1670:	39800a36 	bltu	r7,r6,169c <memmove+0x6c>
    1674:	303ffb26 	beq	r6,zero,1664 <memmove+0x34>
    1678:	400f883a 	mov	r7,r8
    167c:	320d883a 	add	r6,r6,r8
    1680:	28800003 	ldbu	r2,0(r5)
    1684:	29400044 	addi	r5,r5,1
    1688:	38800005 	stb	r2,0(r7)
    168c:	39c00044 	addi	r7,r7,1
    1690:	39bffb1e 	bne	r7,r6,1680 <memmove+0x50>
    1694:	2005883a 	mov	r2,r4
    1698:	f800283a 	ret
    169c:	1904b03a 	or	r2,r3,r4
    16a0:	108000cc 	andi	r2,r2,3
    16a4:	103ff31e 	bne	r2,zero,1674 <memmove+0x44>
    16a8:	3811883a 	mov	r8,r7
    16ac:	180b883a 	mov	r5,r3
    16b0:	200f883a 	mov	r7,r4
    16b4:	28c00017 	ldw	r3,0(r5)
    16b8:	31bffc04 	addi	r6,r6,-16
    16bc:	38c00015 	stw	r3,0(r7)
    16c0:	28800117 	ldw	r2,4(r5)
    16c4:	38800115 	stw	r2,4(r7)
    16c8:	28c00217 	ldw	r3,8(r5)
    16cc:	38c00215 	stw	r3,8(r7)
    16d0:	28800317 	ldw	r2,12(r5)
    16d4:	29400404 	addi	r5,r5,16
    16d8:	38800315 	stw	r2,12(r7)
    16dc:	39c00404 	addi	r7,r7,16
    16e0:	41bff436 	bltu	r8,r6,16b4 <memmove+0x84>
    16e4:	008000c4 	movi	r2,3
    16e8:	1180072e 	bgeu	r2,r6,1708 <memmove+0xd8>
    16ec:	1007883a 	mov	r3,r2
    16f0:	28800017 	ldw	r2,0(r5)
    16f4:	31bfff04 	addi	r6,r6,-4
    16f8:	29400104 	addi	r5,r5,4
    16fc:	38800015 	stw	r2,0(r7)
    1700:	39c00104 	addi	r7,r7,4
    1704:	19bffa36 	bltu	r3,r6,16f0 <memmove+0xc0>
    1708:	3811883a 	mov	r8,r7
    170c:	003fd906 	br	1674 <memmove+0x44>

00001710 <_realloc_r>:
    1710:	defff404 	addi	sp,sp,-48
    1714:	dd800815 	stw	r22,32(sp)
    1718:	dc800415 	stw	r18,16(sp)
    171c:	dc400315 	stw	r17,12(sp)
    1720:	dfc00b15 	stw	ra,44(sp)
    1724:	df000a15 	stw	fp,40(sp)
    1728:	ddc00915 	stw	r23,36(sp)
    172c:	dd400715 	stw	r21,28(sp)
    1730:	dd000615 	stw	r20,24(sp)
    1734:	dcc00515 	stw	r19,20(sp)
    1738:	dc000215 	stw	r16,8(sp)
    173c:	2825883a 	mov	r18,r5
    1740:	3023883a 	mov	r17,r6
    1744:	202d883a 	mov	r22,r4
    1748:	2800c926 	beq	r5,zero,1a70 <_realloc_r+0x360>
    174c:	00037800 	call	3780 <__malloc_lock>
    1750:	943ffe04 	addi	r16,r18,-8
    1754:	88c002c4 	addi	r3,r17,11
    1758:	00800584 	movi	r2,22
    175c:	82000117 	ldw	r8,4(r16)
    1760:	10c01b2e 	bgeu	r2,r3,17d0 <_realloc_r+0xc0>
    1764:	00bffe04 	movi	r2,-8
    1768:	188e703a 	and	r7,r3,r2
    176c:	3839883a 	mov	fp,r7
    1770:	38001a16 	blt	r7,zero,17dc <_realloc_r+0xcc>
    1774:	e4401936 	bltu	fp,r17,17dc <_realloc_r+0xcc>
    1778:	013fff04 	movi	r4,-4
    177c:	4126703a 	and	r19,r8,r4
    1780:	99c02616 	blt	r19,r7,181c <_realloc_r+0x10c>
    1784:	802b883a 	mov	r21,r16
    1788:	9829883a 	mov	r20,r19
    178c:	84000204 	addi	r16,r16,8
    1790:	a80f883a 	mov	r7,r21
    1794:	a70dc83a 	sub	r6,r20,fp
    1798:	008003c4 	movi	r2,15
    179c:	1180c136 	bltu	r2,r6,1aa4 <_realloc_r+0x394>
    17a0:	38800117 	ldw	r2,4(r7)
    17a4:	a549883a 	add	r4,r20,r21
    17a8:	1080004c 	andi	r2,r2,1
    17ac:	a084b03a 	or	r2,r20,r2
    17b0:	38800115 	stw	r2,4(r7)
    17b4:	20c00117 	ldw	r3,4(r4)
    17b8:	18c00054 	ori	r3,r3,1
    17bc:	20c00115 	stw	r3,4(r4)
    17c0:	b009883a 	mov	r4,r22
    17c4:	00037a00 	call	37a0 <__malloc_unlock>
    17c8:	8023883a 	mov	r17,r16
    17cc:	00000606 	br	17e8 <_realloc_r+0xd8>
    17d0:	01c00404 	movi	r7,16
    17d4:	3839883a 	mov	fp,r7
    17d8:	e47fe72e 	bgeu	fp,r17,1778 <_realloc_r+0x68>
    17dc:	00800304 	movi	r2,12
    17e0:	0023883a 	mov	r17,zero
    17e4:	b0800015 	stw	r2,0(r22)
    17e8:	8805883a 	mov	r2,r17
    17ec:	dfc00b17 	ldw	ra,44(sp)
    17f0:	df000a17 	ldw	fp,40(sp)
    17f4:	ddc00917 	ldw	r23,36(sp)
    17f8:	dd800817 	ldw	r22,32(sp)
    17fc:	dd400717 	ldw	r21,28(sp)
    1800:	dd000617 	ldw	r20,24(sp)
    1804:	dcc00517 	ldw	r19,20(sp)
    1808:	dc800417 	ldw	r18,16(sp)
    180c:	dc400317 	ldw	r17,12(sp)
    1810:	dc000217 	ldw	r16,8(sp)
    1814:	dec00c04 	addi	sp,sp,48
    1818:	f800283a 	ret
    181c:	00800034 	movhi	r2,0
    1820:	109a1904 	addi	r2,r2,26724
    1824:	12400217 	ldw	r9,8(r2)
    1828:	84cd883a 	add	r6,r16,r19
    182c:	802b883a 	mov	r21,r16
    1830:	3240b926 	beq	r6,r9,1b18 <_realloc_r+0x408>
    1834:	31400117 	ldw	r5,4(r6)
    1838:	00bfff84 	movi	r2,-2
    183c:	2884703a 	and	r2,r5,r2
    1840:	1185883a 	add	r2,r2,r6
    1844:	10c00117 	ldw	r3,4(r2)
    1848:	18c0004c 	andi	r3,r3,1
    184c:	1807003a 	cmpeq	r3,r3,zero
    1850:	1800a326 	beq	r3,zero,1ae0 <_realloc_r+0x3d0>
    1854:	2908703a 	and	r4,r5,r4
    1858:	9929883a 	add	r20,r19,r4
    185c:	a1c0a30e 	bge	r20,r7,1aec <_realloc_r+0x3dc>
    1860:	4080004c 	andi	r2,r8,1
    1864:	1000551e 	bne	r2,zero,19bc <_realloc_r+0x2ac>
    1868:	80800017 	ldw	r2,0(r16)
    186c:	80afc83a 	sub	r23,r16,r2
    1870:	b8c00117 	ldw	r3,4(r23)
    1874:	00bfff04 	movi	r2,-4
    1878:	1884703a 	and	r2,r3,r2
    187c:	30002e26 	beq	r6,zero,1938 <_realloc_r+0x228>
    1880:	3240b926 	beq	r6,r9,1b68 <_realloc_r+0x458>
    1884:	98a9883a 	add	r20,r19,r2
    1888:	2509883a 	add	r4,r4,r20
    188c:	d9000015 	stw	r4,0(sp)
    1890:	21c02a16 	blt	r4,r7,193c <_realloc_r+0x22c>
    1894:	30800317 	ldw	r2,12(r6)
    1898:	30c00217 	ldw	r3,8(r6)
    189c:	01400904 	movi	r5,36
    18a0:	99bfff04 	addi	r6,r19,-4
    18a4:	18800315 	stw	r2,12(r3)
    18a8:	10c00215 	stw	r3,8(r2)
    18ac:	b9000317 	ldw	r4,12(r23)
    18b0:	b8800217 	ldw	r2,8(r23)
    18b4:	b82b883a 	mov	r21,r23
    18b8:	bc000204 	addi	r16,r23,8
    18bc:	20800215 	stw	r2,8(r4)
    18c0:	11000315 	stw	r4,12(r2)
    18c4:	2980e436 	bltu	r5,r6,1c58 <_realloc_r+0x548>
    18c8:	008004c4 	movi	r2,19
    18cc:	9009883a 	mov	r4,r18
    18d0:	8011883a 	mov	r8,r16
    18d4:	11800f2e 	bgeu	r2,r6,1914 <_realloc_r+0x204>
    18d8:	90800017 	ldw	r2,0(r18)
    18dc:	ba000404 	addi	r8,r23,16
    18e0:	91000204 	addi	r4,r18,8
    18e4:	b8800215 	stw	r2,8(r23)
    18e8:	90c00117 	ldw	r3,4(r18)
    18ec:	008006c4 	movi	r2,27
    18f0:	b8c00315 	stw	r3,12(r23)
    18f4:	1180072e 	bgeu	r2,r6,1914 <_realloc_r+0x204>
    18f8:	90c00217 	ldw	r3,8(r18)
    18fc:	ba000604 	addi	r8,r23,24
    1900:	91000404 	addi	r4,r18,16
    1904:	b8c00415 	stw	r3,16(r23)
    1908:	90800317 	ldw	r2,12(r18)
    190c:	b8800515 	stw	r2,20(r23)
    1910:	3140e726 	beq	r6,r5,1cb0 <_realloc_r+0x5a0>
    1914:	20800017 	ldw	r2,0(r4)
    1918:	dd000017 	ldw	r20,0(sp)
    191c:	b80f883a 	mov	r7,r23
    1920:	40800015 	stw	r2,0(r8)
    1924:	20c00117 	ldw	r3,4(r4)
    1928:	40c00115 	stw	r3,4(r8)
    192c:	20800217 	ldw	r2,8(r4)
    1930:	40800215 	stw	r2,8(r8)
    1934:	003f9706 	br	1794 <_realloc_r+0x84>
    1938:	98a9883a 	add	r20,r19,r2
    193c:	a1c01f16 	blt	r20,r7,19bc <_realloc_r+0x2ac>
    1940:	b8c00317 	ldw	r3,12(r23)
    1944:	b8800217 	ldw	r2,8(r23)
    1948:	99bfff04 	addi	r6,r19,-4
    194c:	01400904 	movi	r5,36
    1950:	b82b883a 	mov	r21,r23
    1954:	18800215 	stw	r2,8(r3)
    1958:	10c00315 	stw	r3,12(r2)
    195c:	bc000204 	addi	r16,r23,8
    1960:	2980c336 	bltu	r5,r6,1c70 <_realloc_r+0x560>
    1964:	008004c4 	movi	r2,19
    1968:	9009883a 	mov	r4,r18
    196c:	8011883a 	mov	r8,r16
    1970:	11800f2e 	bgeu	r2,r6,19b0 <_realloc_r+0x2a0>
    1974:	90800017 	ldw	r2,0(r18)
    1978:	ba000404 	addi	r8,r23,16
    197c:	91000204 	addi	r4,r18,8
    1980:	b8800215 	stw	r2,8(r23)
    1984:	90c00117 	ldw	r3,4(r18)
    1988:	008006c4 	movi	r2,27
    198c:	b8c00315 	stw	r3,12(r23)
    1990:	1180072e 	bgeu	r2,r6,19b0 <_realloc_r+0x2a0>
    1994:	90c00217 	ldw	r3,8(r18)
    1998:	ba000604 	addi	r8,r23,24
    199c:	91000404 	addi	r4,r18,16
    19a0:	b8c00415 	stw	r3,16(r23)
    19a4:	90800317 	ldw	r2,12(r18)
    19a8:	b8800515 	stw	r2,20(r23)
    19ac:	3140c726 	beq	r6,r5,1ccc <_realloc_r+0x5bc>
    19b0:	20800017 	ldw	r2,0(r4)
    19b4:	b80f883a 	mov	r7,r23
    19b8:	003fd906 	br	1920 <_realloc_r+0x210>
    19bc:	880b883a 	mov	r5,r17
    19c0:	b009883a 	mov	r4,r22
    19c4:	0000d6c0 	call	d6c <_malloc_r>
    19c8:	1023883a 	mov	r17,r2
    19cc:	10002526 	beq	r2,zero,1a64 <_realloc_r+0x354>
    19d0:	80800117 	ldw	r2,4(r16)
    19d4:	00ffff84 	movi	r3,-2
    19d8:	893ffe04 	addi	r4,r17,-8
    19dc:	10c4703a 	and	r2,r2,r3
    19e0:	8085883a 	add	r2,r16,r2
    19e4:	20809526 	beq	r4,r2,1c3c <_realloc_r+0x52c>
    19e8:	99bfff04 	addi	r6,r19,-4
    19ec:	01c00904 	movi	r7,36
    19f0:	39804536 	bltu	r7,r6,1b08 <_realloc_r+0x3f8>
    19f4:	008004c4 	movi	r2,19
    19f8:	9009883a 	mov	r4,r18
    19fc:	880b883a 	mov	r5,r17
    1a00:	11800f2e 	bgeu	r2,r6,1a40 <_realloc_r+0x330>
    1a04:	90800017 	ldw	r2,0(r18)
    1a08:	89400204 	addi	r5,r17,8
    1a0c:	91000204 	addi	r4,r18,8
    1a10:	88800015 	stw	r2,0(r17)
    1a14:	90c00117 	ldw	r3,4(r18)
    1a18:	008006c4 	movi	r2,27
    1a1c:	88c00115 	stw	r3,4(r17)
    1a20:	1180072e 	bgeu	r2,r6,1a40 <_realloc_r+0x330>
    1a24:	90c00217 	ldw	r3,8(r18)
    1a28:	89400404 	addi	r5,r17,16
    1a2c:	91000404 	addi	r4,r18,16
    1a30:	88c00215 	stw	r3,8(r17)
    1a34:	90800317 	ldw	r2,12(r18)
    1a38:	88800315 	stw	r2,12(r17)
    1a3c:	31c09126 	beq	r6,r7,1c84 <_realloc_r+0x574>
    1a40:	20800017 	ldw	r2,0(r4)
    1a44:	28800015 	stw	r2,0(r5)
    1a48:	20c00117 	ldw	r3,4(r4)
    1a4c:	28c00115 	stw	r3,4(r5)
    1a50:	20800217 	ldw	r2,8(r4)
    1a54:	28800215 	stw	r2,8(r5)
    1a58:	900b883a 	mov	r5,r18
    1a5c:	b009883a 	mov	r4,r22
    1a60:	00025000 	call	2500 <_free_r>
    1a64:	b009883a 	mov	r4,r22
    1a68:	00037a00 	call	37a0 <__malloc_unlock>
    1a6c:	003f5e06 	br	17e8 <_realloc_r+0xd8>
    1a70:	300b883a 	mov	r5,r6
    1a74:	dfc00b17 	ldw	ra,44(sp)
    1a78:	df000a17 	ldw	fp,40(sp)
    1a7c:	ddc00917 	ldw	r23,36(sp)
    1a80:	dd800817 	ldw	r22,32(sp)
    1a84:	dd400717 	ldw	r21,28(sp)
    1a88:	dd000617 	ldw	r20,24(sp)
    1a8c:	dcc00517 	ldw	r19,20(sp)
    1a90:	dc800417 	ldw	r18,16(sp)
    1a94:	dc400317 	ldw	r17,12(sp)
    1a98:	dc000217 	ldw	r16,8(sp)
    1a9c:	dec00c04 	addi	sp,sp,48
    1aa0:	0000d6c1 	jmpi	d6c <_malloc_r>
    1aa4:	38800117 	ldw	r2,4(r7)
    1aa8:	e54b883a 	add	r5,fp,r21
    1aac:	31000054 	ori	r4,r6,1
    1ab0:	1080004c 	andi	r2,r2,1
    1ab4:	1704b03a 	or	r2,r2,fp
    1ab8:	38800115 	stw	r2,4(r7)
    1abc:	29000115 	stw	r4,4(r5)
    1ac0:	2987883a 	add	r3,r5,r6
    1ac4:	18800117 	ldw	r2,4(r3)
    1ac8:	29400204 	addi	r5,r5,8
    1acc:	b009883a 	mov	r4,r22
    1ad0:	10800054 	ori	r2,r2,1
    1ad4:	18800115 	stw	r2,4(r3)
    1ad8:	00025000 	call	2500 <_free_r>
    1adc:	003f3806 	br	17c0 <_realloc_r+0xb0>
    1ae0:	000d883a 	mov	r6,zero
    1ae4:	0009883a 	mov	r4,zero
    1ae8:	003f5d06 	br	1860 <_realloc_r+0x150>
    1aec:	30c00217 	ldw	r3,8(r6)
    1af0:	30800317 	ldw	r2,12(r6)
    1af4:	800f883a 	mov	r7,r16
    1af8:	84000204 	addi	r16,r16,8
    1afc:	10c00215 	stw	r3,8(r2)
    1b00:	18800315 	stw	r2,12(r3)
    1b04:	003f2306 	br	1794 <_realloc_r+0x84>
    1b08:	8809883a 	mov	r4,r17
    1b0c:	900b883a 	mov	r5,r18
    1b10:	00016300 	call	1630 <memmove>
    1b14:	003fd006 	br	1a58 <_realloc_r+0x348>
    1b18:	30800117 	ldw	r2,4(r6)
    1b1c:	e0c00404 	addi	r3,fp,16
    1b20:	1108703a 	and	r4,r2,r4
    1b24:	9905883a 	add	r2,r19,r4
    1b28:	10ff4d16 	blt	r2,r3,1860 <_realloc_r+0x150>
    1b2c:	1705c83a 	sub	r2,r2,fp
    1b30:	870b883a 	add	r5,r16,fp
    1b34:	10800054 	ori	r2,r2,1
    1b38:	28800115 	stw	r2,4(r5)
    1b3c:	80c00117 	ldw	r3,4(r16)
    1b40:	00800034 	movhi	r2,0
    1b44:	109a1904 	addi	r2,r2,26724
    1b48:	b009883a 	mov	r4,r22
    1b4c:	18c0004c 	andi	r3,r3,1
    1b50:	e0c6b03a 	or	r3,fp,r3
    1b54:	11400215 	stw	r5,8(r2)
    1b58:	80c00115 	stw	r3,4(r16)
    1b5c:	00037a00 	call	37a0 <__malloc_unlock>
    1b60:	84400204 	addi	r17,r16,8
    1b64:	003f2006 	br	17e8 <_realloc_r+0xd8>
    1b68:	98a9883a 	add	r20,r19,r2
    1b6c:	2509883a 	add	r4,r4,r20
    1b70:	e0800404 	addi	r2,fp,16
    1b74:	d9000115 	stw	r4,4(sp)
    1b78:	20bf7016 	blt	r4,r2,193c <_realloc_r+0x22c>
    1b7c:	b8c00317 	ldw	r3,12(r23)
    1b80:	b8800217 	ldw	r2,8(r23)
    1b84:	99bfff04 	addi	r6,r19,-4
    1b88:	01400904 	movi	r5,36
    1b8c:	18800215 	stw	r2,8(r3)
    1b90:	10c00315 	stw	r3,12(r2)
    1b94:	bc400204 	addi	r17,r23,8
    1b98:	29804136 	bltu	r5,r6,1ca0 <_realloc_r+0x590>
    1b9c:	008004c4 	movi	r2,19
    1ba0:	9009883a 	mov	r4,r18
    1ba4:	880f883a 	mov	r7,r17
    1ba8:	11800f2e 	bgeu	r2,r6,1be8 <_realloc_r+0x4d8>
    1bac:	90800017 	ldw	r2,0(r18)
    1bb0:	b9c00404 	addi	r7,r23,16
    1bb4:	91000204 	addi	r4,r18,8
    1bb8:	b8800215 	stw	r2,8(r23)
    1bbc:	90c00117 	ldw	r3,4(r18)
    1bc0:	008006c4 	movi	r2,27
    1bc4:	b8c00315 	stw	r3,12(r23)
    1bc8:	1180072e 	bgeu	r2,r6,1be8 <_realloc_r+0x4d8>
    1bcc:	90c00217 	ldw	r3,8(r18)
    1bd0:	b9c00604 	addi	r7,r23,24
    1bd4:	91000404 	addi	r4,r18,16
    1bd8:	b8c00415 	stw	r3,16(r23)
    1bdc:	90800317 	ldw	r2,12(r18)
    1be0:	b8800515 	stw	r2,20(r23)
    1be4:	31404026 	beq	r6,r5,1ce8 <_realloc_r+0x5d8>
    1be8:	20800017 	ldw	r2,0(r4)
    1bec:	38800015 	stw	r2,0(r7)
    1bf0:	20c00117 	ldw	r3,4(r4)
    1bf4:	38c00115 	stw	r3,4(r7)
    1bf8:	20800217 	ldw	r2,8(r4)
    1bfc:	38800215 	stw	r2,8(r7)
    1c00:	d8c00117 	ldw	r3,4(sp)
    1c04:	bf0b883a 	add	r5,r23,fp
    1c08:	b009883a 	mov	r4,r22
    1c0c:	1f05c83a 	sub	r2,r3,fp
    1c10:	10800054 	ori	r2,r2,1
    1c14:	28800115 	stw	r2,4(r5)
    1c18:	b8c00117 	ldw	r3,4(r23)
    1c1c:	00800034 	movhi	r2,0
    1c20:	109a1904 	addi	r2,r2,26724
    1c24:	11400215 	stw	r5,8(r2)
    1c28:	18c0004c 	andi	r3,r3,1
    1c2c:	e0c6b03a 	or	r3,fp,r3
    1c30:	b8c00115 	stw	r3,4(r23)
    1c34:	00037a00 	call	37a0 <__malloc_unlock>
    1c38:	003eeb06 	br	17e8 <_realloc_r+0xd8>
    1c3c:	20800117 	ldw	r2,4(r4)
    1c40:	00ffff04 	movi	r3,-4
    1c44:	800f883a 	mov	r7,r16
    1c48:	10c4703a 	and	r2,r2,r3
    1c4c:	98a9883a 	add	r20,r19,r2
    1c50:	84000204 	addi	r16,r16,8
    1c54:	003ecf06 	br	1794 <_realloc_r+0x84>
    1c58:	900b883a 	mov	r5,r18
    1c5c:	8009883a 	mov	r4,r16
    1c60:	00016300 	call	1630 <memmove>
    1c64:	dd000017 	ldw	r20,0(sp)
    1c68:	b80f883a 	mov	r7,r23
    1c6c:	003ec906 	br	1794 <_realloc_r+0x84>
    1c70:	900b883a 	mov	r5,r18
    1c74:	8009883a 	mov	r4,r16
    1c78:	00016300 	call	1630 <memmove>
    1c7c:	b80f883a 	mov	r7,r23
    1c80:	003ec406 	br	1794 <_realloc_r+0x84>
    1c84:	90c00417 	ldw	r3,16(r18)
    1c88:	89400604 	addi	r5,r17,24
    1c8c:	91000604 	addi	r4,r18,24
    1c90:	88c00415 	stw	r3,16(r17)
    1c94:	90800517 	ldw	r2,20(r18)
    1c98:	88800515 	stw	r2,20(r17)
    1c9c:	003f6806 	br	1a40 <_realloc_r+0x330>
    1ca0:	900b883a 	mov	r5,r18
    1ca4:	8809883a 	mov	r4,r17
    1ca8:	00016300 	call	1630 <memmove>
    1cac:	003fd406 	br	1c00 <_realloc_r+0x4f0>
    1cb0:	90c00417 	ldw	r3,16(r18)
    1cb4:	91000604 	addi	r4,r18,24
    1cb8:	ba000804 	addi	r8,r23,32
    1cbc:	b8c00615 	stw	r3,24(r23)
    1cc0:	90800517 	ldw	r2,20(r18)
    1cc4:	b8800715 	stw	r2,28(r23)
    1cc8:	003f1206 	br	1914 <_realloc_r+0x204>
    1ccc:	90c00417 	ldw	r3,16(r18)
    1cd0:	91000604 	addi	r4,r18,24
    1cd4:	ba000804 	addi	r8,r23,32
    1cd8:	b8c00615 	stw	r3,24(r23)
    1cdc:	90800517 	ldw	r2,20(r18)
    1ce0:	b8800715 	stw	r2,28(r23)
    1ce4:	003f3206 	br	19b0 <_realloc_r+0x2a0>
    1ce8:	90c00417 	ldw	r3,16(r18)
    1cec:	91000604 	addi	r4,r18,24
    1cf0:	b9c00804 	addi	r7,r23,32
    1cf4:	b8c00615 	stw	r3,24(r23)
    1cf8:	90800517 	ldw	r2,20(r18)
    1cfc:	b8800715 	stw	r2,28(r23)
    1d00:	003fb906 	br	1be8 <_realloc_r+0x4d8>

00001d04 <_sbrk_r>:
    1d04:	defffd04 	addi	sp,sp,-12
    1d08:	dc000015 	stw	r16,0(sp)
    1d0c:	04000074 	movhi	r16,1
    1d10:	8426f204 	addi	r16,r16,-25656
    1d14:	dc400115 	stw	r17,4(sp)
    1d18:	80000015 	stw	zero,0(r16)
    1d1c:	2023883a 	mov	r17,r4
    1d20:	2809883a 	mov	r4,r5
    1d24:	dfc00215 	stw	ra,8(sp)
    1d28:	00039bc0 	call	39bc <sbrk>
    1d2c:	1007883a 	mov	r3,r2
    1d30:	00bfffc4 	movi	r2,-1
    1d34:	18800626 	beq	r3,r2,1d50 <_sbrk_r+0x4c>
    1d38:	1805883a 	mov	r2,r3
    1d3c:	dfc00217 	ldw	ra,8(sp)
    1d40:	dc400117 	ldw	r17,4(sp)
    1d44:	dc000017 	ldw	r16,0(sp)
    1d48:	dec00304 	addi	sp,sp,12
    1d4c:	f800283a 	ret
    1d50:	80800017 	ldw	r2,0(r16)
    1d54:	103ff826 	beq	r2,zero,1d38 <_sbrk_r+0x34>
    1d58:	88800015 	stw	r2,0(r17)
    1d5c:	1805883a 	mov	r2,r3
    1d60:	dfc00217 	ldw	ra,8(sp)
    1d64:	dc400117 	ldw	r17,4(sp)
    1d68:	dc000017 	ldw	r16,0(sp)
    1d6c:	dec00304 	addi	sp,sp,12
    1d70:	f800283a 	ret

00001d74 <__swsetup_r>:
    1d74:	00800034 	movhi	r2,0
    1d78:	109ff604 	addi	r2,r2,32728
    1d7c:	10c00017 	ldw	r3,0(r2)
    1d80:	defffd04 	addi	sp,sp,-12
    1d84:	dc400115 	stw	r17,4(sp)
    1d88:	dc000015 	stw	r16,0(sp)
    1d8c:	dfc00215 	stw	ra,8(sp)
    1d90:	2023883a 	mov	r17,r4
    1d94:	2821883a 	mov	r16,r5
    1d98:	18000226 	beq	r3,zero,1da4 <__swsetup_r+0x30>
    1d9c:	18800e17 	ldw	r2,56(r3)
    1da0:	10001f26 	beq	r2,zero,1e20 <__swsetup_r+0xac>
    1da4:	8100030b 	ldhu	r4,12(r16)
    1da8:	2080020c 	andi	r2,r4,8
    1dac:	10002826 	beq	r2,zero,1e50 <__swsetup_r+0xdc>
    1db0:	81400417 	ldw	r5,16(r16)
    1db4:	28001d26 	beq	r5,zero,1e2c <__swsetup_r+0xb8>
    1db8:	2080004c 	andi	r2,r4,1
    1dbc:	1005003a 	cmpeq	r2,r2,zero
    1dc0:	10000b26 	beq	r2,zero,1df0 <__swsetup_r+0x7c>
    1dc4:	2080008c 	andi	r2,r4,2
    1dc8:	10001226 	beq	r2,zero,1e14 <__swsetup_r+0xa0>
    1dcc:	0005883a 	mov	r2,zero
    1dd0:	80800215 	stw	r2,8(r16)
    1dd4:	28000b26 	beq	r5,zero,1e04 <__swsetup_r+0x90>
    1dd8:	0005883a 	mov	r2,zero
    1ddc:	dfc00217 	ldw	ra,8(sp)
    1de0:	dc400117 	ldw	r17,4(sp)
    1de4:	dc000017 	ldw	r16,0(sp)
    1de8:	dec00304 	addi	sp,sp,12
    1dec:	f800283a 	ret
    1df0:	80800517 	ldw	r2,20(r16)
    1df4:	80000215 	stw	zero,8(r16)
    1df8:	0085c83a 	sub	r2,zero,r2
    1dfc:	80800615 	stw	r2,24(r16)
    1e00:	283ff51e 	bne	r5,zero,1dd8 <__swsetup_r+0x64>
    1e04:	2080200c 	andi	r2,r4,128
    1e08:	103ff326 	beq	r2,zero,1dd8 <__swsetup_r+0x64>
    1e0c:	00bfffc4 	movi	r2,-1
    1e10:	003ff206 	br	1ddc <__swsetup_r+0x68>
    1e14:	80800517 	ldw	r2,20(r16)
    1e18:	80800215 	stw	r2,8(r16)
    1e1c:	003fed06 	br	1dd4 <__swsetup_r+0x60>
    1e20:	1809883a 	mov	r4,r3
    1e24:	00021480 	call	2148 <__sinit>
    1e28:	003fde06 	br	1da4 <__swsetup_r+0x30>
    1e2c:	20c0a00c 	andi	r3,r4,640
    1e30:	00808004 	movi	r2,512
    1e34:	18bfe026 	beq	r3,r2,1db8 <__swsetup_r+0x44>
    1e38:	8809883a 	mov	r4,r17
    1e3c:	800b883a 	mov	r5,r16
    1e40:	00029940 	call	2994 <__smakebuf_r>
    1e44:	8100030b 	ldhu	r4,12(r16)
    1e48:	81400417 	ldw	r5,16(r16)
    1e4c:	003fda06 	br	1db8 <__swsetup_r+0x44>
    1e50:	2080040c 	andi	r2,r4,16
    1e54:	103fed26 	beq	r2,zero,1e0c <__swsetup_r+0x98>
    1e58:	2080010c 	andi	r2,r4,4
    1e5c:	10001226 	beq	r2,zero,1ea8 <__swsetup_r+0x134>
    1e60:	81400c17 	ldw	r5,48(r16)
    1e64:	28000526 	beq	r5,zero,1e7c <__swsetup_r+0x108>
    1e68:	80801004 	addi	r2,r16,64
    1e6c:	28800226 	beq	r5,r2,1e78 <__swsetup_r+0x104>
    1e70:	8809883a 	mov	r4,r17
    1e74:	00025000 	call	2500 <_free_r>
    1e78:	80000c15 	stw	zero,48(r16)
    1e7c:	8080030b 	ldhu	r2,12(r16)
    1e80:	81400417 	ldw	r5,16(r16)
    1e84:	80000115 	stw	zero,4(r16)
    1e88:	10bff6cc 	andi	r2,r2,65499
    1e8c:	8080030d 	sth	r2,12(r16)
    1e90:	81400015 	stw	r5,0(r16)
    1e94:	8080030b 	ldhu	r2,12(r16)
    1e98:	10800214 	ori	r2,r2,8
    1e9c:	113fffcc 	andi	r4,r2,65535
    1ea0:	8080030d 	sth	r2,12(r16)
    1ea4:	003fc306 	br	1db4 <__swsetup_r+0x40>
    1ea8:	81400417 	ldw	r5,16(r16)
    1eac:	003ff906 	br	1e94 <__swsetup_r+0x120>

00001eb0 <_fflush_r>:
    1eb0:	defffb04 	addi	sp,sp,-20
    1eb4:	dcc00315 	stw	r19,12(sp)
    1eb8:	dc800215 	stw	r18,8(sp)
    1ebc:	dfc00415 	stw	ra,16(sp)
    1ec0:	dc400115 	stw	r17,4(sp)
    1ec4:	dc000015 	stw	r16,0(sp)
    1ec8:	2027883a 	mov	r19,r4
    1ecc:	2825883a 	mov	r18,r5
    1ed0:	20000226 	beq	r4,zero,1edc <_fflush_r+0x2c>
    1ed4:	20800e17 	ldw	r2,56(r4)
    1ed8:	10005626 	beq	r2,zero,2034 <_fflush_r+0x184>
    1edc:	9100030b 	ldhu	r4,12(r18)
    1ee0:	20ffffcc 	andi	r3,r4,65535
    1ee4:	18e0001c 	xori	r3,r3,32768
    1ee8:	18e00004 	addi	r3,r3,-32768
    1eec:	1880020c 	andi	r2,r3,8
    1ef0:	1000261e 	bne	r2,zero,1f8c <_fflush_r+0xdc>
    1ef4:	90c00117 	ldw	r3,4(r18)
    1ef8:	20820014 	ori	r2,r4,2048
    1efc:	9080030d 	sth	r2,12(r18)
    1f00:	1009883a 	mov	r4,r2
    1f04:	00c0400e 	bge	zero,r3,2008 <_fflush_r+0x158>
    1f08:	92000a17 	ldw	r8,40(r18)
    1f0c:	40004026 	beq	r8,zero,2010 <_fflush_r+0x160>
    1f10:	2084000c 	andi	r2,r4,4096
    1f14:	10005326 	beq	r2,zero,2064 <_fflush_r+0x1b4>
    1f18:	94001417 	ldw	r16,80(r18)
    1f1c:	9080030b 	ldhu	r2,12(r18)
    1f20:	1080010c 	andi	r2,r2,4
    1f24:	1000481e 	bne	r2,zero,2048 <_fflush_r+0x198>
    1f28:	91400717 	ldw	r5,28(r18)
    1f2c:	9809883a 	mov	r4,r19
    1f30:	800d883a 	mov	r6,r16
    1f34:	000f883a 	mov	r7,zero
    1f38:	403ee83a 	callr	r8
    1f3c:	8080261e 	bne	r16,r2,1fd8 <_fflush_r+0x128>
    1f40:	9080030b 	ldhu	r2,12(r18)
    1f44:	91000417 	ldw	r4,16(r18)
    1f48:	90000115 	stw	zero,4(r18)
    1f4c:	10bdffcc 	andi	r2,r2,63487
    1f50:	10ffffcc 	andi	r3,r2,65535
    1f54:	18c4000c 	andi	r3,r3,4096
    1f58:	9080030d 	sth	r2,12(r18)
    1f5c:	91000015 	stw	r4,0(r18)
    1f60:	18002b26 	beq	r3,zero,2010 <_fflush_r+0x160>
    1f64:	0007883a 	mov	r3,zero
    1f68:	1805883a 	mov	r2,r3
    1f6c:	94001415 	stw	r16,80(r18)
    1f70:	dfc00417 	ldw	ra,16(sp)
    1f74:	dcc00317 	ldw	r19,12(sp)
    1f78:	dc800217 	ldw	r18,8(sp)
    1f7c:	dc400117 	ldw	r17,4(sp)
    1f80:	dc000017 	ldw	r16,0(sp)
    1f84:	dec00504 	addi	sp,sp,20
    1f88:	f800283a 	ret
    1f8c:	94400417 	ldw	r17,16(r18)
    1f90:	88001f26 	beq	r17,zero,2010 <_fflush_r+0x160>
    1f94:	90800017 	ldw	r2,0(r18)
    1f98:	18c000cc 	andi	r3,r3,3
    1f9c:	94400015 	stw	r17,0(r18)
    1fa0:	1461c83a 	sub	r16,r2,r17
    1fa4:	18002526 	beq	r3,zero,203c <_fflush_r+0x18c>
    1fa8:	0005883a 	mov	r2,zero
    1fac:	90800215 	stw	r2,8(r18)
    1fb0:	0400170e 	bge	zero,r16,2010 <_fflush_r+0x160>
    1fb4:	90c00917 	ldw	r3,36(r18)
    1fb8:	91400717 	ldw	r5,28(r18)
    1fbc:	880d883a 	mov	r6,r17
    1fc0:	800f883a 	mov	r7,r16
    1fc4:	9809883a 	mov	r4,r19
    1fc8:	183ee83a 	callr	r3
    1fcc:	88a3883a 	add	r17,r17,r2
    1fd0:	80a1c83a 	sub	r16,r16,r2
    1fd4:	00bff616 	blt	zero,r2,1fb0 <_fflush_r+0x100>
    1fd8:	9080030b 	ldhu	r2,12(r18)
    1fdc:	00ffffc4 	movi	r3,-1
    1fe0:	10801014 	ori	r2,r2,64
    1fe4:	9080030d 	sth	r2,12(r18)
    1fe8:	1805883a 	mov	r2,r3
    1fec:	dfc00417 	ldw	ra,16(sp)
    1ff0:	dcc00317 	ldw	r19,12(sp)
    1ff4:	dc800217 	ldw	r18,8(sp)
    1ff8:	dc400117 	ldw	r17,4(sp)
    1ffc:	dc000017 	ldw	r16,0(sp)
    2000:	dec00504 	addi	sp,sp,20
    2004:	f800283a 	ret
    2008:	90800f17 	ldw	r2,60(r18)
    200c:	00bfbe16 	blt	zero,r2,1f08 <_fflush_r+0x58>
    2010:	0007883a 	mov	r3,zero
    2014:	1805883a 	mov	r2,r3
    2018:	dfc00417 	ldw	ra,16(sp)
    201c:	dcc00317 	ldw	r19,12(sp)
    2020:	dc800217 	ldw	r18,8(sp)
    2024:	dc400117 	ldw	r17,4(sp)
    2028:	dc000017 	ldw	r16,0(sp)
    202c:	dec00504 	addi	sp,sp,20
    2030:	f800283a 	ret
    2034:	00021480 	call	2148 <__sinit>
    2038:	003fa806 	br	1edc <_fflush_r+0x2c>
    203c:	90800517 	ldw	r2,20(r18)
    2040:	90800215 	stw	r2,8(r18)
    2044:	003fda06 	br	1fb0 <_fflush_r+0x100>
    2048:	90800117 	ldw	r2,4(r18)
    204c:	90c00c17 	ldw	r3,48(r18)
    2050:	80a1c83a 	sub	r16,r16,r2
    2054:	183fb426 	beq	r3,zero,1f28 <_fflush_r+0x78>
    2058:	90800f17 	ldw	r2,60(r18)
    205c:	80a1c83a 	sub	r16,r16,r2
    2060:	003fb106 	br	1f28 <_fflush_r+0x78>
    2064:	91400717 	ldw	r5,28(r18)
    2068:	9809883a 	mov	r4,r19
    206c:	000d883a 	mov	r6,zero
    2070:	01c00044 	movi	r7,1
    2074:	403ee83a 	callr	r8
    2078:	1021883a 	mov	r16,r2
    207c:	00bfffc4 	movi	r2,-1
    2080:	80800226 	beq	r16,r2,208c <_fflush_r+0x1dc>
    2084:	92000a17 	ldw	r8,40(r18)
    2088:	003fa406 	br	1f1c <_fflush_r+0x6c>
    208c:	98c00017 	ldw	r3,0(r19)
    2090:	00800744 	movi	r2,29
    2094:	18bfde26 	beq	r3,r2,2010 <_fflush_r+0x160>
    2098:	9080030b 	ldhu	r2,12(r18)
    209c:	8007883a 	mov	r3,r16
    20a0:	10801014 	ori	r2,r2,64
    20a4:	9080030d 	sth	r2,12(r18)
    20a8:	003fcf06 	br	1fe8 <_fflush_r+0x138>

000020ac <fflush>:
    20ac:	01400034 	movhi	r5,0
    20b0:	2947ac04 	addi	r5,r5,7856
    20b4:	2007883a 	mov	r3,r4
    20b8:	20000526 	beq	r4,zero,20d0 <fflush+0x24>
    20bc:	00800034 	movhi	r2,0
    20c0:	109ff604 	addi	r2,r2,32728
    20c4:	11000017 	ldw	r4,0(r2)
    20c8:	180b883a 	mov	r5,r3
    20cc:	0001eb01 	jmpi	1eb0 <_fflush_r>
    20d0:	00800034 	movhi	r2,0
    20d4:	109ff704 	addi	r2,r2,32732
    20d8:	11000017 	ldw	r4,0(r2)
    20dc:	00028141 	jmpi	2814 <_fwalk_reent>

000020e0 <std>:
    20e0:	00800034 	movhi	r2,0
    20e4:	108af004 	addi	r2,r2,11200
    20e8:	20800b15 	stw	r2,44(r4)
    20ec:	00800034 	movhi	r2,0
    20f0:	108b2b04 	addi	r2,r2,11436
    20f4:	20800815 	stw	r2,32(r4)
    20f8:	00c00034 	movhi	r3,0
    20fc:	18cb0c04 	addi	r3,r3,11312
    2100:	00800034 	movhi	r2,0
    2104:	108af204 	addi	r2,r2,11208
    2108:	2140030d 	sth	r5,12(r4)
    210c:	2180038d 	sth	r6,14(r4)
    2110:	20c00915 	stw	r3,36(r4)
    2114:	20800a15 	stw	r2,40(r4)
    2118:	20000015 	stw	zero,0(r4)
    211c:	20000115 	stw	zero,4(r4)
    2120:	20000215 	stw	zero,8(r4)
    2124:	20000415 	stw	zero,16(r4)
    2128:	20000515 	stw	zero,20(r4)
    212c:	20000615 	stw	zero,24(r4)
    2130:	21000715 	stw	r4,28(r4)
    2134:	f800283a 	ret

00002138 <__sfp_lock_acquire>:
    2138:	f800283a 	ret

0000213c <__sfp_lock_release>:
    213c:	f800283a 	ret

00002140 <__sinit_lock_acquire>:
    2140:	f800283a 	ret

00002144 <__sinit_lock_release>:
    2144:	f800283a 	ret

00002148 <__sinit>:
    2148:	20800e17 	ldw	r2,56(r4)
    214c:	defffd04 	addi	sp,sp,-12
    2150:	dc400115 	stw	r17,4(sp)
    2154:	dc000015 	stw	r16,0(sp)
    2158:	dfc00215 	stw	ra,8(sp)
    215c:	04400044 	movi	r17,1
    2160:	01400104 	movi	r5,4
    2164:	000d883a 	mov	r6,zero
    2168:	2021883a 	mov	r16,r4
    216c:	2200bb04 	addi	r8,r4,748
    2170:	200f883a 	mov	r7,r4
    2174:	10000526 	beq	r2,zero,218c <__sinit+0x44>
    2178:	dfc00217 	ldw	ra,8(sp)
    217c:	dc400117 	ldw	r17,4(sp)
    2180:	dc000017 	ldw	r16,0(sp)
    2184:	dec00304 	addi	sp,sp,12
    2188:	f800283a 	ret
    218c:	21000117 	ldw	r4,4(r4)
    2190:	00800034 	movhi	r2,0
    2194:	10888b04 	addi	r2,r2,8748
    2198:	00c000c4 	movi	r3,3
    219c:	80800f15 	stw	r2,60(r16)
    21a0:	80c0b915 	stw	r3,740(r16)
    21a4:	8200ba15 	stw	r8,744(r16)
    21a8:	84400e15 	stw	r17,56(r16)
    21ac:	8000b815 	stw	zero,736(r16)
    21b0:	00020e00 	call	20e0 <std>
    21b4:	81000217 	ldw	r4,8(r16)
    21b8:	880d883a 	mov	r6,r17
    21bc:	800f883a 	mov	r7,r16
    21c0:	01400284 	movi	r5,10
    21c4:	00020e00 	call	20e0 <std>
    21c8:	81000317 	ldw	r4,12(r16)
    21cc:	800f883a 	mov	r7,r16
    21d0:	01400484 	movi	r5,18
    21d4:	01800084 	movi	r6,2
    21d8:	dfc00217 	ldw	ra,8(sp)
    21dc:	dc400117 	ldw	r17,4(sp)
    21e0:	dc000017 	ldw	r16,0(sp)
    21e4:	dec00304 	addi	sp,sp,12
    21e8:	00020e01 	jmpi	20e0 <std>

000021ec <__fp_lock>:
    21ec:	0005883a 	mov	r2,zero
    21f0:	f800283a 	ret

000021f4 <__fp_unlock>:
    21f4:	0005883a 	mov	r2,zero
    21f8:	f800283a 	ret

000021fc <__fp_unlock_all>:
    21fc:	00800034 	movhi	r2,0
    2200:	109ff604 	addi	r2,r2,32728
    2204:	11000017 	ldw	r4,0(r2)
    2208:	01400034 	movhi	r5,0
    220c:	29487d04 	addi	r5,r5,8692
    2210:	00028dc1 	jmpi	28dc <_fwalk>

00002214 <__fp_lock_all>:
    2214:	00800034 	movhi	r2,0
    2218:	109ff604 	addi	r2,r2,32728
    221c:	11000017 	ldw	r4,0(r2)
    2220:	01400034 	movhi	r5,0
    2224:	29487b04 	addi	r5,r5,8684
    2228:	00028dc1 	jmpi	28dc <_fwalk>

0000222c <_cleanup_r>:
    222c:	01400034 	movhi	r5,0
    2230:	294bc104 	addi	r5,r5,12036
    2234:	00028dc1 	jmpi	28dc <_fwalk>

00002238 <_cleanup>:
    2238:	00800034 	movhi	r2,0
    223c:	109ff704 	addi	r2,r2,32732
    2240:	11000017 	ldw	r4,0(r2)
    2244:	000222c1 	jmpi	222c <_cleanup_r>

00002248 <__sfmoreglue>:
    2248:	defffc04 	addi	sp,sp,-16
    224c:	dc000015 	stw	r16,0(sp)
    2250:	2821883a 	mov	r16,r5
    2254:	dc400115 	stw	r17,4(sp)
    2258:	01401704 	movi	r5,92
    225c:	2023883a 	mov	r17,r4
    2260:	8009883a 	mov	r4,r16
    2264:	dfc00315 	stw	ra,12(sp)
    2268:	dcc00215 	stw	r19,8(sp)
    226c:	00007700 	call	770 <__mulsi3>
    2270:	11400304 	addi	r5,r2,12
    2274:	8809883a 	mov	r4,r17
    2278:	1027883a 	mov	r19,r2
    227c:	0000d6c0 	call	d6c <_malloc_r>
    2280:	10c00304 	addi	r3,r2,12
    2284:	1023883a 	mov	r17,r2
    2288:	1809883a 	mov	r4,r3
    228c:	980d883a 	mov	r6,r19
    2290:	000b883a 	mov	r5,zero
    2294:	10000b26 	beq	r2,zero,22c4 <__sfmoreglue+0x7c>
    2298:	14000115 	stw	r16,4(r2)
    229c:	10c00215 	stw	r3,8(r2)
    22a0:	10000015 	stw	zero,0(r2)
    22a4:	0002b280 	call	2b28 <memset>
    22a8:	8805883a 	mov	r2,r17
    22ac:	dfc00317 	ldw	ra,12(sp)
    22b0:	dcc00217 	ldw	r19,8(sp)
    22b4:	dc400117 	ldw	r17,4(sp)
    22b8:	dc000017 	ldw	r16,0(sp)
    22bc:	dec00404 	addi	sp,sp,16
    22c0:	f800283a 	ret
    22c4:	0023883a 	mov	r17,zero
    22c8:	8805883a 	mov	r2,r17
    22cc:	dfc00317 	ldw	ra,12(sp)
    22d0:	dcc00217 	ldw	r19,8(sp)
    22d4:	dc400117 	ldw	r17,4(sp)
    22d8:	dc000017 	ldw	r16,0(sp)
    22dc:	dec00404 	addi	sp,sp,16
    22e0:	f800283a 	ret

000022e4 <__sfp>:
    22e4:	defffd04 	addi	sp,sp,-12
    22e8:	00800034 	movhi	r2,0
    22ec:	109ff704 	addi	r2,r2,32732
    22f0:	dc000015 	stw	r16,0(sp)
    22f4:	14000017 	ldw	r16,0(r2)
    22f8:	dc400115 	stw	r17,4(sp)
    22fc:	dfc00215 	stw	ra,8(sp)
    2300:	80800e17 	ldw	r2,56(r16)
    2304:	2023883a 	mov	r17,r4
    2308:	10002626 	beq	r2,zero,23a4 <__sfp+0xc0>
    230c:	8400b804 	addi	r16,r16,736
    2310:	80800117 	ldw	r2,4(r16)
    2314:	81000217 	ldw	r4,8(r16)
    2318:	10ffffc4 	addi	r3,r2,-1
    231c:	18000916 	blt	r3,zero,2344 <__sfp+0x60>
    2320:	2080030f 	ldh	r2,12(r4)
    2324:	10000b26 	beq	r2,zero,2354 <__sfp+0x70>
    2328:	017fffc4 	movi	r5,-1
    232c:	00000206 	br	2338 <__sfp+0x54>
    2330:	2080030f 	ldh	r2,12(r4)
    2334:	10000726 	beq	r2,zero,2354 <__sfp+0x70>
    2338:	18ffffc4 	addi	r3,r3,-1
    233c:	21001704 	addi	r4,r4,92
    2340:	197ffb1e 	bne	r3,r5,2330 <__sfp+0x4c>
    2344:	80800017 	ldw	r2,0(r16)
    2348:	10001926 	beq	r2,zero,23b0 <__sfp+0xcc>
    234c:	1021883a 	mov	r16,r2
    2350:	003fef06 	br	2310 <__sfp+0x2c>
    2354:	00bfffc4 	movi	r2,-1
    2358:	00c00044 	movi	r3,1
    235c:	2080038d 	sth	r2,14(r4)
    2360:	20c0030d 	sth	r3,12(r4)
    2364:	20000015 	stw	zero,0(r4)
    2368:	20000215 	stw	zero,8(r4)
    236c:	20000115 	stw	zero,4(r4)
    2370:	20000415 	stw	zero,16(r4)
    2374:	20000515 	stw	zero,20(r4)
    2378:	20000615 	stw	zero,24(r4)
    237c:	20000c15 	stw	zero,48(r4)
    2380:	20000d15 	stw	zero,52(r4)
    2384:	20001115 	stw	zero,68(r4)
    2388:	20001215 	stw	zero,72(r4)
    238c:	2005883a 	mov	r2,r4
    2390:	dfc00217 	ldw	ra,8(sp)
    2394:	dc400117 	ldw	r17,4(sp)
    2398:	dc000017 	ldw	r16,0(sp)
    239c:	dec00304 	addi	sp,sp,12
    23a0:	f800283a 	ret
    23a4:	8009883a 	mov	r4,r16
    23a8:	00021480 	call	2148 <__sinit>
    23ac:	003fd706 	br	230c <__sfp+0x28>
    23b0:	8809883a 	mov	r4,r17
    23b4:	01400104 	movi	r5,4
    23b8:	00022480 	call	2248 <__sfmoreglue>
    23bc:	80800015 	stw	r2,0(r16)
    23c0:	103fe21e 	bne	r2,zero,234c <__sfp+0x68>
    23c4:	00800304 	movi	r2,12
    23c8:	0009883a 	mov	r4,zero
    23cc:	88800015 	stw	r2,0(r17)
    23d0:	003fee06 	br	238c <__sfp+0xa8>

000023d4 <_malloc_trim_r>:
    23d4:	defffb04 	addi	sp,sp,-20
    23d8:	dcc00315 	stw	r19,12(sp)
    23dc:	04c00034 	movhi	r19,0
    23e0:	9cda1904 	addi	r19,r19,26724
    23e4:	dc800215 	stw	r18,8(sp)
    23e8:	dc400115 	stw	r17,4(sp)
    23ec:	dc000015 	stw	r16,0(sp)
    23f0:	2823883a 	mov	r17,r5
    23f4:	2025883a 	mov	r18,r4
    23f8:	dfc00415 	stw	ra,16(sp)
    23fc:	00037800 	call	3780 <__malloc_lock>
    2400:	98800217 	ldw	r2,8(r19)
    2404:	9009883a 	mov	r4,r18
    2408:	000b883a 	mov	r5,zero
    240c:	10c00117 	ldw	r3,4(r2)
    2410:	00bfff04 	movi	r2,-4
    2414:	18a0703a 	and	r16,r3,r2
    2418:	8463c83a 	sub	r17,r16,r17
    241c:	8c43fbc4 	addi	r17,r17,4079
    2420:	8822d33a 	srli	r17,r17,12
    2424:	0083ffc4 	movi	r2,4095
    2428:	8c7fffc4 	addi	r17,r17,-1
    242c:	8822933a 	slli	r17,r17,12
    2430:	1440060e 	bge	r2,r17,244c <_malloc_trim_r+0x78>
    2434:	0001d040 	call	1d04 <_sbrk_r>
    2438:	98c00217 	ldw	r3,8(r19)
    243c:	9009883a 	mov	r4,r18
    2440:	044bc83a 	sub	r5,zero,r17
    2444:	80c7883a 	add	r3,r16,r3
    2448:	10c00926 	beq	r2,r3,2470 <_malloc_trim_r+0x9c>
    244c:	00037a00 	call	37a0 <__malloc_unlock>
    2450:	0005883a 	mov	r2,zero
    2454:	dfc00417 	ldw	ra,16(sp)
    2458:	dcc00317 	ldw	r19,12(sp)
    245c:	dc800217 	ldw	r18,8(sp)
    2460:	dc400117 	ldw	r17,4(sp)
    2464:	dc000017 	ldw	r16,0(sp)
    2468:	dec00504 	addi	sp,sp,20
    246c:	f800283a 	ret
    2470:	9009883a 	mov	r4,r18
    2474:	0001d040 	call	1d04 <_sbrk_r>
    2478:	844dc83a 	sub	r6,r16,r17
    247c:	00ffffc4 	movi	r3,-1
    2480:	9009883a 	mov	r4,r18
    2484:	000b883a 	mov	r5,zero
    2488:	01c00074 	movhi	r7,1
    248c:	39e6f904 	addi	r7,r7,-25628
    2490:	31800054 	ori	r6,r6,1
    2494:	10c00926 	beq	r2,r3,24bc <_malloc_trim_r+0xe8>
    2498:	38800017 	ldw	r2,0(r7)
    249c:	98c00217 	ldw	r3,8(r19)
    24a0:	9009883a 	mov	r4,r18
    24a4:	1445c83a 	sub	r2,r2,r17
    24a8:	38800015 	stw	r2,0(r7)
    24ac:	19800115 	stw	r6,4(r3)
    24b0:	00037a00 	call	37a0 <__malloc_unlock>
    24b4:	00800044 	movi	r2,1
    24b8:	003fe606 	br	2454 <_malloc_trim_r+0x80>
    24bc:	0001d040 	call	1d04 <_sbrk_r>
    24c0:	99800217 	ldw	r6,8(r19)
    24c4:	100f883a 	mov	r7,r2
    24c8:	9009883a 	mov	r4,r18
    24cc:	1187c83a 	sub	r3,r2,r6
    24d0:	008003c4 	movi	r2,15
    24d4:	19400054 	ori	r5,r3,1
    24d8:	10ffdc0e 	bge	r2,r3,244c <_malloc_trim_r+0x78>
    24dc:	00800034 	movhi	r2,0
    24e0:	109ff904 	addi	r2,r2,32740
    24e4:	10c00017 	ldw	r3,0(r2)
    24e8:	00800074 	movhi	r2,1
    24ec:	10a6f904 	addi	r2,r2,-25628
    24f0:	31400115 	stw	r5,4(r6)
    24f4:	38c7c83a 	sub	r3,r7,r3
    24f8:	10c00015 	stw	r3,0(r2)
    24fc:	003fd306 	br	244c <_malloc_trim_r+0x78>

00002500 <_free_r>:
    2500:	defffd04 	addi	sp,sp,-12
    2504:	dc400115 	stw	r17,4(sp)
    2508:	dc000015 	stw	r16,0(sp)
    250c:	dfc00215 	stw	ra,8(sp)
    2510:	2821883a 	mov	r16,r5
    2514:	2023883a 	mov	r17,r4
    2518:	28005a26 	beq	r5,zero,2684 <_free_r+0x184>
    251c:	00037800 	call	3780 <__malloc_lock>
    2520:	823ffe04 	addi	r8,r16,-8
    2524:	41400117 	ldw	r5,4(r8)
    2528:	00bfff84 	movi	r2,-2
    252c:	02800034 	movhi	r10,0
    2530:	529a1904 	addi	r10,r10,26724
    2534:	288e703a 	and	r7,r5,r2
    2538:	41cd883a 	add	r6,r8,r7
    253c:	30c00117 	ldw	r3,4(r6)
    2540:	51000217 	ldw	r4,8(r10)
    2544:	00bfff04 	movi	r2,-4
    2548:	1892703a 	and	r9,r3,r2
    254c:	5017883a 	mov	r11,r10
    2550:	31006726 	beq	r6,r4,26f0 <_free_r+0x1f0>
    2554:	2880004c 	andi	r2,r5,1
    2558:	1005003a 	cmpeq	r2,r2,zero
    255c:	32400115 	stw	r9,4(r6)
    2560:	10001a1e 	bne	r2,zero,25cc <_free_r+0xcc>
    2564:	000b883a 	mov	r5,zero
    2568:	3247883a 	add	r3,r6,r9
    256c:	18800117 	ldw	r2,4(r3)
    2570:	1080004c 	andi	r2,r2,1
    2574:	1000231e 	bne	r2,zero,2604 <_free_r+0x104>
    2578:	280ac03a 	cmpne	r5,r5,zero
    257c:	3a4f883a 	add	r7,r7,r9
    2580:	2800451e 	bne	r5,zero,2698 <_free_r+0x198>
    2584:	31000217 	ldw	r4,8(r6)
    2588:	00800034 	movhi	r2,0
    258c:	109a1b04 	addi	r2,r2,26732
    2590:	20807b26 	beq	r4,r2,2780 <_free_r+0x280>
    2594:	30800317 	ldw	r2,12(r6)
    2598:	3a07883a 	add	r3,r7,r8
    259c:	19c00015 	stw	r7,0(r3)
    25a0:	11000215 	stw	r4,8(r2)
    25a4:	20800315 	stw	r2,12(r4)
    25a8:	38800054 	ori	r2,r7,1
    25ac:	40800115 	stw	r2,4(r8)
    25b0:	28001a26 	beq	r5,zero,261c <_free_r+0x11c>
    25b4:	8809883a 	mov	r4,r17
    25b8:	dfc00217 	ldw	ra,8(sp)
    25bc:	dc400117 	ldw	r17,4(sp)
    25c0:	dc000017 	ldw	r16,0(sp)
    25c4:	dec00304 	addi	sp,sp,12
    25c8:	00037a01 	jmpi	37a0 <__malloc_unlock>
    25cc:	80bffe17 	ldw	r2,-8(r16)
    25d0:	50c00204 	addi	r3,r10,8
    25d4:	4091c83a 	sub	r8,r8,r2
    25d8:	41000217 	ldw	r4,8(r8)
    25dc:	388f883a 	add	r7,r7,r2
    25e0:	20c06126 	beq	r4,r3,2768 <_free_r+0x268>
    25e4:	40800317 	ldw	r2,12(r8)
    25e8:	3247883a 	add	r3,r6,r9
    25ec:	000b883a 	mov	r5,zero
    25f0:	11000215 	stw	r4,8(r2)
    25f4:	20800315 	stw	r2,12(r4)
    25f8:	18800117 	ldw	r2,4(r3)
    25fc:	1080004c 	andi	r2,r2,1
    2600:	103fdd26 	beq	r2,zero,2578 <_free_r+0x78>
    2604:	38800054 	ori	r2,r7,1
    2608:	3a07883a 	add	r3,r7,r8
    260c:	280ac03a 	cmpne	r5,r5,zero
    2610:	40800115 	stw	r2,4(r8)
    2614:	19c00015 	stw	r7,0(r3)
    2618:	283fe61e 	bne	r5,zero,25b4 <_free_r+0xb4>
    261c:	00807fc4 	movi	r2,511
    2620:	11c01f2e 	bgeu	r2,r7,26a0 <_free_r+0x1a0>
    2624:	3806d27a 	srli	r3,r7,9
    2628:	1800481e 	bne	r3,zero,274c <_free_r+0x24c>
    262c:	3804d0fa 	srli	r2,r7,3
    2630:	100690fa 	slli	r3,r2,3
    2634:	1acd883a 	add	r6,r3,r11
    2638:	31400217 	ldw	r5,8(r6)
    263c:	31405926 	beq	r6,r5,27a4 <_free_r+0x2a4>
    2640:	28800117 	ldw	r2,4(r5)
    2644:	00ffff04 	movi	r3,-4
    2648:	10c4703a 	and	r2,r2,r3
    264c:	3880022e 	bgeu	r7,r2,2658 <_free_r+0x158>
    2650:	29400217 	ldw	r5,8(r5)
    2654:	317ffa1e 	bne	r6,r5,2640 <_free_r+0x140>
    2658:	29800317 	ldw	r6,12(r5)
    265c:	41800315 	stw	r6,12(r8)
    2660:	41400215 	stw	r5,8(r8)
    2664:	8809883a 	mov	r4,r17
    2668:	2a000315 	stw	r8,12(r5)
    266c:	32000215 	stw	r8,8(r6)
    2670:	dfc00217 	ldw	ra,8(sp)
    2674:	dc400117 	ldw	r17,4(sp)
    2678:	dc000017 	ldw	r16,0(sp)
    267c:	dec00304 	addi	sp,sp,12
    2680:	00037a01 	jmpi	37a0 <__malloc_unlock>
    2684:	dfc00217 	ldw	ra,8(sp)
    2688:	dc400117 	ldw	r17,4(sp)
    268c:	dc000017 	ldw	r16,0(sp)
    2690:	dec00304 	addi	sp,sp,12
    2694:	f800283a 	ret
    2698:	31000217 	ldw	r4,8(r6)
    269c:	003fbd06 	br	2594 <_free_r+0x94>
    26a0:	3806d0fa 	srli	r3,r7,3
    26a4:	00800044 	movi	r2,1
    26a8:	51400117 	ldw	r5,4(r10)
    26ac:	180890fa 	slli	r4,r3,3
    26b0:	1807d0ba 	srai	r3,r3,2
    26b4:	22c9883a 	add	r4,r4,r11
    26b8:	21800217 	ldw	r6,8(r4)
    26bc:	10c4983a 	sll	r2,r2,r3
    26c0:	41000315 	stw	r4,12(r8)
    26c4:	41800215 	stw	r6,8(r8)
    26c8:	288ab03a 	or	r5,r5,r2
    26cc:	22000215 	stw	r8,8(r4)
    26d0:	8809883a 	mov	r4,r17
    26d4:	51400115 	stw	r5,4(r10)
    26d8:	32000315 	stw	r8,12(r6)
    26dc:	dfc00217 	ldw	ra,8(sp)
    26e0:	dc400117 	ldw	r17,4(sp)
    26e4:	dc000017 	ldw	r16,0(sp)
    26e8:	dec00304 	addi	sp,sp,12
    26ec:	00037a01 	jmpi	37a0 <__malloc_unlock>
    26f0:	2880004c 	andi	r2,r5,1
    26f4:	3a4d883a 	add	r6,r7,r9
    26f8:	1000071e 	bne	r2,zero,2718 <_free_r+0x218>
    26fc:	80bffe17 	ldw	r2,-8(r16)
    2700:	4091c83a 	sub	r8,r8,r2
    2704:	41000317 	ldw	r4,12(r8)
    2708:	40c00217 	ldw	r3,8(r8)
    270c:	308d883a 	add	r6,r6,r2
    2710:	20c00215 	stw	r3,8(r4)
    2714:	19000315 	stw	r4,12(r3)
    2718:	00800034 	movhi	r2,0
    271c:	109ff804 	addi	r2,r2,32736
    2720:	11000017 	ldw	r4,0(r2)
    2724:	30c00054 	ori	r3,r6,1
    2728:	52000215 	stw	r8,8(r10)
    272c:	40c00115 	stw	r3,4(r8)
    2730:	313fa036 	bltu	r6,r4,25b4 <_free_r+0xb4>
    2734:	00800074 	movhi	r2,1
    2738:	10a6ef04 	addi	r2,r2,-25668
    273c:	11400017 	ldw	r5,0(r2)
    2740:	8809883a 	mov	r4,r17
    2744:	00023d40 	call	23d4 <_malloc_trim_r>
    2748:	003f9a06 	br	25b4 <_free_r+0xb4>
    274c:	00800104 	movi	r2,4
    2750:	10c0072e 	bgeu	r2,r3,2770 <_free_r+0x270>
    2754:	00800504 	movi	r2,20
    2758:	10c01936 	bltu	r2,r3,27c0 <_free_r+0x2c0>
    275c:	188016c4 	addi	r2,r3,91
    2760:	100690fa 	slli	r3,r2,3
    2764:	003fb306 	br	2634 <_free_r+0x134>
    2768:	01400044 	movi	r5,1
    276c:	003f7e06 	br	2568 <_free_r+0x68>
    2770:	3804d1ba 	srli	r2,r7,6
    2774:	10800e04 	addi	r2,r2,56
    2778:	100690fa 	slli	r3,r2,3
    277c:	003fad06 	br	2634 <_free_r+0x134>
    2780:	22000315 	stw	r8,12(r4)
    2784:	22000215 	stw	r8,8(r4)
    2788:	3a05883a 	add	r2,r7,r8
    278c:	38c00054 	ori	r3,r7,1
    2790:	11c00015 	stw	r7,0(r2)
    2794:	41000215 	stw	r4,8(r8)
    2798:	40c00115 	stw	r3,4(r8)
    279c:	41000315 	stw	r4,12(r8)
    27a0:	003f8406 	br	25b4 <_free_r+0xb4>
    27a4:	1005d0ba 	srai	r2,r2,2
    27a8:	00c00044 	movi	r3,1
    27ac:	51000117 	ldw	r4,4(r10)
    27b0:	1886983a 	sll	r3,r3,r2
    27b4:	20c8b03a 	or	r4,r4,r3
    27b8:	51000115 	stw	r4,4(r10)
    27bc:	003fa706 	br	265c <_free_r+0x15c>
    27c0:	00801504 	movi	r2,84
    27c4:	10c00436 	bltu	r2,r3,27d8 <_free_r+0x2d8>
    27c8:	3804d33a 	srli	r2,r7,12
    27cc:	10801b84 	addi	r2,r2,110
    27d0:	100690fa 	slli	r3,r2,3
    27d4:	003f9706 	br	2634 <_free_r+0x134>
    27d8:	00805504 	movi	r2,340
    27dc:	10c00436 	bltu	r2,r3,27f0 <_free_r+0x2f0>
    27e0:	3804d3fa 	srli	r2,r7,15
    27e4:	10801dc4 	addi	r2,r2,119
    27e8:	100690fa 	slli	r3,r2,3
    27ec:	003f9106 	br	2634 <_free_r+0x134>
    27f0:	00815504 	movi	r2,1364
    27f4:	10c0032e 	bgeu	r2,r3,2804 <_free_r+0x304>
    27f8:	00801f84 	movi	r2,126
    27fc:	00c0fc04 	movi	r3,1008
    2800:	003f8c06 	br	2634 <_free_r+0x134>
    2804:	3804d4ba 	srli	r2,r7,18
    2808:	10801f04 	addi	r2,r2,124
    280c:	100690fa 	slli	r3,r2,3
    2810:	003f8806 	br	2634 <_free_r+0x134>

00002814 <_fwalk_reent>:
    2814:	defff704 	addi	sp,sp,-36
    2818:	dcc00315 	stw	r19,12(sp)
    281c:	24c0b804 	addi	r19,r4,736
    2820:	dd800615 	stw	r22,24(sp)
    2824:	dd400515 	stw	r21,20(sp)
    2828:	dfc00815 	stw	ra,32(sp)
    282c:	ddc00715 	stw	r23,28(sp)
    2830:	dd000415 	stw	r20,16(sp)
    2834:	dc800215 	stw	r18,8(sp)
    2838:	dc400115 	stw	r17,4(sp)
    283c:	dc000015 	stw	r16,0(sp)
    2840:	202b883a 	mov	r21,r4
    2844:	282d883a 	mov	r22,r5
    2848:	00021380 	call	2138 <__sfp_lock_acquire>
    284c:	98002126 	beq	r19,zero,28d4 <_fwalk_reent+0xc0>
    2850:	002f883a 	mov	r23,zero
    2854:	9c800117 	ldw	r18,4(r19)
    2858:	9c000217 	ldw	r16,8(r19)
    285c:	90bfffc4 	addi	r2,r18,-1
    2860:	10000d16 	blt	r2,zero,2898 <_fwalk_reent+0x84>
    2864:	0023883a 	mov	r17,zero
    2868:	053fffc4 	movi	r20,-1
    286c:	8080030f 	ldh	r2,12(r16)
    2870:	8c400044 	addi	r17,r17,1
    2874:	10000626 	beq	r2,zero,2890 <_fwalk_reent+0x7c>
    2878:	8080038f 	ldh	r2,14(r16)
    287c:	800b883a 	mov	r5,r16
    2880:	a809883a 	mov	r4,r21
    2884:	15000226 	beq	r2,r20,2890 <_fwalk_reent+0x7c>
    2888:	b03ee83a 	callr	r22
    288c:	b8aeb03a 	or	r23,r23,r2
    2890:	84001704 	addi	r16,r16,92
    2894:	947ff51e 	bne	r18,r17,286c <_fwalk_reent+0x58>
    2898:	9cc00017 	ldw	r19,0(r19)
    289c:	983fed1e 	bne	r19,zero,2854 <_fwalk_reent+0x40>
    28a0:	000213c0 	call	213c <__sfp_lock_release>
    28a4:	b805883a 	mov	r2,r23
    28a8:	dfc00817 	ldw	ra,32(sp)
    28ac:	ddc00717 	ldw	r23,28(sp)
    28b0:	dd800617 	ldw	r22,24(sp)
    28b4:	dd400517 	ldw	r21,20(sp)
    28b8:	dd000417 	ldw	r20,16(sp)
    28bc:	dcc00317 	ldw	r19,12(sp)
    28c0:	dc800217 	ldw	r18,8(sp)
    28c4:	dc400117 	ldw	r17,4(sp)
    28c8:	dc000017 	ldw	r16,0(sp)
    28cc:	dec00904 	addi	sp,sp,36
    28d0:	f800283a 	ret
    28d4:	002f883a 	mov	r23,zero
    28d8:	003ff106 	br	28a0 <_fwalk_reent+0x8c>

000028dc <_fwalk>:
    28dc:	defff804 	addi	sp,sp,-32
    28e0:	dcc00315 	stw	r19,12(sp)
    28e4:	24c0b804 	addi	r19,r4,736
    28e8:	dd400515 	stw	r21,20(sp)
    28ec:	dfc00715 	stw	ra,28(sp)
    28f0:	dd800615 	stw	r22,24(sp)
    28f4:	dd000415 	stw	r20,16(sp)
    28f8:	dc800215 	stw	r18,8(sp)
    28fc:	dc400115 	stw	r17,4(sp)
    2900:	dc000015 	stw	r16,0(sp)
    2904:	282b883a 	mov	r21,r5
    2908:	00021380 	call	2138 <__sfp_lock_acquire>
    290c:	98001f26 	beq	r19,zero,298c <_fwalk+0xb0>
    2910:	002d883a 	mov	r22,zero
    2914:	9c800117 	ldw	r18,4(r19)
    2918:	9c000217 	ldw	r16,8(r19)
    291c:	90bfffc4 	addi	r2,r18,-1
    2920:	10000c16 	blt	r2,zero,2954 <_fwalk+0x78>
    2924:	0023883a 	mov	r17,zero
    2928:	053fffc4 	movi	r20,-1
    292c:	8080030f 	ldh	r2,12(r16)
    2930:	8c400044 	addi	r17,r17,1
    2934:	10000526 	beq	r2,zero,294c <_fwalk+0x70>
    2938:	8080038f 	ldh	r2,14(r16)
    293c:	8009883a 	mov	r4,r16
    2940:	15000226 	beq	r2,r20,294c <_fwalk+0x70>
    2944:	a83ee83a 	callr	r21
    2948:	b0acb03a 	or	r22,r22,r2
    294c:	84001704 	addi	r16,r16,92
    2950:	947ff61e 	bne	r18,r17,292c <_fwalk+0x50>
    2954:	9cc00017 	ldw	r19,0(r19)
    2958:	983fee1e 	bne	r19,zero,2914 <_fwalk+0x38>
    295c:	000213c0 	call	213c <__sfp_lock_release>
    2960:	b005883a 	mov	r2,r22
    2964:	dfc00717 	ldw	ra,28(sp)
    2968:	dd800617 	ldw	r22,24(sp)
    296c:	dd400517 	ldw	r21,20(sp)
    2970:	dd000417 	ldw	r20,16(sp)
    2974:	dcc00317 	ldw	r19,12(sp)
    2978:	dc800217 	ldw	r18,8(sp)
    297c:	dc400117 	ldw	r17,4(sp)
    2980:	dc000017 	ldw	r16,0(sp)
    2984:	dec00804 	addi	sp,sp,32
    2988:	f800283a 	ret
    298c:	002d883a 	mov	r22,zero
    2990:	003ff206 	br	295c <_fwalk+0x80>

00002994 <__smakebuf_r>:
    2994:	2880030b 	ldhu	r2,12(r5)
    2998:	deffed04 	addi	sp,sp,-76
    299c:	dc401015 	stw	r17,64(sp)
    29a0:	1080008c 	andi	r2,r2,2
    29a4:	dc000f15 	stw	r16,60(sp)
    29a8:	dfc01215 	stw	ra,72(sp)
    29ac:	dc801115 	stw	r18,68(sp)
    29b0:	2821883a 	mov	r16,r5
    29b4:	2023883a 	mov	r17,r4
    29b8:	10000b26 	beq	r2,zero,29e8 <__smakebuf_r+0x54>
    29bc:	28c010c4 	addi	r3,r5,67
    29c0:	00800044 	movi	r2,1
    29c4:	28800515 	stw	r2,20(r5)
    29c8:	28c00415 	stw	r3,16(r5)
    29cc:	28c00015 	stw	r3,0(r5)
    29d0:	dfc01217 	ldw	ra,72(sp)
    29d4:	dc801117 	ldw	r18,68(sp)
    29d8:	dc401017 	ldw	r17,64(sp)
    29dc:	dc000f17 	ldw	r16,60(sp)
    29e0:	dec01304 	addi	sp,sp,76
    29e4:	f800283a 	ret
    29e8:	2940038f 	ldh	r5,14(r5)
    29ec:	28002116 	blt	r5,zero,2a74 <__smakebuf_r+0xe0>
    29f0:	d80d883a 	mov	r6,sp
    29f4:	0002f180 	call	2f18 <_fstat_r>
    29f8:	10001e16 	blt	r2,zero,2a74 <__smakebuf_r+0xe0>
    29fc:	d8800117 	ldw	r2,4(sp)
    2a00:	00e00014 	movui	r3,32768
    2a04:	113c000c 	andi	r4,r2,61440
    2a08:	20c03126 	beq	r4,r3,2ad0 <__smakebuf_r+0x13c>
    2a0c:	8080030b 	ldhu	r2,12(r16)
    2a10:	00c80004 	movi	r3,8192
    2a14:	10820014 	ori	r2,r2,2048
    2a18:	8080030d 	sth	r2,12(r16)
    2a1c:	20c01e26 	beq	r4,r3,2a98 <__smakebuf_r+0x104>
    2a20:	04810004 	movi	r18,1024
    2a24:	8809883a 	mov	r4,r17
    2a28:	900b883a 	mov	r5,r18
    2a2c:	0000d6c0 	call	d6c <_malloc_r>
    2a30:	1009883a 	mov	r4,r2
    2a34:	10003126 	beq	r2,zero,2afc <__smakebuf_r+0x168>
    2a38:	80c0030b 	ldhu	r3,12(r16)
    2a3c:	00800034 	movhi	r2,0
    2a40:	10888b04 	addi	r2,r2,8748
    2a44:	88800f15 	stw	r2,60(r17)
    2a48:	18c02014 	ori	r3,r3,128
    2a4c:	84800515 	stw	r18,20(r16)
    2a50:	80c0030d 	sth	r3,12(r16)
    2a54:	81000415 	stw	r4,16(r16)
    2a58:	81000015 	stw	r4,0(r16)
    2a5c:	dfc01217 	ldw	ra,72(sp)
    2a60:	dc801117 	ldw	r18,68(sp)
    2a64:	dc401017 	ldw	r17,64(sp)
    2a68:	dc000f17 	ldw	r16,60(sp)
    2a6c:	dec01304 	addi	sp,sp,76
    2a70:	f800283a 	ret
    2a74:	80c0030b 	ldhu	r3,12(r16)
    2a78:	1880200c 	andi	r2,r3,128
    2a7c:	10000426 	beq	r2,zero,2a90 <__smakebuf_r+0xfc>
    2a80:	04801004 	movi	r18,64
    2a84:	18820014 	ori	r2,r3,2048
    2a88:	8080030d 	sth	r2,12(r16)
    2a8c:	003fe506 	br	2a24 <__smakebuf_r+0x90>
    2a90:	04810004 	movi	r18,1024
    2a94:	003ffb06 	br	2a84 <__smakebuf_r+0xf0>
    2a98:	8140038f 	ldh	r5,14(r16)
    2a9c:	8809883a 	mov	r4,r17
    2aa0:	0002f8c0 	call	2f8c <_isatty_r>
    2aa4:	103fde26 	beq	r2,zero,2a20 <__smakebuf_r+0x8c>
    2aa8:	8080030b 	ldhu	r2,12(r16)
    2aac:	80c010c4 	addi	r3,r16,67
    2ab0:	04810004 	movi	r18,1024
    2ab4:	10800054 	ori	r2,r2,1
    2ab8:	8080030d 	sth	r2,12(r16)
    2abc:	00800044 	movi	r2,1
    2ac0:	80c00415 	stw	r3,16(r16)
    2ac4:	80800515 	stw	r2,20(r16)
    2ac8:	80c00015 	stw	r3,0(r16)
    2acc:	003fd506 	br	2a24 <__smakebuf_r+0x90>
    2ad0:	80c00a17 	ldw	r3,40(r16)
    2ad4:	00800034 	movhi	r2,0
    2ad8:	108af204 	addi	r2,r2,11208
    2adc:	18bfcb1e 	bne	r3,r2,2a0c <__smakebuf_r+0x78>
    2ae0:	8080030b 	ldhu	r2,12(r16)
    2ae4:	00c10004 	movi	r3,1024
    2ae8:	1825883a 	mov	r18,r3
    2aec:	10c4b03a 	or	r2,r2,r3
    2af0:	8080030d 	sth	r2,12(r16)
    2af4:	80c01315 	stw	r3,76(r16)
    2af8:	003fca06 	br	2a24 <__smakebuf_r+0x90>
    2afc:	8100030b 	ldhu	r4,12(r16)
    2b00:	2080800c 	andi	r2,r4,512
    2b04:	103fb21e 	bne	r2,zero,29d0 <__smakebuf_r+0x3c>
    2b08:	80c010c4 	addi	r3,r16,67
    2b0c:	21000094 	ori	r4,r4,2
    2b10:	00800044 	movi	r2,1
    2b14:	80800515 	stw	r2,20(r16)
    2b18:	8100030d 	sth	r4,12(r16)
    2b1c:	80c00415 	stw	r3,16(r16)
    2b20:	80c00015 	stw	r3,0(r16)
    2b24:	003faa06 	br	29d0 <__smakebuf_r+0x3c>

00002b28 <memset>:
    2b28:	008000c4 	movi	r2,3
    2b2c:	29403fcc 	andi	r5,r5,255
    2b30:	2007883a 	mov	r3,r4
    2b34:	1180022e 	bgeu	r2,r6,2b40 <memset+0x18>
    2b38:	2084703a 	and	r2,r4,r2
    2b3c:	10000826 	beq	r2,zero,2b60 <memset+0x38>
    2b40:	30000526 	beq	r6,zero,2b58 <memset+0x30>
    2b44:	2805883a 	mov	r2,r5
    2b48:	30cd883a 	add	r6,r6,r3
    2b4c:	18800005 	stb	r2,0(r3)
    2b50:	18c00044 	addi	r3,r3,1
    2b54:	19bffd1e 	bne	r3,r6,2b4c <memset+0x24>
    2b58:	2005883a 	mov	r2,r4
    2b5c:	f800283a 	ret
    2b60:	2804923a 	slli	r2,r5,8
    2b64:	020003c4 	movi	r8,15
    2b68:	200f883a 	mov	r7,r4
    2b6c:	2884b03a 	or	r2,r5,r2
    2b70:	1006943a 	slli	r3,r2,16
    2b74:	10c6b03a 	or	r3,r2,r3
    2b78:	41800a2e 	bgeu	r8,r6,2ba4 <memset+0x7c>
    2b7c:	4005883a 	mov	r2,r8
    2b80:	31bffc04 	addi	r6,r6,-16
    2b84:	38c00015 	stw	r3,0(r7)
    2b88:	38c00115 	stw	r3,4(r7)
    2b8c:	38c00215 	stw	r3,8(r7)
    2b90:	38c00315 	stw	r3,12(r7)
    2b94:	39c00404 	addi	r7,r7,16
    2b98:	11bff936 	bltu	r2,r6,2b80 <memset+0x58>
    2b9c:	008000c4 	movi	r2,3
    2ba0:	1180052e 	bgeu	r2,r6,2bb8 <memset+0x90>
    2ba4:	31bfff04 	addi	r6,r6,-4
    2ba8:	008000c4 	movi	r2,3
    2bac:	38c00015 	stw	r3,0(r7)
    2bb0:	39c00104 	addi	r7,r7,4
    2bb4:	11bffb36 	bltu	r2,r6,2ba4 <memset+0x7c>
    2bb8:	3807883a 	mov	r3,r7
    2bbc:	003fe006 	br	2b40 <memset+0x18>

00002bc0 <__sclose>:
    2bc0:	2940038f 	ldh	r5,14(r5)
    2bc4:	0002d841 	jmpi	2d84 <_close_r>

00002bc8 <__sseek>:
    2bc8:	defffe04 	addi	sp,sp,-8
    2bcc:	dc000015 	stw	r16,0(sp)
    2bd0:	2821883a 	mov	r16,r5
    2bd4:	2940038f 	ldh	r5,14(r5)
    2bd8:	dfc00115 	stw	ra,4(sp)
    2bdc:	0002ffc0 	call	2ffc <_lseek_r>
    2be0:	1007883a 	mov	r3,r2
    2be4:	00bfffc4 	movi	r2,-1
    2be8:	18800926 	beq	r3,r2,2c10 <__sseek+0x48>
    2bec:	8080030b 	ldhu	r2,12(r16)
    2bf0:	80c01415 	stw	r3,80(r16)
    2bf4:	10840014 	ori	r2,r2,4096
    2bf8:	8080030d 	sth	r2,12(r16)
    2bfc:	1805883a 	mov	r2,r3
    2c00:	dfc00117 	ldw	ra,4(sp)
    2c04:	dc000017 	ldw	r16,0(sp)
    2c08:	dec00204 	addi	sp,sp,8
    2c0c:	f800283a 	ret
    2c10:	8080030b 	ldhu	r2,12(r16)
    2c14:	10bbffcc 	andi	r2,r2,61439
    2c18:	8080030d 	sth	r2,12(r16)
    2c1c:	1805883a 	mov	r2,r3
    2c20:	dfc00117 	ldw	ra,4(sp)
    2c24:	dc000017 	ldw	r16,0(sp)
    2c28:	dec00204 	addi	sp,sp,8
    2c2c:	f800283a 	ret

00002c30 <__swrite>:
    2c30:	2880030b 	ldhu	r2,12(r5)
    2c34:	defffb04 	addi	sp,sp,-20
    2c38:	dcc00315 	stw	r19,12(sp)
    2c3c:	1080400c 	andi	r2,r2,256
    2c40:	dc800215 	stw	r18,8(sp)
    2c44:	dc400115 	stw	r17,4(sp)
    2c48:	dc000015 	stw	r16,0(sp)
    2c4c:	3027883a 	mov	r19,r6
    2c50:	3825883a 	mov	r18,r7
    2c54:	dfc00415 	stw	ra,16(sp)
    2c58:	2821883a 	mov	r16,r5
    2c5c:	000d883a 	mov	r6,zero
    2c60:	01c00084 	movi	r7,2
    2c64:	2023883a 	mov	r17,r4
    2c68:	10000226 	beq	r2,zero,2c74 <__swrite+0x44>
    2c6c:	2940038f 	ldh	r5,14(r5)
    2c70:	0002ffc0 	call	2ffc <_lseek_r>
    2c74:	8080030b 	ldhu	r2,12(r16)
    2c78:	8140038f 	ldh	r5,14(r16)
    2c7c:	8809883a 	mov	r4,r17
    2c80:	10bbffcc 	andi	r2,r2,61439
    2c84:	980d883a 	mov	r6,r19
    2c88:	900f883a 	mov	r7,r18
    2c8c:	8080030d 	sth	r2,12(r16)
    2c90:	dfc00417 	ldw	ra,16(sp)
    2c94:	dcc00317 	ldw	r19,12(sp)
    2c98:	dc800217 	ldw	r18,8(sp)
    2c9c:	dc400117 	ldw	r17,4(sp)
    2ca0:	dc000017 	ldw	r16,0(sp)
    2ca4:	dec00504 	addi	sp,sp,20
    2ca8:	0002d0c1 	jmpi	2d0c <_write_r>

00002cac <__sread>:
    2cac:	defffe04 	addi	sp,sp,-8
    2cb0:	dc000015 	stw	r16,0(sp)
    2cb4:	2821883a 	mov	r16,r5
    2cb8:	2940038f 	ldh	r5,14(r5)
    2cbc:	dfc00115 	stw	ra,4(sp)
    2cc0:	00030740 	call	3074 <_read_r>
    2cc4:	1007883a 	mov	r3,r2
    2cc8:	10000816 	blt	r2,zero,2cec <__sread+0x40>
    2ccc:	80801417 	ldw	r2,80(r16)
    2cd0:	10c5883a 	add	r2,r2,r3
    2cd4:	80801415 	stw	r2,80(r16)
    2cd8:	1805883a 	mov	r2,r3
    2cdc:	dfc00117 	ldw	ra,4(sp)
    2ce0:	dc000017 	ldw	r16,0(sp)
    2ce4:	dec00204 	addi	sp,sp,8
    2ce8:	f800283a 	ret
    2cec:	8080030b 	ldhu	r2,12(r16)
    2cf0:	10bbffcc 	andi	r2,r2,61439
    2cf4:	8080030d 	sth	r2,12(r16)
    2cf8:	1805883a 	mov	r2,r3
    2cfc:	dfc00117 	ldw	ra,4(sp)
    2d00:	dc000017 	ldw	r16,0(sp)
    2d04:	dec00204 	addi	sp,sp,8
    2d08:	f800283a 	ret

00002d0c <_write_r>:
    2d0c:	defffd04 	addi	sp,sp,-12
    2d10:	dc000015 	stw	r16,0(sp)
    2d14:	04000074 	movhi	r16,1
    2d18:	8426f204 	addi	r16,r16,-25656
    2d1c:	dc400115 	stw	r17,4(sp)
    2d20:	80000015 	stw	zero,0(r16)
    2d24:	2023883a 	mov	r17,r4
    2d28:	2809883a 	mov	r4,r5
    2d2c:	300b883a 	mov	r5,r6
    2d30:	380d883a 	mov	r6,r7
    2d34:	dfc00215 	stw	ra,8(sp)
    2d38:	0003a780 	call	3a78 <write>
    2d3c:	1007883a 	mov	r3,r2
    2d40:	00bfffc4 	movi	r2,-1
    2d44:	18800626 	beq	r3,r2,2d60 <_write_r+0x54>
    2d48:	1805883a 	mov	r2,r3
    2d4c:	dfc00217 	ldw	ra,8(sp)
    2d50:	dc400117 	ldw	r17,4(sp)
    2d54:	dc000017 	ldw	r16,0(sp)
    2d58:	dec00304 	addi	sp,sp,12
    2d5c:	f800283a 	ret
    2d60:	80800017 	ldw	r2,0(r16)
    2d64:	103ff826 	beq	r2,zero,2d48 <_write_r+0x3c>
    2d68:	88800015 	stw	r2,0(r17)
    2d6c:	1805883a 	mov	r2,r3
    2d70:	dfc00217 	ldw	ra,8(sp)
    2d74:	dc400117 	ldw	r17,4(sp)
    2d78:	dc000017 	ldw	r16,0(sp)
    2d7c:	dec00304 	addi	sp,sp,12
    2d80:	f800283a 	ret

00002d84 <_close_r>:
    2d84:	defffd04 	addi	sp,sp,-12
    2d88:	dc000015 	stw	r16,0(sp)
    2d8c:	04000074 	movhi	r16,1
    2d90:	8426f204 	addi	r16,r16,-25656
    2d94:	dc400115 	stw	r17,4(sp)
    2d98:	80000015 	stw	zero,0(r16)
    2d9c:	2023883a 	mov	r17,r4
    2da0:	2809883a 	mov	r4,r5
    2da4:	dfc00215 	stw	ra,8(sp)
    2da8:	00030ec0 	call	30ec <close>
    2dac:	1007883a 	mov	r3,r2
    2db0:	00bfffc4 	movi	r2,-1
    2db4:	18800626 	beq	r3,r2,2dd0 <_close_r+0x4c>
    2db8:	1805883a 	mov	r2,r3
    2dbc:	dfc00217 	ldw	ra,8(sp)
    2dc0:	dc400117 	ldw	r17,4(sp)
    2dc4:	dc000017 	ldw	r16,0(sp)
    2dc8:	dec00304 	addi	sp,sp,12
    2dcc:	f800283a 	ret
    2dd0:	80800017 	ldw	r2,0(r16)
    2dd4:	103ff826 	beq	r2,zero,2db8 <_close_r+0x34>
    2dd8:	88800015 	stw	r2,0(r17)
    2ddc:	1805883a 	mov	r2,r3
    2de0:	dfc00217 	ldw	ra,8(sp)
    2de4:	dc400117 	ldw	r17,4(sp)
    2de8:	dc000017 	ldw	r16,0(sp)
    2dec:	dec00304 	addi	sp,sp,12
    2df0:	f800283a 	ret

00002df4 <_fclose_r>:
    2df4:	defffc04 	addi	sp,sp,-16
    2df8:	dc400115 	stw	r17,4(sp)
    2dfc:	dc000015 	stw	r16,0(sp)
    2e00:	dfc00315 	stw	ra,12(sp)
    2e04:	dc800215 	stw	r18,8(sp)
    2e08:	2821883a 	mov	r16,r5
    2e0c:	2023883a 	mov	r17,r4
    2e10:	28002926 	beq	r5,zero,2eb8 <_fclose_r+0xc4>
    2e14:	00021380 	call	2138 <__sfp_lock_acquire>
    2e18:	88000226 	beq	r17,zero,2e24 <_fclose_r+0x30>
    2e1c:	88800e17 	ldw	r2,56(r17)
    2e20:	10002d26 	beq	r2,zero,2ed8 <_fclose_r+0xe4>
    2e24:	8080030f 	ldh	r2,12(r16)
    2e28:	10002226 	beq	r2,zero,2eb4 <_fclose_r+0xc0>
    2e2c:	8809883a 	mov	r4,r17
    2e30:	800b883a 	mov	r5,r16
    2e34:	0001eb00 	call	1eb0 <_fflush_r>
    2e38:	1025883a 	mov	r18,r2
    2e3c:	80800b17 	ldw	r2,44(r16)
    2e40:	10000426 	beq	r2,zero,2e54 <_fclose_r+0x60>
    2e44:	81400717 	ldw	r5,28(r16)
    2e48:	8809883a 	mov	r4,r17
    2e4c:	103ee83a 	callr	r2
    2e50:	10002a16 	blt	r2,zero,2efc <_fclose_r+0x108>
    2e54:	8080030b 	ldhu	r2,12(r16)
    2e58:	1080200c 	andi	r2,r2,128
    2e5c:	1000231e 	bne	r2,zero,2eec <_fclose_r+0xf8>
    2e60:	81400c17 	ldw	r5,48(r16)
    2e64:	28000526 	beq	r5,zero,2e7c <_fclose_r+0x88>
    2e68:	80801004 	addi	r2,r16,64
    2e6c:	28800226 	beq	r5,r2,2e78 <_fclose_r+0x84>
    2e70:	8809883a 	mov	r4,r17
    2e74:	00025000 	call	2500 <_free_r>
    2e78:	80000c15 	stw	zero,48(r16)
    2e7c:	81401117 	ldw	r5,68(r16)
    2e80:	28000326 	beq	r5,zero,2e90 <_fclose_r+0x9c>
    2e84:	8809883a 	mov	r4,r17
    2e88:	00025000 	call	2500 <_free_r>
    2e8c:	80001115 	stw	zero,68(r16)
    2e90:	8000030d 	sth	zero,12(r16)
    2e94:	000213c0 	call	213c <__sfp_lock_release>
    2e98:	9005883a 	mov	r2,r18
    2e9c:	dfc00317 	ldw	ra,12(sp)
    2ea0:	dc800217 	ldw	r18,8(sp)
    2ea4:	dc400117 	ldw	r17,4(sp)
    2ea8:	dc000017 	ldw	r16,0(sp)
    2eac:	dec00404 	addi	sp,sp,16
    2eb0:	f800283a 	ret
    2eb4:	000213c0 	call	213c <__sfp_lock_release>
    2eb8:	0025883a 	mov	r18,zero
    2ebc:	9005883a 	mov	r2,r18
    2ec0:	dfc00317 	ldw	ra,12(sp)
    2ec4:	dc800217 	ldw	r18,8(sp)
    2ec8:	dc400117 	ldw	r17,4(sp)
    2ecc:	dc000017 	ldw	r16,0(sp)
    2ed0:	dec00404 	addi	sp,sp,16
    2ed4:	f800283a 	ret
    2ed8:	8809883a 	mov	r4,r17
    2edc:	00021480 	call	2148 <__sinit>
    2ee0:	8080030f 	ldh	r2,12(r16)
    2ee4:	103fd11e 	bne	r2,zero,2e2c <_fclose_r+0x38>
    2ee8:	003ff206 	br	2eb4 <_fclose_r+0xc0>
    2eec:	81400417 	ldw	r5,16(r16)
    2ef0:	8809883a 	mov	r4,r17
    2ef4:	00025000 	call	2500 <_free_r>
    2ef8:	003fd906 	br	2e60 <_fclose_r+0x6c>
    2efc:	04bfffc4 	movi	r18,-1
    2f00:	003fd406 	br	2e54 <_fclose_r+0x60>

00002f04 <fclose>:
    2f04:	00800034 	movhi	r2,0
    2f08:	109ff604 	addi	r2,r2,32728
    2f0c:	200b883a 	mov	r5,r4
    2f10:	11000017 	ldw	r4,0(r2)
    2f14:	0002df41 	jmpi	2df4 <_fclose_r>

00002f18 <_fstat_r>:
    2f18:	defffd04 	addi	sp,sp,-12
    2f1c:	dc000015 	stw	r16,0(sp)
    2f20:	04000074 	movhi	r16,1
    2f24:	8426f204 	addi	r16,r16,-25656
    2f28:	dc400115 	stw	r17,4(sp)
    2f2c:	80000015 	stw	zero,0(r16)
    2f30:	2023883a 	mov	r17,r4
    2f34:	2809883a 	mov	r4,r5
    2f38:	300b883a 	mov	r5,r6
    2f3c:	dfc00215 	stw	ra,8(sp)
    2f40:	00032780 	call	3278 <fstat>
    2f44:	1007883a 	mov	r3,r2
    2f48:	00bfffc4 	movi	r2,-1
    2f4c:	18800626 	beq	r3,r2,2f68 <_fstat_r+0x50>
    2f50:	1805883a 	mov	r2,r3
    2f54:	dfc00217 	ldw	ra,8(sp)
    2f58:	dc400117 	ldw	r17,4(sp)
    2f5c:	dc000017 	ldw	r16,0(sp)
    2f60:	dec00304 	addi	sp,sp,12
    2f64:	f800283a 	ret
    2f68:	80800017 	ldw	r2,0(r16)
    2f6c:	103ff826 	beq	r2,zero,2f50 <_fstat_r+0x38>
    2f70:	88800015 	stw	r2,0(r17)
    2f74:	1805883a 	mov	r2,r3
    2f78:	dfc00217 	ldw	ra,8(sp)
    2f7c:	dc400117 	ldw	r17,4(sp)
    2f80:	dc000017 	ldw	r16,0(sp)
    2f84:	dec00304 	addi	sp,sp,12
    2f88:	f800283a 	ret

00002f8c <_isatty_r>:
    2f8c:	defffd04 	addi	sp,sp,-12
    2f90:	dc000015 	stw	r16,0(sp)
    2f94:	04000074 	movhi	r16,1
    2f98:	8426f204 	addi	r16,r16,-25656
    2f9c:	dc400115 	stw	r17,4(sp)
    2fa0:	80000015 	stw	zero,0(r16)
    2fa4:	2023883a 	mov	r17,r4
    2fa8:	2809883a 	mov	r4,r5
    2fac:	dfc00215 	stw	ra,8(sp)
    2fb0:	00033b00 	call	33b0 <isatty>
    2fb4:	1007883a 	mov	r3,r2
    2fb8:	00bfffc4 	movi	r2,-1
    2fbc:	18800626 	beq	r3,r2,2fd8 <_isatty_r+0x4c>
    2fc0:	1805883a 	mov	r2,r3
    2fc4:	dfc00217 	ldw	ra,8(sp)
    2fc8:	dc400117 	ldw	r17,4(sp)
    2fcc:	dc000017 	ldw	r16,0(sp)
    2fd0:	dec00304 	addi	sp,sp,12
    2fd4:	f800283a 	ret
    2fd8:	80800017 	ldw	r2,0(r16)
    2fdc:	103ff826 	beq	r2,zero,2fc0 <_isatty_r+0x34>
    2fe0:	88800015 	stw	r2,0(r17)
    2fe4:	1805883a 	mov	r2,r3
    2fe8:	dfc00217 	ldw	ra,8(sp)
    2fec:	dc400117 	ldw	r17,4(sp)
    2ff0:	dc000017 	ldw	r16,0(sp)
    2ff4:	dec00304 	addi	sp,sp,12
    2ff8:	f800283a 	ret

00002ffc <_lseek_r>:
    2ffc:	defffd04 	addi	sp,sp,-12
    3000:	dc000015 	stw	r16,0(sp)
    3004:	04000074 	movhi	r16,1
    3008:	8426f204 	addi	r16,r16,-25656
    300c:	dc400115 	stw	r17,4(sp)
    3010:	80000015 	stw	zero,0(r16)
    3014:	2023883a 	mov	r17,r4
    3018:	2809883a 	mov	r4,r5
    301c:	300b883a 	mov	r5,r6
    3020:	380d883a 	mov	r6,r7
    3024:	dfc00215 	stw	ra,8(sp)
    3028:	00035c00 	call	35c0 <lseek>
    302c:	1007883a 	mov	r3,r2
    3030:	00bfffc4 	movi	r2,-1
    3034:	18800626 	beq	r3,r2,3050 <_lseek_r+0x54>
    3038:	1805883a 	mov	r2,r3
    303c:	dfc00217 	ldw	ra,8(sp)
    3040:	dc400117 	ldw	r17,4(sp)
    3044:	dc000017 	ldw	r16,0(sp)
    3048:	dec00304 	addi	sp,sp,12
    304c:	f800283a 	ret
    3050:	80800017 	ldw	r2,0(r16)
    3054:	103ff826 	beq	r2,zero,3038 <_lseek_r+0x3c>
    3058:	88800015 	stw	r2,0(r17)
    305c:	1805883a 	mov	r2,r3
    3060:	dfc00217 	ldw	ra,8(sp)
    3064:	dc400117 	ldw	r17,4(sp)
    3068:	dc000017 	ldw	r16,0(sp)
    306c:	dec00304 	addi	sp,sp,12
    3070:	f800283a 	ret

00003074 <_read_r>:
    3074:	defffd04 	addi	sp,sp,-12
    3078:	dc000015 	stw	r16,0(sp)
    307c:	04000074 	movhi	r16,1
    3080:	8426f204 	addi	r16,r16,-25656
    3084:	dc400115 	stw	r17,4(sp)
    3088:	80000015 	stw	zero,0(r16)
    308c:	2023883a 	mov	r17,r4
    3090:	2809883a 	mov	r4,r5
    3094:	300b883a 	mov	r5,r6
    3098:	380d883a 	mov	r6,r7
    309c:	dfc00215 	stw	ra,8(sp)
    30a0:	00037c00 	call	37c0 <read>
    30a4:	1007883a 	mov	r3,r2
    30a8:	00bfffc4 	movi	r2,-1
    30ac:	18800626 	beq	r3,r2,30c8 <_read_r+0x54>
    30b0:	1805883a 	mov	r2,r3
    30b4:	dfc00217 	ldw	ra,8(sp)
    30b8:	dc400117 	ldw	r17,4(sp)
    30bc:	dc000017 	ldw	r16,0(sp)
    30c0:	dec00304 	addi	sp,sp,12
    30c4:	f800283a 	ret
    30c8:	80800017 	ldw	r2,0(r16)
    30cc:	103ff826 	beq	r2,zero,30b0 <_read_r+0x3c>
    30d0:	88800015 	stw	r2,0(r17)
    30d4:	1805883a 	mov	r2,r3
    30d8:	dfc00217 	ldw	ra,8(sp)
    30dc:	dc400117 	ldw	r17,4(sp)
    30e0:	dc000017 	ldw	r16,0(sp)
    30e4:	dec00304 	addi	sp,sp,12
    30e8:	f800283a 	ret

000030ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30ec:	defff804 	addi	sp,sp,-32
    30f0:	dfc00715 	stw	ra,28(sp)
    30f4:	df000615 	stw	fp,24(sp)
    30f8:	df000604 	addi	fp,sp,24
    30fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3100:	e0bffc17 	ldw	r2,-16(fp)
    3104:	1004803a 	cmplt	r2,r2,zero
    3108:	1000091e 	bne	r2,zero,3130 <close+0x44>
    310c:	e13ffc17 	ldw	r4,-16(fp)
    3110:	01400304 	movi	r5,12
    3114:	00007700 	call	770 <__mulsi3>
    3118:	1007883a 	mov	r3,r2
    311c:	00800034 	movhi	r2,0
    3120:	109b2504 	addi	r2,r2,27796
    3124:	1887883a 	add	r3,r3,r2
    3128:	e0ffff15 	stw	r3,-4(fp)
    312c:	00000106 	br	3134 <close+0x48>
    3130:	e03fff15 	stw	zero,-4(fp)
    3134:	e0bfff17 	ldw	r2,-4(fp)
    3138:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    313c:	e0bffb17 	ldw	r2,-20(fp)
    3140:	1005003a 	cmpeq	r2,r2,zero
    3144:	10001d1e 	bne	r2,zero,31bc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3148:	e0bffb17 	ldw	r2,-20(fp)
    314c:	10800017 	ldw	r2,0(r2)
    3150:	10800417 	ldw	r2,16(r2)
    3154:	1005003a 	cmpeq	r2,r2,zero
    3158:	1000071e 	bne	r2,zero,3178 <close+0x8c>
    315c:	e0bffb17 	ldw	r2,-20(fp)
    3160:	10800017 	ldw	r2,0(r2)
    3164:	10800417 	ldw	r2,16(r2)
    3168:	e13ffb17 	ldw	r4,-20(fp)
    316c:	103ee83a 	callr	r2
    3170:	e0bffe15 	stw	r2,-8(fp)
    3174:	00000106 	br	317c <close+0x90>
    3178:	e03ffe15 	stw	zero,-8(fp)
    317c:	e0bffe17 	ldw	r2,-8(fp)
    3180:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3184:	e13ffc17 	ldw	r4,-16(fp)
    3188:	00039440 	call	3944 <alt_release_fd>
    if (rval < 0)
    318c:	e0bffa17 	ldw	r2,-24(fp)
    3190:	1004403a 	cmpge	r2,r2,zero
    3194:	1000071e 	bne	r2,zero,31b4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    3198:	00031ec0 	call	31ec <alt_get_errno>
    319c:	e0fffa17 	ldw	r3,-24(fp)
    31a0:	00c7c83a 	sub	r3,zero,r3
    31a4:	10c00015 	stw	r3,0(r2)
      return -1;
    31a8:	00bfffc4 	movi	r2,-1
    31ac:	e0bffd15 	stw	r2,-12(fp)
    31b0:	00000806 	br	31d4 <close+0xe8>
    }
    return 0;
    31b4:	e03ffd15 	stw	zero,-12(fp)
    31b8:	00000606 	br	31d4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    31bc:	00031ec0 	call	31ec <alt_get_errno>
    31c0:	1007883a 	mov	r3,r2
    31c4:	00801444 	movi	r2,81
    31c8:	18800015 	stw	r2,0(r3)
    return -1;
    31cc:	00bfffc4 	movi	r2,-1
    31d0:	e0bffd15 	stw	r2,-12(fp)
    31d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    31d8:	e037883a 	mov	sp,fp
    31dc:	dfc00117 	ldw	ra,4(sp)
    31e0:	df000017 	ldw	fp,0(sp)
    31e4:	dec00204 	addi	sp,sp,8
    31e8:	f800283a 	ret

000031ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31ec:	defffd04 	addi	sp,sp,-12
    31f0:	dfc00215 	stw	ra,8(sp)
    31f4:	df000115 	stw	fp,4(sp)
    31f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    31fc:	00800034 	movhi	r2,0
    3200:	109fff04 	addi	r2,r2,32764
    3204:	10800017 	ldw	r2,0(r2)
    3208:	1005003a 	cmpeq	r2,r2,zero
    320c:	1000061e 	bne	r2,zero,3228 <alt_get_errno+0x3c>
    3210:	00800034 	movhi	r2,0
    3214:	109fff04 	addi	r2,r2,32764
    3218:	10800017 	ldw	r2,0(r2)
    321c:	103ee83a 	callr	r2
    3220:	e0bfff15 	stw	r2,-4(fp)
    3224:	00000306 	br	3234 <alt_get_errno+0x48>
    3228:	00800074 	movhi	r2,1
    322c:	10a6f204 	addi	r2,r2,-25656
    3230:	e0bfff15 	stw	r2,-4(fp)
    3234:	e0bfff17 	ldw	r2,-4(fp)
}
    3238:	e037883a 	mov	sp,fp
    323c:	dfc00117 	ldw	ra,4(sp)
    3240:	df000017 	ldw	fp,0(sp)
    3244:	dec00204 	addi	sp,sp,8
    3248:	f800283a 	ret

0000324c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    324c:	defffc04 	addi	sp,sp,-16
    3250:	df000315 	stw	fp,12(sp)
    3254:	df000304 	addi	fp,sp,12
    3258:	e13ffd15 	stw	r4,-12(fp)
    325c:	e17ffe15 	stw	r5,-8(fp)
    3260:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3264:	e0bfff17 	ldw	r2,-4(fp)
}
    3268:	e037883a 	mov	sp,fp
    326c:	df000017 	ldw	fp,0(sp)
    3270:	dec00104 	addi	sp,sp,4
    3274:	f800283a 	ret

00003278 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3278:	defff904 	addi	sp,sp,-28
    327c:	dfc00615 	stw	ra,24(sp)
    3280:	df000515 	stw	fp,20(sp)
    3284:	df000504 	addi	fp,sp,20
    3288:	e13ffc15 	stw	r4,-16(fp)
    328c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3290:	e0bffc17 	ldw	r2,-16(fp)
    3294:	1004803a 	cmplt	r2,r2,zero
    3298:	1000091e 	bne	r2,zero,32c0 <fstat+0x48>
    329c:	e13ffc17 	ldw	r4,-16(fp)
    32a0:	01400304 	movi	r5,12
    32a4:	00007700 	call	770 <__mulsi3>
    32a8:	1007883a 	mov	r3,r2
    32ac:	00800034 	movhi	r2,0
    32b0:	109b2504 	addi	r2,r2,27796
    32b4:	1887883a 	add	r3,r3,r2
    32b8:	e0ffff15 	stw	r3,-4(fp)
    32bc:	00000106 	br	32c4 <fstat+0x4c>
    32c0:	e03fff15 	stw	zero,-4(fp)
    32c4:	e0bfff17 	ldw	r2,-4(fp)
    32c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    32cc:	e0bffb17 	ldw	r2,-20(fp)
    32d0:	1005003a 	cmpeq	r2,r2,zero
    32d4:	1000121e 	bne	r2,zero,3320 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    32d8:	e0bffb17 	ldw	r2,-20(fp)
    32dc:	10800017 	ldw	r2,0(r2)
    32e0:	10800817 	ldw	r2,32(r2)
    32e4:	1005003a 	cmpeq	r2,r2,zero
    32e8:	1000081e 	bne	r2,zero,330c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    32ec:	e0bffb17 	ldw	r2,-20(fp)
    32f0:	10800017 	ldw	r2,0(r2)
    32f4:	10800817 	ldw	r2,32(r2)
    32f8:	e13ffb17 	ldw	r4,-20(fp)
    32fc:	e17ffd17 	ldw	r5,-12(fp)
    3300:	103ee83a 	callr	r2
    3304:	e0bffe15 	stw	r2,-8(fp)
    3308:	00000b06 	br	3338 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    330c:	e0fffd17 	ldw	r3,-12(fp)
    3310:	00880004 	movi	r2,8192
    3314:	18800115 	stw	r2,4(r3)
      return 0;
    3318:	e03ffe15 	stw	zero,-8(fp)
    331c:	00000606 	br	3338 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3320:	00033500 	call	3350 <alt_get_errno>
    3324:	1007883a 	mov	r3,r2
    3328:	00801444 	movi	r2,81
    332c:	18800015 	stw	r2,0(r3)
    return -1;
    3330:	00bfffc4 	movi	r2,-1
    3334:	e0bffe15 	stw	r2,-8(fp)
    3338:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    333c:	e037883a 	mov	sp,fp
    3340:	dfc00117 	ldw	ra,4(sp)
    3344:	df000017 	ldw	fp,0(sp)
    3348:	dec00204 	addi	sp,sp,8
    334c:	f800283a 	ret

00003350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3350:	defffd04 	addi	sp,sp,-12
    3354:	dfc00215 	stw	ra,8(sp)
    3358:	df000115 	stw	fp,4(sp)
    335c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3360:	00800034 	movhi	r2,0
    3364:	109fff04 	addi	r2,r2,32764
    3368:	10800017 	ldw	r2,0(r2)
    336c:	1005003a 	cmpeq	r2,r2,zero
    3370:	1000061e 	bne	r2,zero,338c <alt_get_errno+0x3c>
    3374:	00800034 	movhi	r2,0
    3378:	109fff04 	addi	r2,r2,32764
    337c:	10800017 	ldw	r2,0(r2)
    3380:	103ee83a 	callr	r2
    3384:	e0bfff15 	stw	r2,-4(fp)
    3388:	00000306 	br	3398 <alt_get_errno+0x48>
    338c:	00800074 	movhi	r2,1
    3390:	10a6f204 	addi	r2,r2,-25656
    3394:	e0bfff15 	stw	r2,-4(fp)
    3398:	e0bfff17 	ldw	r2,-4(fp)
}
    339c:	e037883a 	mov	sp,fp
    33a0:	dfc00117 	ldw	ra,4(sp)
    33a4:	df000017 	ldw	fp,0(sp)
    33a8:	dec00204 	addi	sp,sp,8
    33ac:	f800283a 	ret

000033b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    33b0:	deffeb04 	addi	sp,sp,-84
    33b4:	dfc01415 	stw	ra,80(sp)
    33b8:	df001315 	stw	fp,76(sp)
    33bc:	df001304 	addi	fp,sp,76
    33c0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33c4:	e0bffd17 	ldw	r2,-12(fp)
    33c8:	1004803a 	cmplt	r2,r2,zero
    33cc:	1000091e 	bne	r2,zero,33f4 <isatty+0x44>
    33d0:	e13ffd17 	ldw	r4,-12(fp)
    33d4:	01400304 	movi	r5,12
    33d8:	00007700 	call	770 <__mulsi3>
    33dc:	1007883a 	mov	r3,r2
    33e0:	00800034 	movhi	r2,0
    33e4:	109b2504 	addi	r2,r2,27796
    33e8:	1887883a 	add	r3,r3,r2
    33ec:	e0ffff15 	stw	r3,-4(fp)
    33f0:	00000106 	br	33f8 <isatty+0x48>
    33f4:	e03fff15 	stw	zero,-4(fp)
    33f8:	e0bfff17 	ldw	r2,-4(fp)
    33fc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    3400:	e0bfed17 	ldw	r2,-76(fp)
    3404:	1005003a 	cmpeq	r2,r2,zero
    3408:	10000f1e 	bne	r2,zero,3448 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    340c:	e0bfed17 	ldw	r2,-76(fp)
    3410:	10800017 	ldw	r2,0(r2)
    3414:	10800817 	ldw	r2,32(r2)
    3418:	1004c03a 	cmpne	r2,r2,zero
    341c:	1000031e 	bne	r2,zero,342c <isatty+0x7c>
    {
      return 1;
    3420:	00800044 	movi	r2,1
    3424:	e0bffe15 	stw	r2,-8(fp)
    3428:	00000c06 	br	345c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    342c:	e17fee04 	addi	r5,fp,-72
    3430:	e13ffd17 	ldw	r4,-12(fp)
    3434:	00032780 	call	3278 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3438:	e0bfef17 	ldw	r2,-68(fp)
    343c:	10880020 	cmpeqi	r2,r2,8192
    3440:	e0bffe15 	stw	r2,-8(fp)
    3444:	00000506 	br	345c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3448:	00034740 	call	3474 <alt_get_errno>
    344c:	1007883a 	mov	r3,r2
    3450:	00801444 	movi	r2,81
    3454:	18800015 	stw	r2,0(r3)
    return 0;
    3458:	e03ffe15 	stw	zero,-8(fp)
    345c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    3460:	e037883a 	mov	sp,fp
    3464:	dfc00117 	ldw	ra,4(sp)
    3468:	df000017 	ldw	fp,0(sp)
    346c:	dec00204 	addi	sp,sp,8
    3470:	f800283a 	ret

00003474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3474:	defffd04 	addi	sp,sp,-12
    3478:	dfc00215 	stw	ra,8(sp)
    347c:	df000115 	stw	fp,4(sp)
    3480:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3484:	00800034 	movhi	r2,0
    3488:	109fff04 	addi	r2,r2,32764
    348c:	10800017 	ldw	r2,0(r2)
    3490:	1005003a 	cmpeq	r2,r2,zero
    3494:	1000061e 	bne	r2,zero,34b0 <alt_get_errno+0x3c>
    3498:	00800034 	movhi	r2,0
    349c:	109fff04 	addi	r2,r2,32764
    34a0:	10800017 	ldw	r2,0(r2)
    34a4:	103ee83a 	callr	r2
    34a8:	e0bfff15 	stw	r2,-4(fp)
    34ac:	00000306 	br	34bc <alt_get_errno+0x48>
    34b0:	00800074 	movhi	r2,1
    34b4:	10a6f204 	addi	r2,r2,-25656
    34b8:	e0bfff15 	stw	r2,-4(fp)
    34bc:	e0bfff17 	ldw	r2,-4(fp)
}
    34c0:	e037883a 	mov	sp,fp
    34c4:	dfc00117 	ldw	ra,4(sp)
    34c8:	df000017 	ldw	fp,0(sp)
    34cc:	dec00204 	addi	sp,sp,8
    34d0:	f800283a 	ret

000034d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    34d4:	defffe04 	addi	sp,sp,-8
    34d8:	dfc00115 	stw	ra,4(sp)
    34dc:	df000015 	stw	fp,0(sp)
    34e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    34e4:	01000074 	movhi	r4,1
    34e8:	21200404 	addi	r4,r4,-32752
    34ec:	01400034 	movhi	r5,0
    34f0:	29591904 	addi	r5,r5,25700
    34f4:	01800074 	movhi	r6,1
    34f8:	31a00404 	addi	r6,r6,-32752
    34fc:	00035540 	call	3554 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3500:	01000034 	movhi	r4,0
    3504:	21000804 	addi	r4,r4,32
    3508:	01400034 	movhi	r5,0
    350c:	29400804 	addi	r5,r5,32
    3510:	01800034 	movhi	r6,0
    3514:	31806e04 	addi	r6,r6,440
    3518:	00035540 	call	3554 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    351c:	01000034 	movhi	r4,0
    3520:	2118d304 	addi	r4,r4,25420
    3524:	01400034 	movhi	r5,0
    3528:	2958d304 	addi	r5,r5,25420
    352c:	01800034 	movhi	r6,0
    3530:	31991904 	addi	r6,r6,25700
    3534:	00035540 	call	3554 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3538:	00052f00 	call	52f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    353c:	000557c0 	call	557c <alt_icache_flush_all>
}
    3540:	e037883a 	mov	sp,fp
    3544:	dfc00117 	ldw	ra,4(sp)
    3548:	df000017 	ldw	fp,0(sp)
    354c:	dec00204 	addi	sp,sp,8
    3550:	f800283a 	ret

00003554 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3554:	defffc04 	addi	sp,sp,-16
    3558:	df000315 	stw	fp,12(sp)
    355c:	df000304 	addi	fp,sp,12
    3560:	e13ffd15 	stw	r4,-12(fp)
    3564:	e17ffe15 	stw	r5,-8(fp)
    3568:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    356c:	e0fffe17 	ldw	r3,-8(fp)
    3570:	e0bffd17 	ldw	r2,-12(fp)
    3574:	18800e26 	beq	r3,r2,35b0 <alt_load_section+0x5c>
  {
    while( to != end )
    3578:	00000a06 	br	35a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    357c:	e0bffd17 	ldw	r2,-12(fp)
    3580:	10c00017 	ldw	r3,0(r2)
    3584:	e0bffe17 	ldw	r2,-8(fp)
    3588:	10c00015 	stw	r3,0(r2)
    358c:	e0bffe17 	ldw	r2,-8(fp)
    3590:	10800104 	addi	r2,r2,4
    3594:	e0bffe15 	stw	r2,-8(fp)
    3598:	e0bffd17 	ldw	r2,-12(fp)
    359c:	10800104 	addi	r2,r2,4
    35a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    35a4:	e0fffe17 	ldw	r3,-8(fp)
    35a8:	e0bfff17 	ldw	r2,-4(fp)
    35ac:	18bff31e 	bne	r3,r2,357c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    35b0:	e037883a 	mov	sp,fp
    35b4:	df000017 	ldw	fp,0(sp)
    35b8:	dec00104 	addi	sp,sp,4
    35bc:	f800283a 	ret

000035c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    35c0:	defff804 	addi	sp,sp,-32
    35c4:	dfc00715 	stw	ra,28(sp)
    35c8:	df000615 	stw	fp,24(sp)
    35cc:	df000604 	addi	fp,sp,24
    35d0:	e13ffc15 	stw	r4,-16(fp)
    35d4:	e17ffd15 	stw	r5,-12(fp)
    35d8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    35dc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    35e0:	e0bffc17 	ldw	r2,-16(fp)
    35e4:	1004803a 	cmplt	r2,r2,zero
    35e8:	1000091e 	bne	r2,zero,3610 <lseek+0x50>
    35ec:	e13ffc17 	ldw	r4,-16(fp)
    35f0:	01400304 	movi	r5,12
    35f4:	00007700 	call	770 <__mulsi3>
    35f8:	1007883a 	mov	r3,r2
    35fc:	00800034 	movhi	r2,0
    3600:	109b2504 	addi	r2,r2,27796
    3604:	1887883a 	add	r3,r3,r2
    3608:	e0ffff15 	stw	r3,-4(fp)
    360c:	00000106 	br	3614 <lseek+0x54>
    3610:	e03fff15 	stw	zero,-4(fp)
    3614:	e0bfff17 	ldw	r2,-4(fp)
    3618:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    361c:	e0bffb17 	ldw	r2,-20(fp)
    3620:	1005003a 	cmpeq	r2,r2,zero
    3624:	1000111e 	bne	r2,zero,366c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3628:	e0bffb17 	ldw	r2,-20(fp)
    362c:	10800017 	ldw	r2,0(r2)
    3630:	10800717 	ldw	r2,28(r2)
    3634:	1005003a 	cmpeq	r2,r2,zero
    3638:	1000091e 	bne	r2,zero,3660 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    363c:	e0bffb17 	ldw	r2,-20(fp)
    3640:	10800017 	ldw	r2,0(r2)
    3644:	10800717 	ldw	r2,28(r2)
    3648:	e13ffb17 	ldw	r4,-20(fp)
    364c:	e17ffd17 	ldw	r5,-12(fp)
    3650:	e1bffe17 	ldw	r6,-8(fp)
    3654:	103ee83a 	callr	r2
    3658:	e0bffa15 	stw	r2,-24(fp)
    365c:	00000506 	br	3674 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3660:	00bfde84 	movi	r2,-134
    3664:	e0bffa15 	stw	r2,-24(fp)
    3668:	00000206 	br	3674 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    366c:	00bfebc4 	movi	r2,-81
    3670:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    3674:	e0bffa17 	ldw	r2,-24(fp)
    3678:	1004403a 	cmpge	r2,r2,zero
    367c:	1000071e 	bne	r2,zero,369c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    3680:	00036b40 	call	36b4 <alt_get_errno>
    3684:	1007883a 	mov	r3,r2
    3688:	e0bffa17 	ldw	r2,-24(fp)
    368c:	0085c83a 	sub	r2,zero,r2
    3690:	18800015 	stw	r2,0(r3)
    rc = -1;
    3694:	00bfffc4 	movi	r2,-1
    3698:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    369c:	e0bffa17 	ldw	r2,-24(fp)
}
    36a0:	e037883a 	mov	sp,fp
    36a4:	dfc00117 	ldw	ra,4(sp)
    36a8:	df000017 	ldw	fp,0(sp)
    36ac:	dec00204 	addi	sp,sp,8
    36b0:	f800283a 	ret

000036b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    36b4:	defffd04 	addi	sp,sp,-12
    36b8:	dfc00215 	stw	ra,8(sp)
    36bc:	df000115 	stw	fp,4(sp)
    36c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    36c4:	00800034 	movhi	r2,0
    36c8:	109fff04 	addi	r2,r2,32764
    36cc:	10800017 	ldw	r2,0(r2)
    36d0:	1005003a 	cmpeq	r2,r2,zero
    36d4:	1000061e 	bne	r2,zero,36f0 <alt_get_errno+0x3c>
    36d8:	00800034 	movhi	r2,0
    36dc:	109fff04 	addi	r2,r2,32764
    36e0:	10800017 	ldw	r2,0(r2)
    36e4:	103ee83a 	callr	r2
    36e8:	e0bfff15 	stw	r2,-4(fp)
    36ec:	00000306 	br	36fc <alt_get_errno+0x48>
    36f0:	00800074 	movhi	r2,1
    36f4:	10a6f204 	addi	r2,r2,-25656
    36f8:	e0bfff15 	stw	r2,-4(fp)
    36fc:	e0bfff17 	ldw	r2,-4(fp)
}
    3700:	e037883a 	mov	sp,fp
    3704:	dfc00117 	ldw	ra,4(sp)
    3708:	df000017 	ldw	fp,0(sp)
    370c:	dec00204 	addi	sp,sp,8
    3710:	f800283a 	ret

00003714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3714:	defffd04 	addi	sp,sp,-12
    3718:	dfc00215 	stw	ra,8(sp)
    371c:	df000115 	stw	fp,4(sp)
    3720:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3724:	0009883a 	mov	r4,zero
    3728:	0003bfc0 	call	3bfc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    372c:	0003c300 	call	3c30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3730:	01000034 	movhi	r4,0
    3734:	2118eb04 	addi	r4,r4,25516
    3738:	01400034 	movhi	r5,0
    373c:	2958eb04 	addi	r5,r5,25516
    3740:	01800034 	movhi	r6,0
    3744:	3198eb04 	addi	r6,r6,25516
    3748:	00056700 	call	5670 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    374c:	00054200 	call	5420 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3750:	01000034 	movhi	r4,0
    3754:	21152104 	addi	r4,r4,21636
    3758:	0005f400 	call	5f40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    375c:	d126fe17 	ldw	r4,-25608(gp)
    3760:	d166ff17 	ldw	r5,-25604(gp)
    3764:	d1a70017 	ldw	r6,-25600(gp)
    3768:	00007300 	call	730 <main>
    376c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3770:	01000044 	movi	r4,1
    3774:	00030ec0 	call	30ec <close>
  exit (result);
    3778:	e13fff17 	ldw	r4,-4(fp)
    377c:	0005f540 	call	5f54 <exit>

00003780 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3780:	defffe04 	addi	sp,sp,-8
    3784:	df000115 	stw	fp,4(sp)
    3788:	df000104 	addi	fp,sp,4
    378c:	e13fff15 	stw	r4,-4(fp)
}
    3790:	e037883a 	mov	sp,fp
    3794:	df000017 	ldw	fp,0(sp)
    3798:	dec00104 	addi	sp,sp,4
    379c:	f800283a 	ret

000037a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    37a0:	defffe04 	addi	sp,sp,-8
    37a4:	df000115 	stw	fp,4(sp)
    37a8:	df000104 	addi	fp,sp,4
    37ac:	e13fff15 	stw	r4,-4(fp)
}
    37b0:	e037883a 	mov	sp,fp
    37b4:	df000017 	ldw	fp,0(sp)
    37b8:	dec00104 	addi	sp,sp,4
    37bc:	f800283a 	ret

000037c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    37c0:	defff704 	addi	sp,sp,-36
    37c4:	dfc00815 	stw	ra,32(sp)
    37c8:	df000715 	stw	fp,28(sp)
    37cc:	df000704 	addi	fp,sp,28
    37d0:	e13ffb15 	stw	r4,-20(fp)
    37d4:	e17ffc15 	stw	r5,-16(fp)
    37d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    37dc:	e0bffb17 	ldw	r2,-20(fp)
    37e0:	1004803a 	cmplt	r2,r2,zero
    37e4:	1000091e 	bne	r2,zero,380c <read+0x4c>
    37e8:	e13ffb17 	ldw	r4,-20(fp)
    37ec:	01400304 	movi	r5,12
    37f0:	00007700 	call	770 <__mulsi3>
    37f4:	1007883a 	mov	r3,r2
    37f8:	00800034 	movhi	r2,0
    37fc:	109b2504 	addi	r2,r2,27796
    3800:	1887883a 	add	r3,r3,r2
    3804:	e0ffff15 	stw	r3,-4(fp)
    3808:	00000106 	br	3810 <read+0x50>
    380c:	e03fff15 	stw	zero,-4(fp)
    3810:	e0bfff17 	ldw	r2,-4(fp)
    3814:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3818:	e0bffa17 	ldw	r2,-24(fp)
    381c:	1005003a 	cmpeq	r2,r2,zero
    3820:	1000241e 	bne	r2,zero,38b4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3824:	e0bffa17 	ldw	r2,-24(fp)
    3828:	10800217 	ldw	r2,8(r2)
    382c:	108000cc 	andi	r2,r2,3
    3830:	10800060 	cmpeqi	r2,r2,1
    3834:	10001a1e 	bne	r2,zero,38a0 <read+0xe0>
    3838:	e0bffa17 	ldw	r2,-24(fp)
    383c:	10800017 	ldw	r2,0(r2)
    3840:	10800517 	ldw	r2,20(r2)
    3844:	1005003a 	cmpeq	r2,r2,zero
    3848:	1000151e 	bne	r2,zero,38a0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    384c:	e0bffa17 	ldw	r2,-24(fp)
    3850:	10800017 	ldw	r2,0(r2)
    3854:	10800517 	ldw	r2,20(r2)
    3858:	e17ffc17 	ldw	r5,-16(fp)
    385c:	e1bffd17 	ldw	r6,-12(fp)
    3860:	e13ffa17 	ldw	r4,-24(fp)
    3864:	103ee83a 	callr	r2
    3868:	e0bff915 	stw	r2,-28(fp)
    386c:	e0bff917 	ldw	r2,-28(fp)
    3870:	1004403a 	cmpge	r2,r2,zero
    3874:	1000071e 	bne	r2,zero,3894 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    3878:	00038e40 	call	38e4 <alt_get_errno>
    387c:	e0fff917 	ldw	r3,-28(fp)
    3880:	00c7c83a 	sub	r3,zero,r3
    3884:	10c00015 	stw	r3,0(r2)
          return -1;
    3888:	00bfffc4 	movi	r2,-1
    388c:	e0bffe15 	stw	r2,-8(fp)
    3890:	00000e06 	br	38cc <read+0x10c>
        }
        return rval;
    3894:	e0bff917 	ldw	r2,-28(fp)
    3898:	e0bffe15 	stw	r2,-8(fp)
    389c:	00000b06 	br	38cc <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    38a0:	00038e40 	call	38e4 <alt_get_errno>
    38a4:	1007883a 	mov	r3,r2
    38a8:	00800344 	movi	r2,13
    38ac:	18800015 	stw	r2,0(r3)
    38b0:	00000406 	br	38c4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    38b4:	00038e40 	call	38e4 <alt_get_errno>
    38b8:	1007883a 	mov	r3,r2
    38bc:	00801444 	movi	r2,81
    38c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    38c4:	00bfffc4 	movi	r2,-1
    38c8:	e0bffe15 	stw	r2,-8(fp)
    38cc:	e0bffe17 	ldw	r2,-8(fp)
}
    38d0:	e037883a 	mov	sp,fp
    38d4:	dfc00117 	ldw	ra,4(sp)
    38d8:	df000017 	ldw	fp,0(sp)
    38dc:	dec00204 	addi	sp,sp,8
    38e0:	f800283a 	ret

000038e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    38e4:	defffd04 	addi	sp,sp,-12
    38e8:	dfc00215 	stw	ra,8(sp)
    38ec:	df000115 	stw	fp,4(sp)
    38f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    38f4:	00800034 	movhi	r2,0
    38f8:	109fff04 	addi	r2,r2,32764
    38fc:	10800017 	ldw	r2,0(r2)
    3900:	1005003a 	cmpeq	r2,r2,zero
    3904:	1000061e 	bne	r2,zero,3920 <alt_get_errno+0x3c>
    3908:	00800034 	movhi	r2,0
    390c:	109fff04 	addi	r2,r2,32764
    3910:	10800017 	ldw	r2,0(r2)
    3914:	103ee83a 	callr	r2
    3918:	e0bfff15 	stw	r2,-4(fp)
    391c:	00000306 	br	392c <alt_get_errno+0x48>
    3920:	00800074 	movhi	r2,1
    3924:	10a6f204 	addi	r2,r2,-25656
    3928:	e0bfff15 	stw	r2,-4(fp)
    392c:	e0bfff17 	ldw	r2,-4(fp)
}
    3930:	e037883a 	mov	sp,fp
    3934:	dfc00117 	ldw	ra,4(sp)
    3938:	df000017 	ldw	fp,0(sp)
    393c:	dec00204 	addi	sp,sp,8
    3940:	f800283a 	ret

00003944 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3944:	defffc04 	addi	sp,sp,-16
    3948:	dfc00315 	stw	ra,12(sp)
    394c:	df000215 	stw	fp,8(sp)
    3950:	dc000115 	stw	r16,4(sp)
    3954:	df000104 	addi	fp,sp,4
    3958:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    395c:	e0bfff17 	ldw	r2,-4(fp)
    3960:	108000d0 	cmplti	r2,r2,3
    3964:	10000f1e 	bne	r2,zero,39a4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    3968:	e13fff17 	ldw	r4,-4(fp)
    396c:	04000034 	movhi	r16,0
    3970:	841b2504 	addi	r16,r16,27796
    3974:	01400304 	movi	r5,12
    3978:	00007700 	call	770 <__mulsi3>
    397c:	1405883a 	add	r2,r2,r16
    3980:	10800204 	addi	r2,r2,8
    3984:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3988:	e13fff17 	ldw	r4,-4(fp)
    398c:	04000034 	movhi	r16,0
    3990:	841b2504 	addi	r16,r16,27796
    3994:	01400304 	movi	r5,12
    3998:	00007700 	call	770 <__mulsi3>
    399c:	1405883a 	add	r2,r2,r16
    39a0:	10000015 	stw	zero,0(r2)
  }
}
    39a4:	e037883a 	mov	sp,fp
    39a8:	dfc00217 	ldw	ra,8(sp)
    39ac:	df000117 	ldw	fp,4(sp)
    39b0:	dc000017 	ldw	r16,0(sp)
    39b4:	dec00304 	addi	sp,sp,12
    39b8:	f800283a 	ret

000039bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    39bc:	defff804 	addi	sp,sp,-32
    39c0:	df000715 	stw	fp,28(sp)
    39c4:	df000704 	addi	fp,sp,28
    39c8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    39cc:	0005303a 	rdctl	r2,status
    39d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    39d4:	e0fffb17 	ldw	r3,-20(fp)
    39d8:	00bfff84 	movi	r2,-2
    39dc:	1884703a 	and	r2,r3,r2
    39e0:	1001703a 	wrctl	status,r2
  
  return context;
    39e4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    39e8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    39ec:	d0a00b17 	ldw	r2,-32724(gp)
    39f0:	10c000c4 	addi	r3,r2,3
    39f4:	00bfff04 	movi	r2,-4
    39f8:	1884703a 	and	r2,r3,r2
    39fc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3a00:	d0e00b17 	ldw	r3,-32724(gp)
    3a04:	e0bffe17 	ldw	r2,-8(fp)
    3a08:	1887883a 	add	r3,r3,r2
    3a0c:	00820034 	movhi	r2,2048
    3a10:	10800004 	addi	r2,r2,0
    3a14:	10c0072e 	bgeu	r2,r3,3a34 <sbrk+0x78>
    3a18:	e0bffd17 	ldw	r2,-12(fp)
    3a1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3a20:	e0bffa17 	ldw	r2,-24(fp)
    3a24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3a28:	00bfffc4 	movi	r2,-1
    3a2c:	e0bfff15 	stw	r2,-4(fp)
    3a30:	00000c06 	br	3a64 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    3a34:	d0a00b17 	ldw	r2,-32724(gp)
    3a38:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    3a3c:	d0e00b17 	ldw	r3,-32724(gp)
    3a40:	e0bffe17 	ldw	r2,-8(fp)
    3a44:	1885883a 	add	r2,r3,r2
    3a48:	d0a00b15 	stw	r2,-32724(gp)
    3a4c:	e0bffd17 	ldw	r2,-12(fp)
    3a50:	e0bff915 	stw	r2,-28(fp)
    3a54:	e0bff917 	ldw	r2,-28(fp)
    3a58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3a5c:	e0bffc17 	ldw	r2,-16(fp)
    3a60:	e0bfff15 	stw	r2,-4(fp)
    3a64:	e0bfff17 	ldw	r2,-4(fp)
} 
    3a68:	e037883a 	mov	sp,fp
    3a6c:	df000017 	ldw	fp,0(sp)
    3a70:	dec00104 	addi	sp,sp,4
    3a74:	f800283a 	ret

00003a78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3a78:	defff704 	addi	sp,sp,-36
    3a7c:	dfc00815 	stw	ra,32(sp)
    3a80:	df000715 	stw	fp,28(sp)
    3a84:	df000704 	addi	fp,sp,28
    3a88:	e13ffb15 	stw	r4,-20(fp)
    3a8c:	e17ffc15 	stw	r5,-16(fp)
    3a90:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a94:	e0bffb17 	ldw	r2,-20(fp)
    3a98:	1004803a 	cmplt	r2,r2,zero
    3a9c:	1000091e 	bne	r2,zero,3ac4 <write+0x4c>
    3aa0:	e13ffb17 	ldw	r4,-20(fp)
    3aa4:	01400304 	movi	r5,12
    3aa8:	00007700 	call	770 <__mulsi3>
    3aac:	1007883a 	mov	r3,r2
    3ab0:	00800034 	movhi	r2,0
    3ab4:	109b2504 	addi	r2,r2,27796
    3ab8:	1887883a 	add	r3,r3,r2
    3abc:	e0ffff15 	stw	r3,-4(fp)
    3ac0:	00000106 	br	3ac8 <write+0x50>
    3ac4:	e03fff15 	stw	zero,-4(fp)
    3ac8:	e0bfff17 	ldw	r2,-4(fp)
    3acc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3ad0:	e0bffa17 	ldw	r2,-24(fp)
    3ad4:	1005003a 	cmpeq	r2,r2,zero
    3ad8:	1000241e 	bne	r2,zero,3b6c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3adc:	e0bffa17 	ldw	r2,-24(fp)
    3ae0:	10800217 	ldw	r2,8(r2)
    3ae4:	108000cc 	andi	r2,r2,3
    3ae8:	1005003a 	cmpeq	r2,r2,zero
    3aec:	10001a1e 	bne	r2,zero,3b58 <write+0xe0>
    3af0:	e0bffa17 	ldw	r2,-24(fp)
    3af4:	10800017 	ldw	r2,0(r2)
    3af8:	10800617 	ldw	r2,24(r2)
    3afc:	1005003a 	cmpeq	r2,r2,zero
    3b00:	1000151e 	bne	r2,zero,3b58 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3b04:	e0bffa17 	ldw	r2,-24(fp)
    3b08:	10800017 	ldw	r2,0(r2)
    3b0c:	10800617 	ldw	r2,24(r2)
    3b10:	e17ffc17 	ldw	r5,-16(fp)
    3b14:	e1bffd17 	ldw	r6,-12(fp)
    3b18:	e13ffa17 	ldw	r4,-24(fp)
    3b1c:	103ee83a 	callr	r2
    3b20:	e0bff915 	stw	r2,-28(fp)
    3b24:	e0bff917 	ldw	r2,-28(fp)
    3b28:	1004403a 	cmpge	r2,r2,zero
    3b2c:	1000071e 	bne	r2,zero,3b4c <write+0xd4>
      {
        ALT_ERRNO = -rval;
    3b30:	0003b9c0 	call	3b9c <alt_get_errno>
    3b34:	e0fff917 	ldw	r3,-28(fp)
    3b38:	00c7c83a 	sub	r3,zero,r3
    3b3c:	10c00015 	stw	r3,0(r2)
        return -1;
    3b40:	00bfffc4 	movi	r2,-1
    3b44:	e0bffe15 	stw	r2,-8(fp)
    3b48:	00000e06 	br	3b84 <write+0x10c>
      }
      return rval;
    3b4c:	e0bff917 	ldw	r2,-28(fp)
    3b50:	e0bffe15 	stw	r2,-8(fp)
    3b54:	00000b06 	br	3b84 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3b58:	0003b9c0 	call	3b9c <alt_get_errno>
    3b5c:	1007883a 	mov	r3,r2
    3b60:	00800344 	movi	r2,13
    3b64:	18800015 	stw	r2,0(r3)
    3b68:	00000406 	br	3b7c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3b6c:	0003b9c0 	call	3b9c <alt_get_errno>
    3b70:	1007883a 	mov	r3,r2
    3b74:	00801444 	movi	r2,81
    3b78:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3b7c:	00bfffc4 	movi	r2,-1
    3b80:	e0bffe15 	stw	r2,-8(fp)
    3b84:	e0bffe17 	ldw	r2,-8(fp)
}
    3b88:	e037883a 	mov	sp,fp
    3b8c:	dfc00117 	ldw	ra,4(sp)
    3b90:	df000017 	ldw	fp,0(sp)
    3b94:	dec00204 	addi	sp,sp,8
    3b98:	f800283a 	ret

00003b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3b9c:	defffd04 	addi	sp,sp,-12
    3ba0:	dfc00215 	stw	ra,8(sp)
    3ba4:	df000115 	stw	fp,4(sp)
    3ba8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3bac:	00800034 	movhi	r2,0
    3bb0:	109fff04 	addi	r2,r2,32764
    3bb4:	10800017 	ldw	r2,0(r2)
    3bb8:	1005003a 	cmpeq	r2,r2,zero
    3bbc:	1000061e 	bne	r2,zero,3bd8 <alt_get_errno+0x3c>
    3bc0:	00800034 	movhi	r2,0
    3bc4:	109fff04 	addi	r2,r2,32764
    3bc8:	10800017 	ldw	r2,0(r2)
    3bcc:	103ee83a 	callr	r2
    3bd0:	e0bfff15 	stw	r2,-4(fp)
    3bd4:	00000306 	br	3be4 <alt_get_errno+0x48>
    3bd8:	00800074 	movhi	r2,1
    3bdc:	10a6f204 	addi	r2,r2,-25656
    3be0:	e0bfff15 	stw	r2,-4(fp)
    3be4:	e0bfff17 	ldw	r2,-4(fp)
}
    3be8:	e037883a 	mov	sp,fp
    3bec:	dfc00117 	ldw	ra,4(sp)
    3bf0:	df000017 	ldw	fp,0(sp)
    3bf4:	dec00204 	addi	sp,sp,8
    3bf8:	f800283a 	ret

00003bfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3bfc:	defffd04 	addi	sp,sp,-12
    3c00:	dfc00215 	stw	ra,8(sp)
    3c04:	df000115 	stw	fp,4(sp)
    3c08:	df000104 	addi	fp,sp,4
    3c0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    3c10:	0005d300 	call	5d30 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3c14:	00800044 	movi	r2,1
    3c18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3c1c:	e037883a 	mov	sp,fp
    3c20:	dfc00117 	ldw	ra,4(sp)
    3c24:	df000017 	ldw	fp,0(sp)
    3c28:	dec00204 	addi	sp,sp,8
    3c2c:	f800283a 	ret

00003c30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3c30:	defffe04 	addi	sp,sp,-8
    3c34:	dfc00115 	stw	ra,4(sp)
    3c38:	df000015 	stw	fp,0(sp)
    3c3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3c40:	01040034 	movhi	r4,4096
    3c44:	21080004 	addi	r4,r4,8192
    3c48:	000b883a 	mov	r5,zero
    3c4c:	000d883a 	mov	r6,zero
    3c50:	01c00204 	movi	r7,8
    3c54:	000484c0 	call	484c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3c58:	01000034 	movhi	r4,0
    3c5c:	211b8f04 	addi	r4,r4,28220
    3c60:	000b883a 	mov	r5,zero
    3c64:	01800204 	movi	r6,8
    3c68:	0003e780 	call	3e78 <altera_avalon_jtag_uart_init>
    3c6c:	01000034 	movhi	r4,0
    3c70:	211b8504 	addi	r4,r4,28180
    3c74:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    3c78:	01000034 	movhi	r4,0
    3c7c:	211f9d04 	addi	r4,r4,32372
    3c80:	00049840 	call	4984 <alt_up_character_lcd_init>
    3c84:	01000034 	movhi	r4,0
    3c88:	211f9d04 	addi	r4,r4,32372
    3c8c:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    3c90:	01000034 	movhi	r4,0
    3c94:	211fa804 	addi	r4,r4,32416
    3c98:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    3c9c:	01000034 	movhi	r4,0
    3ca0:	211fb304 	addi	r4,r4,32460
    3ca4:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    3ca8:	01000034 	movhi	r4,0
    3cac:	211fbe04 	addi	r4,r4,32504
    3cb0:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    3cb4:	01000034 	movhi	r4,0
    3cb8:	211fc904 	addi	r4,r4,32548
    3cbc:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    3cc0:	01000034 	movhi	r4,0
    3cc4:	211fd404 	addi	r4,r4,32592
    3cc8:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    3ccc:	01000034 	movhi	r4,0
    3cd0:	211fdf04 	addi	r4,r4,32636
    3cd4:	0003cf80 	call	3cf8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    3cd8:	01000034 	movhi	r4,0
    3cdc:	211fea04 	addi	r4,r4,32680
    3ce0:	0003cf80 	call	3cf8 <alt_dev_reg>
}
    3ce4:	e037883a 	mov	sp,fp
    3ce8:	dfc00117 	ldw	ra,4(sp)
    3cec:	df000017 	ldw	fp,0(sp)
    3cf0:	dec00204 	addi	sp,sp,8
    3cf4:	f800283a 	ret

00003cf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3cf8:	defffd04 	addi	sp,sp,-12
    3cfc:	dfc00215 	stw	ra,8(sp)
    3d00:	df000115 	stw	fp,4(sp)
    3d04:	df000104 	addi	fp,sp,4
    3d08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3d0c:	e13fff17 	ldw	r4,-4(fp)
    3d10:	01400034 	movhi	r5,0
    3d14:	295ffc04 	addi	r5,r5,32752
    3d18:	000530c0 	call	530c <alt_dev_llist_insert>
}
    3d1c:	e037883a 	mov	sp,fp
    3d20:	dfc00117 	ldw	ra,4(sp)
    3d24:	df000017 	ldw	fp,0(sp)
    3d28:	dec00204 	addi	sp,sp,8
    3d2c:	f800283a 	ret

00003d30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3d30:	defffa04 	addi	sp,sp,-24
    3d34:	dfc00515 	stw	ra,20(sp)
    3d38:	df000415 	stw	fp,16(sp)
    3d3c:	df000404 	addi	fp,sp,16
    3d40:	e13ffd15 	stw	r4,-12(fp)
    3d44:	e17ffe15 	stw	r5,-8(fp)
    3d48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3d4c:	e0bffd17 	ldw	r2,-12(fp)
    3d50:	10800017 	ldw	r2,0(r2)
    3d54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3d58:	e0bffc17 	ldw	r2,-16(fp)
    3d5c:	11000a04 	addi	r4,r2,40
    3d60:	e0bffd17 	ldw	r2,-12(fp)
    3d64:	11c00217 	ldw	r7,8(r2)
    3d68:	e17ffe17 	ldw	r5,-8(fp)
    3d6c:	e1bfff17 	ldw	r6,-4(fp)
    3d70:	00043740 	call	4374 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3d74:	e037883a 	mov	sp,fp
    3d78:	dfc00117 	ldw	ra,4(sp)
    3d7c:	df000017 	ldw	fp,0(sp)
    3d80:	dec00204 	addi	sp,sp,8
    3d84:	f800283a 	ret

00003d88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3d88:	defffa04 	addi	sp,sp,-24
    3d8c:	dfc00515 	stw	ra,20(sp)
    3d90:	df000415 	stw	fp,16(sp)
    3d94:	df000404 	addi	fp,sp,16
    3d98:	e13ffd15 	stw	r4,-12(fp)
    3d9c:	e17ffe15 	stw	r5,-8(fp)
    3da0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3da4:	e0bffd17 	ldw	r2,-12(fp)
    3da8:	10800017 	ldw	r2,0(r2)
    3dac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3db0:	e0bffc17 	ldw	r2,-16(fp)
    3db4:	11000a04 	addi	r4,r2,40
    3db8:	e0bffd17 	ldw	r2,-12(fp)
    3dbc:	11c00217 	ldw	r7,8(r2)
    3dc0:	e17ffe17 	ldw	r5,-8(fp)
    3dc4:	e1bfff17 	ldw	r6,-4(fp)
    3dc8:	00045980 	call	4598 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3dcc:	e037883a 	mov	sp,fp
    3dd0:	dfc00117 	ldw	ra,4(sp)
    3dd4:	df000017 	ldw	fp,0(sp)
    3dd8:	dec00204 	addi	sp,sp,8
    3ddc:	f800283a 	ret

00003de0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3de0:	defffc04 	addi	sp,sp,-16
    3de4:	dfc00315 	stw	ra,12(sp)
    3de8:	df000215 	stw	fp,8(sp)
    3dec:	df000204 	addi	fp,sp,8
    3df0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3df4:	e0bfff17 	ldw	r2,-4(fp)
    3df8:	10800017 	ldw	r2,0(r2)
    3dfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3e00:	e0bffe17 	ldw	r2,-8(fp)
    3e04:	11000a04 	addi	r4,r2,40
    3e08:	e0bfff17 	ldw	r2,-4(fp)
    3e0c:	11400217 	ldw	r5,8(r2)
    3e10:	000420c0 	call	420c <altera_avalon_jtag_uart_close>
}
    3e14:	e037883a 	mov	sp,fp
    3e18:	dfc00117 	ldw	ra,4(sp)
    3e1c:	df000017 	ldw	fp,0(sp)
    3e20:	dec00204 	addi	sp,sp,8
    3e24:	f800283a 	ret

00003e28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3e28:	defffa04 	addi	sp,sp,-24
    3e2c:	dfc00515 	stw	ra,20(sp)
    3e30:	df000415 	stw	fp,16(sp)
    3e34:	df000404 	addi	fp,sp,16
    3e38:	e13ffd15 	stw	r4,-12(fp)
    3e3c:	e17ffe15 	stw	r5,-8(fp)
    3e40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3e44:	e0bffd17 	ldw	r2,-12(fp)
    3e48:	10800017 	ldw	r2,0(r2)
    3e4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3e50:	e0bffc17 	ldw	r2,-16(fp)
    3e54:	11000a04 	addi	r4,r2,40
    3e58:	e17ffe17 	ldw	r5,-8(fp)
    3e5c:	e1bfff17 	ldw	r6,-4(fp)
    3e60:	00042800 	call	4280 <altera_avalon_jtag_uart_ioctl>
}
    3e64:	e037883a 	mov	sp,fp
    3e68:	dfc00117 	ldw	ra,4(sp)
    3e6c:	df000017 	ldw	fp,0(sp)
    3e70:	dec00204 	addi	sp,sp,8
    3e74:	f800283a 	ret

00003e78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3e78:	defffb04 	addi	sp,sp,-20
    3e7c:	dfc00415 	stw	ra,16(sp)
    3e80:	df000315 	stw	fp,12(sp)
    3e84:	df000304 	addi	fp,sp,12
    3e88:	e13ffd15 	stw	r4,-12(fp)
    3e8c:	e17ffe15 	stw	r5,-8(fp)
    3e90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3e94:	e0fffd17 	ldw	r3,-12(fp)
    3e98:	00800044 	movi	r2,1
    3e9c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3ea0:	e0bffd17 	ldw	r2,-12(fp)
    3ea4:	10800017 	ldw	r2,0(r2)
    3ea8:	11000104 	addi	r4,r2,4
    3eac:	e0bffd17 	ldw	r2,-12(fp)
    3eb0:	10800817 	ldw	r2,32(r2)
    3eb4:	1007883a 	mov	r3,r2
    3eb8:	2005883a 	mov	r2,r4
    3ebc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    3ec0:	e13fff17 	ldw	r4,-4(fp)
    3ec4:	e17ffd17 	ldw	r5,-12(fp)
    3ec8:	01800034 	movhi	r6,0
    3ecc:	318fcc04 	addi	r6,r6,16176
    3ed0:	00056e80 	call	56e8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3ed4:	e0bffd17 	ldw	r2,-12(fp)
    3ed8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3edc:	e0bffd17 	ldw	r2,-12(fp)
    3ee0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3ee4:	00800074 	movhi	r2,1
    3ee8:	10a6f704 	addi	r2,r2,-25636
    3eec:	10800017 	ldw	r2,0(r2)
    3ef0:	100b883a 	mov	r5,r2
    3ef4:	01800034 	movhi	r6,0
    3ef8:	31905704 	addi	r6,r6,16732
    3efc:	e1fffd17 	ldw	r7,-12(fp)
    3f00:	000519c0 	call	519c <alt_alarm_start>
    3f04:	1004403a 	cmpge	r2,r2,zero
    3f08:	1000041e 	bne	r2,zero,3f1c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3f0c:	e0fffd17 	ldw	r3,-12(fp)
    3f10:	00a00034 	movhi	r2,32768
    3f14:	10bfffc4 	addi	r2,r2,-1
    3f18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3f1c:	e037883a 	mov	sp,fp
    3f20:	dfc00117 	ldw	ra,4(sp)
    3f24:	df000017 	ldw	fp,0(sp)
    3f28:	dec00204 	addi	sp,sp,8
    3f2c:	f800283a 	ret

00003f30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3f30:	defff704 	addi	sp,sp,-36
    3f34:	df000815 	stw	fp,32(sp)
    3f38:	df000804 	addi	fp,sp,32
    3f3c:	e13ffe15 	stw	r4,-8(fp)
    3f40:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3f44:	e0bffe17 	ldw	r2,-8(fp)
    3f48:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    3f4c:	e0bffd17 	ldw	r2,-12(fp)
    3f50:	10800017 	ldw	r2,0(r2)
    3f54:	e0bffc15 	stw	r2,-16(fp)
    3f58:	00000006 	br	3f5c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3f5c:	e0bffc17 	ldw	r2,-16(fp)
    3f60:	10800104 	addi	r2,r2,4
    3f64:	10800037 	ldwio	r2,0(r2)
    3f68:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3f6c:	e0bffb17 	ldw	r2,-20(fp)
    3f70:	1080c00c 	andi	r2,r2,768
    3f74:	1005003a 	cmpeq	r2,r2,zero
    3f78:	1000741e 	bne	r2,zero,414c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3f7c:	e0bffb17 	ldw	r2,-20(fp)
    3f80:	1080400c 	andi	r2,r2,256
    3f84:	1005003a 	cmpeq	r2,r2,zero
    3f88:	1000351e 	bne	r2,zero,4060 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3f8c:	00800074 	movhi	r2,1
    3f90:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3f94:	e0bffd17 	ldw	r2,-12(fp)
    3f98:	10800a17 	ldw	r2,40(r2)
    3f9c:	10800044 	addi	r2,r2,1
    3fa0:	1081ffcc 	andi	r2,r2,2047
    3fa4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    3fa8:	e0bffd17 	ldw	r2,-12(fp)
    3fac:	10c00b17 	ldw	r3,44(r2)
    3fb0:	e0bff917 	ldw	r2,-28(fp)
    3fb4:	18801626 	beq	r3,r2,4010 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3fb8:	e0bffc17 	ldw	r2,-16(fp)
    3fbc:	10800037 	ldwio	r2,0(r2)
    3fc0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3fc4:	e0bffa17 	ldw	r2,-24(fp)
    3fc8:	10a0000c 	andi	r2,r2,32768
    3fcc:	1005003a 	cmpeq	r2,r2,zero
    3fd0:	10000f1e 	bne	r2,zero,4010 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3fd4:	e0bffd17 	ldw	r2,-12(fp)
    3fd8:	10c00a17 	ldw	r3,40(r2)
    3fdc:	e0bffa17 	ldw	r2,-24(fp)
    3fe0:	1009883a 	mov	r4,r2
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	1885883a 	add	r2,r3,r2
    3fec:	10800e04 	addi	r2,r2,56
    3ff0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3ff4:	e0bffd17 	ldw	r2,-12(fp)
    3ff8:	10800a17 	ldw	r2,40(r2)
    3ffc:	10800044 	addi	r2,r2,1
    4000:	10c1ffcc 	andi	r3,r2,2047
    4004:	e0bffd17 	ldw	r2,-12(fp)
    4008:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    400c:	003fe106 	br	3f94 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4010:	e0bffa17 	ldw	r2,-24(fp)
    4014:	10bfffec 	andhi	r2,r2,65535
    4018:	1005003a 	cmpeq	r2,r2,zero
    401c:	1000101e 	bne	r2,zero,4060 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4020:	e0bffd17 	ldw	r2,-12(fp)
    4024:	10c00817 	ldw	r3,32(r2)
    4028:	00bfff84 	movi	r2,-2
    402c:	1886703a 	and	r3,r3,r2
    4030:	e0bffd17 	ldw	r2,-12(fp)
    4034:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4038:	e0bffc17 	ldw	r2,-16(fp)
    403c:	11000104 	addi	r4,r2,4
    4040:	e0bffd17 	ldw	r2,-12(fp)
    4044:	10800817 	ldw	r2,32(r2)
    4048:	1007883a 	mov	r3,r2
    404c:	2005883a 	mov	r2,r4
    4050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4054:	e0bffc17 	ldw	r2,-16(fp)
    4058:	10800104 	addi	r2,r2,4
    405c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4060:	e0bffb17 	ldw	r2,-20(fp)
    4064:	1080800c 	andi	r2,r2,512
    4068:	1005003a 	cmpeq	r2,r2,zero
    406c:	103fbb1e 	bne	r2,zero,3f5c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4070:	e0bffb17 	ldw	r2,-20(fp)
    4074:	10bfffec 	andhi	r2,r2,65535
    4078:	1004d43a 	srli	r2,r2,16
    407c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4080:	00001506 	br	40d8 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4084:	e13ffc17 	ldw	r4,-16(fp)
    4088:	e0bffd17 	ldw	r2,-12(fp)
    408c:	10c00d17 	ldw	r3,52(r2)
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	1885883a 	add	r2,r3,r2
    4098:	10820e04 	addi	r2,r2,2104
    409c:	10800003 	ldbu	r2,0(r2)
    40a0:	10c03fcc 	andi	r3,r2,255
    40a4:	18c0201c 	xori	r3,r3,128
    40a8:	18ffe004 	addi	r3,r3,-128
    40ac:	2005883a 	mov	r2,r4
    40b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    40b4:	e0bffd17 	ldw	r2,-12(fp)
    40b8:	10800d17 	ldw	r2,52(r2)
    40bc:	10800044 	addi	r2,r2,1
    40c0:	10c1ffcc 	andi	r3,r2,2047
    40c4:	e0bffd17 	ldw	r2,-12(fp)
    40c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    40cc:	e0bff817 	ldw	r2,-32(fp)
    40d0:	10bfffc4 	addi	r2,r2,-1
    40d4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    40d8:	e0bff817 	ldw	r2,-32(fp)
    40dc:	1005003a 	cmpeq	r2,r2,zero
    40e0:	1000051e 	bne	r2,zero,40f8 <altera_avalon_jtag_uart_irq+0x1c8>
    40e4:	e0bffd17 	ldw	r2,-12(fp)
    40e8:	10c00d17 	ldw	r3,52(r2)
    40ec:	e0bffd17 	ldw	r2,-12(fp)
    40f0:	10800c17 	ldw	r2,48(r2)
    40f4:	18bfe31e 	bne	r3,r2,4084 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    40f8:	e0bff817 	ldw	r2,-32(fp)
    40fc:	1005003a 	cmpeq	r2,r2,zero
    4100:	103f961e 	bne	r2,zero,3f5c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4104:	e0bffd17 	ldw	r2,-12(fp)
    4108:	10c00817 	ldw	r3,32(r2)
    410c:	00bfff44 	movi	r2,-3
    4110:	1886703a 	and	r3,r3,r2
    4114:	e0bffd17 	ldw	r2,-12(fp)
    4118:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    411c:	e0bffd17 	ldw	r2,-12(fp)
    4120:	10800017 	ldw	r2,0(r2)
    4124:	11000104 	addi	r4,r2,4
    4128:	e0bffd17 	ldw	r2,-12(fp)
    412c:	10800817 	ldw	r2,32(r2)
    4130:	1007883a 	mov	r3,r2
    4134:	2005883a 	mov	r2,r4
    4138:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    413c:	e0bffc17 	ldw	r2,-16(fp)
    4140:	10800104 	addi	r2,r2,4
    4144:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4148:	003f8406 	br	3f5c <altera_avalon_jtag_uart_irq+0x2c>
}
    414c:	e037883a 	mov	sp,fp
    4150:	df000017 	ldw	fp,0(sp)
    4154:	dec00104 	addi	sp,sp,4
    4158:	f800283a 	ret

0000415c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    415c:	defffc04 	addi	sp,sp,-16
    4160:	df000315 	stw	fp,12(sp)
    4164:	df000304 	addi	fp,sp,12
    4168:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    416c:	e0bfff17 	ldw	r2,-4(fp)
    4170:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4174:	e0bffe17 	ldw	r2,-8(fp)
    4178:	10800017 	ldw	r2,0(r2)
    417c:	10800104 	addi	r2,r2,4
    4180:	10800037 	ldwio	r2,0(r2)
    4184:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4188:	e0bffd17 	ldw	r2,-12(fp)
    418c:	1081000c 	andi	r2,r2,1024
    4190:	1005003a 	cmpeq	r2,r2,zero
    4194:	10000c1e 	bne	r2,zero,41c8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4198:	e0bffe17 	ldw	r2,-8(fp)
    419c:	10800017 	ldw	r2,0(r2)
    41a0:	11000104 	addi	r4,r2,4
    41a4:	e0bffe17 	ldw	r2,-8(fp)
    41a8:	10800817 	ldw	r2,32(r2)
    41ac:	10810014 	ori	r2,r2,1024
    41b0:	1007883a 	mov	r3,r2
    41b4:	2005883a 	mov	r2,r4
    41b8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    41bc:	e0bffe17 	ldw	r2,-8(fp)
    41c0:	10000915 	stw	zero,36(r2)
    41c4:	00000a06 	br	41f0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    41c8:	e0bffe17 	ldw	r2,-8(fp)
    41cc:	10c00917 	ldw	r3,36(r2)
    41d0:	00a00034 	movhi	r2,32768
    41d4:	10bfff04 	addi	r2,r2,-4
    41d8:	10c00536 	bltu	r2,r3,41f0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	10800917 	ldw	r2,36(r2)
    41e4:	10c00044 	addi	r3,r2,1
    41e8:	e0bffe17 	ldw	r2,-8(fp)
    41ec:	10c00915 	stw	r3,36(r2)
    41f0:	00800074 	movhi	r2,1
    41f4:	10a6f704 	addi	r2,r2,-25636
    41f8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    41fc:	e037883a 	mov	sp,fp
    4200:	df000017 	ldw	fp,0(sp)
    4204:	dec00104 	addi	sp,sp,4
    4208:	f800283a 	ret

0000420c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    420c:	defffc04 	addi	sp,sp,-16
    4210:	df000315 	stw	fp,12(sp)
    4214:	df000304 	addi	fp,sp,12
    4218:	e13ffd15 	stw	r4,-12(fp)
    421c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4220:	00000706 	br	4240 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    4224:	e0bffe17 	ldw	r2,-8(fp)
    4228:	1090000c 	andi	r2,r2,16384
    422c:	1005003a 	cmpeq	r2,r2,zero
    4230:	1000031e 	bne	r2,zero,4240 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    4234:	00bffd44 	movi	r2,-11
    4238:	e0bfff15 	stw	r2,-4(fp)
    423c:	00000b06 	br	426c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4240:	e0bffd17 	ldw	r2,-12(fp)
    4244:	10c00d17 	ldw	r3,52(r2)
    4248:	e0bffd17 	ldw	r2,-12(fp)
    424c:	10800c17 	ldw	r2,48(r2)
    4250:	18800526 	beq	r3,r2,4268 <altera_avalon_jtag_uart_close+0x5c>
    4254:	e0bffd17 	ldw	r2,-12(fp)
    4258:	10c00917 	ldw	r3,36(r2)
    425c:	e0bffd17 	ldw	r2,-12(fp)
    4260:	10800117 	ldw	r2,4(r2)
    4264:	18bfef36 	bltu	r3,r2,4224 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4268:	e03fff15 	stw	zero,-4(fp)
    426c:	e0bfff17 	ldw	r2,-4(fp)
}
    4270:	e037883a 	mov	sp,fp
    4274:	df000017 	ldw	fp,0(sp)
    4278:	dec00104 	addi	sp,sp,4
    427c:	f800283a 	ret

00004280 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4280:	defff804 	addi	sp,sp,-32
    4284:	df000715 	stw	fp,28(sp)
    4288:	df000704 	addi	fp,sp,28
    428c:	e13ffb15 	stw	r4,-20(fp)
    4290:	e17ffc15 	stw	r5,-16(fp)
    4294:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4298:	00bff9c4 	movi	r2,-25
    429c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    42a0:	e0bffc17 	ldw	r2,-16(fp)
    42a4:	e0bfff15 	stw	r2,-4(fp)
    42a8:	e0ffff17 	ldw	r3,-4(fp)
    42ac:	189a8060 	cmpeqi	r2,r3,27137
    42b0:	1000041e 	bne	r2,zero,42c4 <altera_avalon_jtag_uart_ioctl+0x44>
    42b4:	e0ffff17 	ldw	r3,-4(fp)
    42b8:	189a80a0 	cmpeqi	r2,r3,27138
    42bc:	10001b1e 	bne	r2,zero,432c <altera_avalon_jtag_uart_ioctl+0xac>
    42c0:	00002706 	br	4360 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    42c4:	e0bffb17 	ldw	r2,-20(fp)
    42c8:	10c00117 	ldw	r3,4(r2)
    42cc:	00a00034 	movhi	r2,32768
    42d0:	10bfffc4 	addi	r2,r2,-1
    42d4:	18802226 	beq	r3,r2,4360 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    42d8:	e0bffd17 	ldw	r2,-12(fp)
    42dc:	10800017 	ldw	r2,0(r2)
    42e0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    42e4:	e0bff917 	ldw	r2,-28(fp)
    42e8:	10800090 	cmplti	r2,r2,2
    42ec:	1000071e 	bne	r2,zero,430c <altera_avalon_jtag_uart_ioctl+0x8c>
    42f0:	e0fff917 	ldw	r3,-28(fp)
    42f4:	00a00034 	movhi	r2,32768
    42f8:	10bfffc4 	addi	r2,r2,-1
    42fc:	18800326 	beq	r3,r2,430c <altera_avalon_jtag_uart_ioctl+0x8c>
    4300:	e0bff917 	ldw	r2,-28(fp)
    4304:	e0bffe15 	stw	r2,-8(fp)
    4308:	00000306 	br	4318 <altera_avalon_jtag_uart_ioctl+0x98>
    430c:	00e00034 	movhi	r3,32768
    4310:	18ffff84 	addi	r3,r3,-2
    4314:	e0fffe15 	stw	r3,-8(fp)
    4318:	e0bffb17 	ldw	r2,-20(fp)
    431c:	e0fffe17 	ldw	r3,-8(fp)
    4320:	10c00115 	stw	r3,4(r2)
      rc = 0;
    4324:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    4328:	00000d06 	br	4360 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    432c:	e0bffb17 	ldw	r2,-20(fp)
    4330:	10c00117 	ldw	r3,4(r2)
    4334:	00a00034 	movhi	r2,32768
    4338:	10bfffc4 	addi	r2,r2,-1
    433c:	18800826 	beq	r3,r2,4360 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4340:	e13ffd17 	ldw	r4,-12(fp)
    4344:	e0bffb17 	ldw	r2,-20(fp)
    4348:	10c00917 	ldw	r3,36(r2)
    434c:	e0bffb17 	ldw	r2,-20(fp)
    4350:	10800117 	ldw	r2,4(r2)
    4354:	1885803a 	cmpltu	r2,r3,r2
    4358:	20800015 	stw	r2,0(r4)
      rc = 0;
    435c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    4360:	e0bffa17 	ldw	r2,-24(fp)
}
    4364:	e037883a 	mov	sp,fp
    4368:	df000017 	ldw	fp,0(sp)
    436c:	dec00104 	addi	sp,sp,4
    4370:	f800283a 	ret

00004374 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4374:	defff204 	addi	sp,sp,-56
    4378:	dfc00d15 	stw	ra,52(sp)
    437c:	df000c15 	stw	fp,48(sp)
    4380:	df000c04 	addi	fp,sp,48
    4384:	e13ffb15 	stw	r4,-20(fp)
    4388:	e17ffc15 	stw	r5,-16(fp)
    438c:	e1bffd15 	stw	r6,-12(fp)
    4390:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    4394:	e0bffc17 	ldw	r2,-16(fp)
    4398:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    439c:	00004806 	br	44c0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    43a0:	e0bffb17 	ldw	r2,-20(fp)
    43a4:	10800a17 	ldw	r2,40(r2)
    43a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    43ac:	e0bffb17 	ldw	r2,-20(fp)
    43b0:	10800b17 	ldw	r2,44(r2)
    43b4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    43b8:	e0fff717 	ldw	r3,-36(fp)
    43bc:	e0bff617 	ldw	r2,-40(fp)
    43c0:	18800536 	bltu	r3,r2,43d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    43c4:	e0bff717 	ldw	r2,-36(fp)
    43c8:	e0fff617 	ldw	r3,-40(fp)
    43cc:	10c5c83a 	sub	r2,r2,r3
    43d0:	e0bff815 	stw	r2,-32(fp)
    43d4:	00000406 	br	43e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    43d8:	00820004 	movi	r2,2048
    43dc:	e0fff617 	ldw	r3,-40(fp)
    43e0:	10c5c83a 	sub	r2,r2,r3
    43e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    43e8:	e0bff817 	ldw	r2,-32(fp)
    43ec:	1005003a 	cmpeq	r2,r2,zero
    43f0:	10001f1e 	bne	r2,zero,4470 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    43f4:	e0fffd17 	ldw	r3,-12(fp)
    43f8:	e0bff817 	ldw	r2,-32(fp)
    43fc:	1880022e 	bgeu	r3,r2,4408 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    4400:	e0bffd17 	ldw	r2,-12(fp)
    4404:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4408:	e0bffb17 	ldw	r2,-20(fp)
    440c:	10c00e04 	addi	r3,r2,56
    4410:	e0bff617 	ldw	r2,-40(fp)
    4414:	1887883a 	add	r3,r3,r2
    4418:	e0bffa17 	ldw	r2,-24(fp)
    441c:	1009883a 	mov	r4,r2
    4420:	180b883a 	mov	r5,r3
    4424:	e1bff817 	ldw	r6,-32(fp)
    4428:	00015900 	call	1590 <memcpy>
      ptr   += n;
    442c:	e0fff817 	ldw	r3,-32(fp)
    4430:	e0bffa17 	ldw	r2,-24(fp)
    4434:	10c5883a 	add	r2,r2,r3
    4438:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    443c:	e0fffd17 	ldw	r3,-12(fp)
    4440:	e0bff817 	ldw	r2,-32(fp)
    4444:	1885c83a 	sub	r2,r3,r2
    4448:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    444c:	e0fff617 	ldw	r3,-40(fp)
    4450:	e0bff817 	ldw	r2,-32(fp)
    4454:	1885883a 	add	r2,r3,r2
    4458:	10c1ffcc 	andi	r3,r2,2047
    445c:	e0bffb17 	ldw	r2,-20(fp)
    4460:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4464:	e0bffd17 	ldw	r2,-12(fp)
    4468:	10800048 	cmpgei	r2,r2,1
    446c:	103fcc1e 	bne	r2,zero,43a0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    4470:	e0fffa17 	ldw	r3,-24(fp)
    4474:	e0bffc17 	ldw	r2,-16(fp)
    4478:	1880141e 	bne	r3,r2,44cc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	1090000c 	andi	r2,r2,16384
    4484:	1004c03a 	cmpne	r2,r2,zero
    4488:	1000101e 	bne	r2,zero,44cc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    448c:	e0bffb17 	ldw	r2,-20(fp)
    4490:	10c00a17 	ldw	r3,40(r2)
    4494:	e0bff717 	ldw	r2,-36(fp)
    4498:	1880051e 	bne	r3,r2,44b0 <altera_avalon_jtag_uart_read+0x13c>
    449c:	e0bffb17 	ldw	r2,-20(fp)
    44a0:	10c00917 	ldw	r3,36(r2)
    44a4:	e0bffb17 	ldw	r2,-20(fp)
    44a8:	10800117 	ldw	r2,4(r2)
    44ac:	18bff736 	bltu	r3,r2,448c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    44b0:	e0bffb17 	ldw	r2,-20(fp)
    44b4:	10c00a17 	ldw	r3,40(r2)
    44b8:	e0bff717 	ldw	r2,-36(fp)
    44bc:	18800326 	beq	r3,r2,44cc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    44c0:	e0bffd17 	ldw	r2,-12(fp)
    44c4:	10800048 	cmpgei	r2,r2,1
    44c8:	103fb51e 	bne	r2,zero,43a0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    44cc:	e0fffa17 	ldw	r3,-24(fp)
    44d0:	e0bffc17 	ldw	r2,-16(fp)
    44d4:	18801926 	beq	r3,r2,453c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    44d8:	0005303a 	rdctl	r2,status
    44dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    44e0:	e0fff517 	ldw	r3,-44(fp)
    44e4:	00bfff84 	movi	r2,-2
    44e8:	1884703a 	and	r2,r3,r2
    44ec:	1001703a 	wrctl	status,r2
  
  return context;
    44f0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    44f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    44f8:	e0bffb17 	ldw	r2,-20(fp)
    44fc:	10800817 	ldw	r2,32(r2)
    4500:	10c00054 	ori	r3,r2,1
    4504:	e0bffb17 	ldw	r2,-20(fp)
    4508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    450c:	e0bffb17 	ldw	r2,-20(fp)
    4510:	10800017 	ldw	r2,0(r2)
    4514:	11000104 	addi	r4,r2,4
    4518:	e0bffb17 	ldw	r2,-20(fp)
    451c:	10800817 	ldw	r2,32(r2)
    4520:	1007883a 	mov	r3,r2
    4524:	2005883a 	mov	r2,r4
    4528:	10c00035 	stwio	r3,0(r2)
    452c:	e0bff917 	ldw	r2,-28(fp)
    4530:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4534:	e0bff417 	ldw	r2,-48(fp)
    4538:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    453c:	e0fffa17 	ldw	r3,-24(fp)
    4540:	e0bffc17 	ldw	r2,-16(fp)
    4544:	18800526 	beq	r3,r2,455c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    4548:	e0fffa17 	ldw	r3,-24(fp)
    454c:	e0bffc17 	ldw	r2,-16(fp)
    4550:	1887c83a 	sub	r3,r3,r2
    4554:	e0ffff15 	stw	r3,-4(fp)
    4558:	00000906 	br	4580 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    455c:	e0bffe17 	ldw	r2,-8(fp)
    4560:	1090000c 	andi	r2,r2,16384
    4564:	1005003a 	cmpeq	r2,r2,zero
    4568:	1000031e 	bne	r2,zero,4578 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    456c:	00bffd44 	movi	r2,-11
    4570:	e0bfff15 	stw	r2,-4(fp)
    4574:	00000206 	br	4580 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4578:	00bffec4 	movi	r2,-5
    457c:	e0bfff15 	stw	r2,-4(fp)
    4580:	e0bfff17 	ldw	r2,-4(fp)
}
    4584:	e037883a 	mov	sp,fp
    4588:	dfc00117 	ldw	ra,4(sp)
    458c:	df000017 	ldw	fp,0(sp)
    4590:	dec00204 	addi	sp,sp,8
    4594:	f800283a 	ret

00004598 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4598:	defff204 	addi	sp,sp,-56
    459c:	dfc00d15 	stw	ra,52(sp)
    45a0:	df000c15 	stw	fp,48(sp)
    45a4:	df000c04 	addi	fp,sp,48
    45a8:	e13ffb15 	stw	r4,-20(fp)
    45ac:	e17ffc15 	stw	r5,-16(fp)
    45b0:	e1bffd15 	stw	r6,-12(fp)
    45b4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    45b8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    45c4:	00003a06 	br	46b0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    45c8:	e0bffb17 	ldw	r2,-20(fp)
    45cc:	10800c17 	ldw	r2,48(r2)
    45d0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    45d4:	e0bffb17 	ldw	r2,-20(fp)
    45d8:	10800d17 	ldw	r2,52(r2)
    45dc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    45e0:	e0fffa17 	ldw	r3,-24(fp)
    45e4:	e0bff917 	ldw	r2,-28(fp)
    45e8:	1880062e 	bgeu	r3,r2,4604 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    45ec:	e0fff917 	ldw	r3,-28(fp)
    45f0:	e0bffa17 	ldw	r2,-24(fp)
    45f4:	1885c83a 	sub	r2,r3,r2
    45f8:	10bfffc4 	addi	r2,r2,-1
    45fc:	e0bff815 	stw	r2,-32(fp)
    4600:	00000c06 	br	4634 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    4604:	e0bff917 	ldw	r2,-28(fp)
    4608:	1005003a 	cmpeq	r2,r2,zero
    460c:	1000051e 	bne	r2,zero,4624 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4610:	00820004 	movi	r2,2048
    4614:	e0fffa17 	ldw	r3,-24(fp)
    4618:	10c5c83a 	sub	r2,r2,r3
    461c:	e0bff815 	stw	r2,-32(fp)
    4620:	00000406 	br	4634 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4624:	0081ffc4 	movi	r2,2047
    4628:	e0fffa17 	ldw	r3,-24(fp)
    462c:	10c5c83a 	sub	r2,r2,r3
    4630:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    4634:	e0bff817 	ldw	r2,-32(fp)
    4638:	1005003a 	cmpeq	r2,r2,zero
    463c:	10001f1e 	bne	r2,zero,46bc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    4640:	e0fffd17 	ldw	r3,-12(fp)
    4644:	e0bff817 	ldw	r2,-32(fp)
    4648:	1880022e 	bgeu	r3,r2,4654 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    464c:	e0bffd17 	ldw	r2,-12(fp)
    4650:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4654:	e0bffb17 	ldw	r2,-20(fp)
    4658:	10c20e04 	addi	r3,r2,2104
    465c:	e0bffa17 	ldw	r2,-24(fp)
    4660:	1885883a 	add	r2,r3,r2
    4664:	e0fffc17 	ldw	r3,-16(fp)
    4668:	1009883a 	mov	r4,r2
    466c:	180b883a 	mov	r5,r3
    4670:	e1bff817 	ldw	r6,-32(fp)
    4674:	00015900 	call	1590 <memcpy>
      ptr   += n;
    4678:	e0fff817 	ldw	r3,-32(fp)
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	10c5883a 	add	r2,r2,r3
    4684:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    4688:	e0fffd17 	ldw	r3,-12(fp)
    468c:	e0bff817 	ldw	r2,-32(fp)
    4690:	1885c83a 	sub	r2,r3,r2
    4694:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4698:	e0fffa17 	ldw	r3,-24(fp)
    469c:	e0bff817 	ldw	r2,-32(fp)
    46a0:	1885883a 	add	r2,r3,r2
    46a4:	10c1ffcc 	andi	r3,r2,2047
    46a8:	e0bffb17 	ldw	r2,-20(fp)
    46ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    46b0:	e0bffd17 	ldw	r2,-12(fp)
    46b4:	10800048 	cmpgei	r2,r2,1
    46b8:	103fc31e 	bne	r2,zero,45c8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46bc:	0005303a 	rdctl	r2,status
    46c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46c4:	e0fff517 	ldw	r3,-44(fp)
    46c8:	00bfff84 	movi	r2,-2
    46cc:	1884703a 	and	r2,r3,r2
    46d0:	1001703a 	wrctl	status,r2
  
  return context;
    46d4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    46d8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    46dc:	e0bffb17 	ldw	r2,-20(fp)
    46e0:	10800817 	ldw	r2,32(r2)
    46e4:	10c00094 	ori	r3,r2,2
    46e8:	e0bffb17 	ldw	r2,-20(fp)
    46ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    46f0:	e0bffb17 	ldw	r2,-20(fp)
    46f4:	10800017 	ldw	r2,0(r2)
    46f8:	11000104 	addi	r4,r2,4
    46fc:	e0bffb17 	ldw	r2,-20(fp)
    4700:	10800817 	ldw	r2,32(r2)
    4704:	1007883a 	mov	r3,r2
    4708:	2005883a 	mov	r2,r4
    470c:	10c00035 	stwio	r3,0(r2)
    4710:	e0bff717 	ldw	r2,-36(fp)
    4714:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4718:	e0bff417 	ldw	r2,-48(fp)
    471c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4720:	e0bffd17 	ldw	r2,-12(fp)
    4724:	10800050 	cmplti	r2,r2,1
    4728:	1000111e 	bne	r2,zero,4770 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    472c:	e0bffe17 	ldw	r2,-8(fp)
    4730:	1090000c 	andi	r2,r2,16384
    4734:	1004c03a 	cmpne	r2,r2,zero
    4738:	1000101e 	bne	r2,zero,477c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    473c:	e0bffb17 	ldw	r2,-20(fp)
    4740:	10c00d17 	ldw	r3,52(r2)
    4744:	e0bff917 	ldw	r2,-28(fp)
    4748:	1880051e 	bne	r3,r2,4760 <altera_avalon_jtag_uart_write+0x1c8>
    474c:	e0bffb17 	ldw	r2,-20(fp)
    4750:	10c00917 	ldw	r3,36(r2)
    4754:	e0bffb17 	ldw	r2,-20(fp)
    4758:	10800117 	ldw	r2,4(r2)
    475c:	18bff736 	bltu	r3,r2,473c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    4760:	e0bffb17 	ldw	r2,-20(fp)
    4764:	10c00d17 	ldw	r3,52(r2)
    4768:	e0bff917 	ldw	r2,-28(fp)
    476c:	18800326 	beq	r3,r2,477c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    4770:	e0bffd17 	ldw	r2,-12(fp)
    4774:	10800048 	cmpgei	r2,r2,1
    4778:	103fcd1e 	bne	r2,zero,46b0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    477c:	e0fffc17 	ldw	r3,-16(fp)
    4780:	e0bff617 	ldw	r2,-40(fp)
    4784:	18800526 	beq	r3,r2,479c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    4788:	e0fffc17 	ldw	r3,-16(fp)
    478c:	e0bff617 	ldw	r2,-40(fp)
    4790:	1887c83a 	sub	r3,r3,r2
    4794:	e0ffff15 	stw	r3,-4(fp)
    4798:	00000906 	br	47c0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    479c:	e0bffe17 	ldw	r2,-8(fp)
    47a0:	1090000c 	andi	r2,r2,16384
    47a4:	1005003a 	cmpeq	r2,r2,zero
    47a8:	1000031e 	bne	r2,zero,47b8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    47ac:	00bffd44 	movi	r2,-11
    47b0:	e0bfff15 	stw	r2,-4(fp)
    47b4:	00000206 	br	47c0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    47b8:	00bffec4 	movi	r2,-5
    47bc:	e0bfff15 	stw	r2,-4(fp)
    47c0:	e0bfff17 	ldw	r2,-4(fp)
}
    47c4:	e037883a 	mov	sp,fp
    47c8:	dfc00117 	ldw	ra,4(sp)
    47cc:	df000017 	ldw	fp,0(sp)
    47d0:	dec00204 	addi	sp,sp,8
    47d4:	f800283a 	ret

000047d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    47d8:	defff904 	addi	sp,sp,-28
    47dc:	dfc00615 	stw	ra,24(sp)
    47e0:	df000515 	stw	fp,20(sp)
    47e4:	df000504 	addi	fp,sp,20
    47e8:	e13ffe15 	stw	r4,-8(fp)
    47ec:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    47f0:	e0bffe17 	ldw	r2,-8(fp)
    47f4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    47f8:	e0bffe17 	ldw	r2,-8(fp)
    47fc:	10800104 	addi	r2,r2,4
    4800:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4804:	0005303a 	rdctl	r2,status
    4808:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    480c:	e0fffc17 	ldw	r3,-16(fp)
    4810:	00bfff84 	movi	r2,-2
    4814:	1884703a 	and	r2,r3,r2
    4818:	1001703a 	wrctl	status,r2
  
  return context;
    481c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4820:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    4824:	0005c240 	call	5c24 <alt_tick>
    4828:	e0bffd17 	ldw	r2,-12(fp)
    482c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4830:	e0bffb17 	ldw	r2,-20(fp)
    4834:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4838:	e037883a 	mov	sp,fp
    483c:	dfc00117 	ldw	ra,4(sp)
    4840:	df000017 	ldw	fp,0(sp)
    4844:	dec00204 	addi	sp,sp,8
    4848:	f800283a 	ret

0000484c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    484c:	defff904 	addi	sp,sp,-28
    4850:	dfc00615 	stw	ra,24(sp)
    4854:	df000515 	stw	fp,20(sp)
    4858:	df000504 	addi	fp,sp,20
    485c:	e13ffc15 	stw	r4,-16(fp)
    4860:	e17ffd15 	stw	r5,-12(fp)
    4864:	e1bffe15 	stw	r6,-8(fp)
    4868:	e1ffff15 	stw	r7,-4(fp)
    486c:	e0bfff17 	ldw	r2,-4(fp)
    4870:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4874:	00800074 	movhi	r2,1
    4878:	10a6f704 	addi	r2,r2,-25636
    487c:	10800017 	ldw	r2,0(r2)
    4880:	1004c03a 	cmpne	r2,r2,zero
    4884:	1000041e 	bne	r2,zero,4898 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4888:	00c00074 	movhi	r3,1
    488c:	18e6f704 	addi	r3,r3,-25636
    4890:	e0bffb17 	ldw	r2,-20(fp)
    4894:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4898:	e0bffc17 	ldw	r2,-16(fp)
    489c:	10800104 	addi	r2,r2,4
    48a0:	1007883a 	mov	r3,r2
    48a4:	008001c4 	movi	r2,7
    48a8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    48ac:	e13ffe17 	ldw	r4,-8(fp)
    48b0:	e17ffc17 	ldw	r5,-16(fp)
    48b4:	01800034 	movhi	r6,0
    48b8:	3191f604 	addi	r6,r6,18392
    48bc:	00056e80 	call	56e8 <alt_irq_register>
#endif  
}
    48c0:	e037883a 	mov	sp,fp
    48c4:	dfc00117 	ldw	ra,4(sp)
    48c8:	df000017 	ldw	fp,0(sp)
    48cc:	dec00204 	addi	sp,sp,8
    48d0:	f800283a 	ret

000048d4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    48d4:	defffc04 	addi	sp,sp,-16
    48d8:	df000315 	stw	fp,12(sp)
    48dc:	df000304 	addi	fp,sp,12
    48e0:	e13ffe15 	stw	r4,-8(fp)
    48e4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    48e8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    48ec:	e0bfff17 	ldw	r2,-4(fp)
    48f0:	1004c03a 	cmpne	r2,r2,zero
    48f4:	1000061e 	bne	r2,zero,4910 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    48f8:	e0bffe17 	ldw	r2,-8(fp)
    48fc:	1007883a 	mov	r3,r2
    4900:	e0bffd03 	ldbu	r2,-12(fp)
    4904:	10c4b03a 	or	r2,r2,r3
    4908:	e0bffd05 	stb	r2,-12(fp)
    490c:	00000806 	br	4930 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    4910:	e0bffe17 	ldw	r2,-8(fp)
    4914:	1007883a 	mov	r3,r2
    4918:	e0bffd03 	ldbu	r2,-12(fp)
    491c:	10c4b03a 	or	r2,r2,r3
    4920:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    4924:	e0bffd03 	ldbu	r2,-12(fp)
    4928:	10801014 	ori	r2,r2,64
    492c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    4930:	e0fffd03 	ldbu	r3,-12(fp)
    4934:	00bfe004 	movi	r2,-128
    4938:	1884b03a 	or	r2,r3,r2
    493c:	10803fcc 	andi	r2,r2,255
}
    4940:	e037883a 	mov	sp,fp
    4944:	df000017 	ldw	fp,0(sp)
    4948:	dec00104 	addi	sp,sp,4
    494c:	f800283a 	ret

00004950 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    4950:	defffd04 	addi	sp,sp,-12
    4954:	df000215 	stw	fp,8(sp)
    4958:	df000204 	addi	fp,sp,8
    495c:	e13ffe15 	stw	r4,-8(fp)
    4960:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4964:	e0bffe17 	ldw	r2,-8(fp)
    4968:	10800a17 	ldw	r2,40(r2)
    496c:	e0ffff03 	ldbu	r3,-4(fp)
    4970:	10c00025 	stbio	r3,0(r2)
}
    4974:	e037883a 	mov	sp,fp
    4978:	df000017 	ldw	fp,0(sp)
    497c:	dec00104 	addi	sp,sp,4
    4980:	f800283a 	ret

00004984 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    4984:	defffe04 	addi	sp,sp,-8
    4988:	df000115 	stw	fp,4(sp)
    498c:	df000104 	addi	fp,sp,4
    4990:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4994:	e0bfff17 	ldw	r2,-4(fp)
    4998:	10800a17 	ldw	r2,40(r2)
    499c:	1007883a 	mov	r3,r2
    49a0:	00800044 	movi	r2,1
    49a4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    49a8:	e037883a 	mov	sp,fp
    49ac:	df000017 	ldw	fp,0(sp)
    49b0:	dec00104 	addi	sp,sp,4
    49b4:	f800283a 	ret

000049b8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    49b8:	defffc04 	addi	sp,sp,-16
    49bc:	dfc00315 	stw	ra,12(sp)
    49c0:	df000215 	stw	fp,8(sp)
    49c4:	df000204 	addi	fp,sp,8
    49c8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    49cc:	e13fff17 	ldw	r4,-4(fp)
    49d0:	01400034 	movhi	r5,0
    49d4:	295ffc04 	addi	r5,r5,32752
    49d8:	00054e80 	call	54e8 <alt_find_dev>
    49dc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    49e0:	e0bffe17 	ldw	r2,-8(fp)
}
    49e4:	e037883a 	mov	sp,fp
    49e8:	dfc00117 	ldw	ra,4(sp)
    49ec:	df000017 	ldw	fp,0(sp)
    49f0:	dec00204 	addi	sp,sp,8
    49f4:	f800283a 	ret

000049f8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    49f8:	defffb04 	addi	sp,sp,-20
    49fc:	df000415 	stw	fp,16(sp)
    4a00:	df000404 	addi	fp,sp,16
    4a04:	e13ffd15 	stw	r4,-12(fp)
    4a08:	e17ffe15 	stw	r5,-8(fp)
    4a0c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    4a10:	e03ffc15 	stw	zero,-16(fp)
    4a14:	00000f06 	br	4a54 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    4a18:	e0bffd17 	ldw	r2,-12(fp)
    4a1c:	10800a17 	ldw	r2,40(r2)
    4a20:	11000044 	addi	r4,r2,1
    4a24:	e0fffc17 	ldw	r3,-16(fp)
    4a28:	e0bffe17 	ldw	r2,-8(fp)
    4a2c:	1885883a 	add	r2,r3,r2
    4a30:	10800003 	ldbu	r2,0(r2)
    4a34:	10c03fcc 	andi	r3,r2,255
    4a38:	18c0201c 	xori	r3,r3,128
    4a3c:	18ffe004 	addi	r3,r3,-128
    4a40:	2005883a 	mov	r2,r4
    4a44:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    4a48:	e0bffc17 	ldw	r2,-16(fp)
    4a4c:	10800044 	addi	r2,r2,1
    4a50:	e0bffc15 	stw	r2,-16(fp)
    4a54:	e0fffc17 	ldw	r3,-16(fp)
    4a58:	e0bfff17 	ldw	r2,-4(fp)
    4a5c:	18bfee36 	bltu	r3,r2,4a18 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    4a60:	e037883a 	mov	sp,fp
    4a64:	df000017 	ldw	fp,0(sp)
    4a68:	dec00104 	addi	sp,sp,4
    4a6c:	f800283a 	ret

00004a70 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    4a70:	defffd04 	addi	sp,sp,-12
    4a74:	df000215 	stw	fp,8(sp)
    4a78:	df000204 	addi	fp,sp,8
    4a7c:	e13ffe15 	stw	r4,-8(fp)
    4a80:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    4a84:	00000d06 	br	4abc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    4a88:	e0bffe17 	ldw	r2,-8(fp)
    4a8c:	10800a17 	ldw	r2,40(r2)
    4a90:	11000044 	addi	r4,r2,1
    4a94:	e0bfff17 	ldw	r2,-4(fp)
    4a98:	10800003 	ldbu	r2,0(r2)
    4a9c:	10c03fcc 	andi	r3,r2,255
    4aa0:	18c0201c 	xori	r3,r3,128
    4aa4:	18ffe004 	addi	r3,r3,-128
    4aa8:	2005883a 	mov	r2,r4
    4aac:	10c00025 	stbio	r3,0(r2)
		++ptr;
    4ab0:	e0bfff17 	ldw	r2,-4(fp)
    4ab4:	10800044 	addi	r2,r2,1
    4ab8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    4abc:	e0bfff17 	ldw	r2,-4(fp)
    4ac0:	10800003 	ldbu	r2,0(r2)
    4ac4:	10803fcc 	andi	r2,r2,255
    4ac8:	1080201c 	xori	r2,r2,128
    4acc:	10bfe004 	addi	r2,r2,-128
    4ad0:	1004c03a 	cmpne	r2,r2,zero
    4ad4:	103fec1e 	bne	r2,zero,4a88 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    4ad8:	e037883a 	mov	sp,fp
    4adc:	df000017 	ldw	fp,0(sp)
    4ae0:	dec00104 	addi	sp,sp,4
    4ae4:	f800283a 	ret

00004ae8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    4ae8:	defffb04 	addi	sp,sp,-20
    4aec:	dfc00415 	stw	ra,16(sp)
    4af0:	df000315 	stw	fp,12(sp)
    4af4:	df000304 	addi	fp,sp,12
    4af8:	e13ffd15 	stw	r4,-12(fp)
    4afc:	e17ffe15 	stw	r5,-8(fp)
    4b00:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    4b04:	e0bffd17 	ldw	r2,-12(fp)
    4b08:	10800017 	ldw	r2,0(r2)
    4b0c:	1009883a 	mov	r4,r2
    4b10:	e1bfff17 	ldw	r6,-4(fp)
    4b14:	e17ffe17 	ldw	r5,-8(fp)
    4b18:	00049f80 	call	49f8 <alt_up_character_lcd_write>
	return 0;
    4b1c:	0005883a 	mov	r2,zero
}
    4b20:	e037883a 	mov	sp,fp
    4b24:	dfc00117 	ldw	ra,4(sp)
    4b28:	df000017 	ldw	fp,0(sp)
    4b2c:	dec00204 	addi	sp,sp,8
    4b30:	f800283a 	ret

00004b34 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4b34:	defff904 	addi	sp,sp,-28
    4b38:	dfc00615 	stw	ra,24(sp)
    4b3c:	df000515 	stw	fp,20(sp)
    4b40:	df000504 	addi	fp,sp,20
    4b44:	e13ffc15 	stw	r4,-16(fp)
    4b48:	e17ffd15 	stw	r5,-12(fp)
    4b4c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4b50:	e0bffd17 	ldw	r2,-12(fp)
    4b54:	10800a28 	cmpgeui	r2,r2,40
    4b58:	1000031e 	bne	r2,zero,4b68 <alt_up_character_lcd_set_cursor_pos+0x34>
    4b5c:	e0bffe17 	ldw	r2,-8(fp)
    4b60:	108000b0 	cmpltui	r2,r2,2
    4b64:	1000031e 	bne	r2,zero,4b74 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    4b68:	00bfffc4 	movi	r2,-1
    4b6c:	e0bfff15 	stw	r2,-4(fp)
    4b70:	00000806 	br	4b94 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4b74:	e13ffd17 	ldw	r4,-12(fp)
    4b78:	e17ffe17 	ldw	r5,-8(fp)
    4b7c:	00048d40 	call	48d4 <get_DDRAM_addr>
    4b80:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    4b84:	e17ffb03 	ldbu	r5,-20(fp)
    4b88:	e13ffc17 	ldw	r4,-16(fp)
    4b8c:	00049500 	call	4950 <alt_up_character_lcd_send_cmd>
	return 0;
    4b90:	e03fff15 	stw	zero,-4(fp)
    4b94:	e0bfff17 	ldw	r2,-4(fp)
}
    4b98:	e037883a 	mov	sp,fp
    4b9c:	dfc00117 	ldw	ra,4(sp)
    4ba0:	df000017 	ldw	fp,0(sp)
    4ba4:	dec00204 	addi	sp,sp,8
    4ba8:	f800283a 	ret

00004bac <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4bac:	defff904 	addi	sp,sp,-28
    4bb0:	dfc00615 	stw	ra,24(sp)
    4bb4:	df000515 	stw	fp,20(sp)
    4bb8:	df000504 	addi	fp,sp,20
    4bbc:	e13ffc15 	stw	r4,-16(fp)
    4bc0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4bc4:	e0bffd17 	ldw	r2,-12(fp)
    4bc8:	1005003a 	cmpeq	r2,r2,zero
    4bcc:	10001e1e 	bne	r2,zero,4c48 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    4bd0:	e0bffd17 	ldw	r2,-12(fp)
    4bd4:	10800050 	cmplti	r2,r2,1
    4bd8:	1000031e 	bne	r2,zero,4be8 <alt_up_character_lcd_shift_cursor+0x3c>
    4bdc:	00800504 	movi	r2,20
    4be0:	e0bfff05 	stb	r2,-4(fp)
    4be4:	00000206 	br	4bf0 <alt_up_character_lcd_shift_cursor+0x44>
    4be8:	00c00404 	movi	r3,16
    4bec:	e0ffff05 	stb	r3,-4(fp)
    4bf0:	e0bfff03 	ldbu	r2,-4(fp)
    4bf4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4bf8:	e0fffd17 	ldw	r3,-12(fp)
    4bfc:	e0fffe15 	stw	r3,-8(fp)
    4c00:	e0fffe17 	ldw	r3,-8(fp)
    4c04:	1804403a 	cmpge	r2,r3,zero
    4c08:	1000031e 	bne	r2,zero,4c18 <alt_up_character_lcd_shift_cursor+0x6c>
    4c0c:	e0bffe17 	ldw	r2,-8(fp)
    4c10:	0085c83a 	sub	r2,zero,r2
    4c14:	e0bffe15 	stw	r2,-8(fp)
    4c18:	e0fffe17 	ldw	r3,-8(fp)
    4c1c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4c20:	00000306 	br	4c30 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4c24:	e17ffb43 	ldbu	r5,-19(fp)
    4c28:	e13ffc17 	ldw	r4,-16(fp)
    4c2c:	00049500 	call	4950 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4c30:	e0bffb03 	ldbu	r2,-20(fp)
    4c34:	10bfffc4 	addi	r2,r2,-1
    4c38:	e0bffb05 	stb	r2,-20(fp)
    4c3c:	e0bffb03 	ldbu	r2,-20(fp)
    4c40:	10803fd8 	cmpnei	r2,r2,255
    4c44:	103ff71e 	bne	r2,zero,4c24 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4c48:	e037883a 	mov	sp,fp
    4c4c:	dfc00117 	ldw	ra,4(sp)
    4c50:	df000017 	ldw	fp,0(sp)
    4c54:	dec00204 	addi	sp,sp,8
    4c58:	f800283a 	ret

00004c5c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4c5c:	defff904 	addi	sp,sp,-28
    4c60:	dfc00615 	stw	ra,24(sp)
    4c64:	df000515 	stw	fp,20(sp)
    4c68:	df000504 	addi	fp,sp,20
    4c6c:	e13ffc15 	stw	r4,-16(fp)
    4c70:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    4c74:	e0bffd17 	ldw	r2,-12(fp)
    4c78:	1005003a 	cmpeq	r2,r2,zero
    4c7c:	10001e1e 	bne	r2,zero,4cf8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    4c80:	e0bffd17 	ldw	r2,-12(fp)
    4c84:	10800050 	cmplti	r2,r2,1
    4c88:	1000031e 	bne	r2,zero,4c98 <alt_up_character_lcd_shift_display+0x3c>
    4c8c:	00800704 	movi	r2,28
    4c90:	e0bfff05 	stb	r2,-4(fp)
    4c94:	00000206 	br	4ca0 <alt_up_character_lcd_shift_display+0x44>
    4c98:	00c00604 	movi	r3,24
    4c9c:	e0ffff05 	stb	r3,-4(fp)
    4ca0:	e0bfff03 	ldbu	r2,-4(fp)
    4ca4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4ca8:	e0fffd17 	ldw	r3,-12(fp)
    4cac:	e0fffe15 	stw	r3,-8(fp)
    4cb0:	e0fffe17 	ldw	r3,-8(fp)
    4cb4:	1804403a 	cmpge	r2,r3,zero
    4cb8:	1000031e 	bne	r2,zero,4cc8 <alt_up_character_lcd_shift_display+0x6c>
    4cbc:	e0bffe17 	ldw	r2,-8(fp)
    4cc0:	0085c83a 	sub	r2,zero,r2
    4cc4:	e0bffe15 	stw	r2,-8(fp)
    4cc8:	e0fffe17 	ldw	r3,-8(fp)
    4ccc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    4cd0:	00000306 	br	4ce0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4cd4:	e17ffb43 	ldbu	r5,-19(fp)
    4cd8:	e13ffc17 	ldw	r4,-16(fp)
    4cdc:	00049500 	call	4950 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4ce0:	e0bffb03 	ldbu	r2,-20(fp)
    4ce4:	10bfffc4 	addi	r2,r2,-1
    4ce8:	e0bffb05 	stb	r2,-20(fp)
    4cec:	e0bffb03 	ldbu	r2,-20(fp)
    4cf0:	10803fd8 	cmpnei	r2,r2,255
    4cf4:	103ff71e 	bne	r2,zero,4cd4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4cf8:	e037883a 	mov	sp,fp
    4cfc:	dfc00117 	ldw	ra,4(sp)
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00204 	addi	sp,sp,8
    4d08:	f800283a 	ret

00004d0c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4d0c:	defff904 	addi	sp,sp,-28
    4d10:	dfc00615 	stw	ra,24(sp)
    4d14:	df000515 	stw	fp,20(sp)
    4d18:	df000504 	addi	fp,sp,20
    4d1c:	e13ffc15 	stw	r4,-16(fp)
    4d20:	e17ffd15 	stw	r5,-12(fp)
    4d24:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4d28:	e0bffd17 	ldw	r2,-12(fp)
    4d2c:	10800a28 	cmpgeui	r2,r2,40
    4d30:	1000031e 	bne	r2,zero,4d40 <alt_up_character_lcd_erase_pos+0x34>
    4d34:	e0bffe17 	ldw	r2,-8(fp)
    4d38:	108000b0 	cmpltui	r2,r2,2
    4d3c:	1000031e 	bne	r2,zero,4d4c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    4d40:	00bfffc4 	movi	r2,-1
    4d44:	e0bfff15 	stw	r2,-4(fp)
    4d48:	00000e06 	br	4d84 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4d4c:	e13ffd17 	ldw	r4,-12(fp)
    4d50:	e17ffe17 	ldw	r5,-8(fp)
    4d54:	00048d40 	call	48d4 <get_DDRAM_addr>
    4d58:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    4d5c:	e17ffb03 	ldbu	r5,-20(fp)
    4d60:	e13ffc17 	ldw	r4,-16(fp)
    4d64:	00049500 	call	4950 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    4d68:	e0bffc17 	ldw	r2,-16(fp)
    4d6c:	10800a17 	ldw	r2,40(r2)
    4d70:	10800044 	addi	r2,r2,1
    4d74:	1007883a 	mov	r3,r2
    4d78:	00800084 	movi	r2,2
    4d7c:	18800025 	stbio	r2,0(r3)
	return 0;
    4d80:	e03fff15 	stw	zero,-4(fp)
    4d84:	e0bfff17 	ldw	r2,-4(fp)
}
    4d88:	e037883a 	mov	sp,fp
    4d8c:	dfc00117 	ldw	ra,4(sp)
    4d90:	df000017 	ldw	fp,0(sp)
    4d94:	dec00204 	addi	sp,sp,8
    4d98:	f800283a 	ret

00004d9c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    4d9c:	defffd04 	addi	sp,sp,-12
    4da0:	dfc00215 	stw	ra,8(sp)
    4da4:	df000115 	stw	fp,4(sp)
    4da8:	df000104 	addi	fp,sp,4
    4dac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    4db0:	e13fff17 	ldw	r4,-4(fp)
    4db4:	01400304 	movi	r5,12
    4db8:	00049500 	call	4950 <alt_up_character_lcd_send_cmd>
}
    4dbc:	e037883a 	mov	sp,fp
    4dc0:	dfc00117 	ldw	ra,4(sp)
    4dc4:	df000017 	ldw	fp,0(sp)
    4dc8:	dec00204 	addi	sp,sp,8
    4dcc:	f800283a 	ret

00004dd0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    4dd0:	defffd04 	addi	sp,sp,-12
    4dd4:	dfc00215 	stw	ra,8(sp)
    4dd8:	df000115 	stw	fp,4(sp)
    4ddc:	df000104 	addi	fp,sp,4
    4de0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    4de4:	e13fff17 	ldw	r4,-4(fp)
    4de8:	014003c4 	movi	r5,15
    4dec:	00049500 	call	4950 <alt_up_character_lcd_send_cmd>
}
    4df0:	e037883a 	mov	sp,fp
    4df4:	dfc00117 	ldw	ra,4(sp)
    4df8:	df000017 	ldw	fp,0(sp)
    4dfc:	dec00204 	addi	sp,sp,8
    4e00:	f800283a 	ret

00004e04 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    4e04:	defffd04 	addi	sp,sp,-12
    4e08:	df000215 	stw	fp,8(sp)
    4e0c:	df000204 	addi	fp,sp,8
    4e10:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4e14:	e0bfff17 	ldw	r2,-4(fp)
    4e18:	10800a17 	ldw	r2,40(r2)
    4e1c:	10800104 	addi	r2,r2,4
    4e20:	10800037 	ldwio	r2,0(r2)
    4e24:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    4e28:	e0bffe17 	ldw	r2,-8(fp)
    4e2c:	10800054 	ori	r2,r2,1
    4e30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    4e34:	e0bfff17 	ldw	r2,-4(fp)
    4e38:	10800a17 	ldw	r2,40(r2)
    4e3c:	10800104 	addi	r2,r2,4
    4e40:	e0fffe17 	ldw	r3,-8(fp)
    4e44:	10c00035 	stwio	r3,0(r2)
}
    4e48:	e037883a 	mov	sp,fp
    4e4c:	df000017 	ldw	fp,0(sp)
    4e50:	dec00104 	addi	sp,sp,4
    4e54:	f800283a 	ret

00004e58 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    4e58:	defffd04 	addi	sp,sp,-12
    4e5c:	df000215 	stw	fp,8(sp)
    4e60:	df000204 	addi	fp,sp,8
    4e64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4e68:	e0bfff17 	ldw	r2,-4(fp)
    4e6c:	10800a17 	ldw	r2,40(r2)
    4e70:	10800104 	addi	r2,r2,4
    4e74:	10800037 	ldwio	r2,0(r2)
    4e78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    4e7c:	e0fffe17 	ldw	r3,-8(fp)
    4e80:	00bfff84 	movi	r2,-2
    4e84:	1884703a 	and	r2,r3,r2
    4e88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    4e8c:	e0bfff17 	ldw	r2,-4(fp)
    4e90:	10800a17 	ldw	r2,40(r2)
    4e94:	10800104 	addi	r2,r2,4
    4e98:	e0fffe17 	ldw	r3,-8(fp)
    4e9c:	10c00035 	stwio	r3,0(r2)
}
    4ea0:	e037883a 	mov	sp,fp
    4ea4:	df000017 	ldw	fp,0(sp)
    4ea8:	dec00104 	addi	sp,sp,4
    4eac:	f800283a 	ret

00004eb0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    4eb0:	defffd04 	addi	sp,sp,-12
    4eb4:	df000215 	stw	fp,8(sp)
    4eb8:	df000204 	addi	fp,sp,8
    4ebc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    4ec0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    4ec4:	e0bfff17 	ldw	r2,-4(fp)
    4ec8:	10800a17 	ldw	r2,40(r2)
    4ecc:	10800084 	addi	r2,r2,2
    4ed0:	1080002b 	ldhuio	r2,0(r2)
    4ed4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    4ed8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    4edc:	e037883a 	mov	sp,fp
    4ee0:	df000017 	ldw	fp,0(sp)
    4ee4:	dec00104 	addi	sp,sp,4
    4ee8:	f800283a 	ret

00004eec <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    4eec:	defffd04 	addi	sp,sp,-12
    4ef0:	df000215 	stw	fp,8(sp)
    4ef4:	df000204 	addi	fp,sp,8
    4ef8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4efc:	e0bfff17 	ldw	r2,-4(fp)
    4f00:	10800a17 	ldw	r2,40(r2)
    4f04:	10800104 	addi	r2,r2,4
    4f08:	10800037 	ldwio	r2,0(r2)
    4f0c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    4f10:	e0bffe17 	ldw	r2,-8(fp)
    4f14:	10bfffec 	andhi	r2,r2,65535
    4f18:	1004d43a 	srli	r2,r2,16
}
    4f1c:	e037883a 	mov	sp,fp
    4f20:	df000017 	ldw	fp,0(sp)
    4f24:	dec00104 	addi	sp,sp,4
    4f28:	f800283a 	ret

00004f2c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    4f2c:	defffc04 	addi	sp,sp,-16
    4f30:	df000315 	stw	fp,12(sp)
    4f34:	df000304 	addi	fp,sp,12
    4f38:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1080800c 	andi	r2,r2,512
    4f44:	1004d27a 	srli	r2,r2,9
    4f48:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    4f4c:	e0bffd17 	ldw	r2,-12(fp)
    4f50:	1005003a 	cmpeq	r2,r2,zero
    4f54:	1000031e 	bne	r2,zero,4f64 <alt_up_rs232_check_parity+0x38>
    4f58:	00bfffc4 	movi	r2,-1
    4f5c:	e0bfff15 	stw	r2,-4(fp)
    4f60:	00000106 	br	4f68 <alt_up_rs232_check_parity+0x3c>
    4f64:	e03fff15 	stw	zero,-4(fp)
    4f68:	e0bfff17 	ldw	r2,-4(fp)
}
    4f6c:	e037883a 	mov	sp,fp
    4f70:	df000017 	ldw	fp,0(sp)
    4f74:	dec00104 	addi	sp,sp,4
    4f78:	f800283a 	ret

00004f7c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    4f7c:	defffc04 	addi	sp,sp,-16
    4f80:	df000315 	stw	fp,12(sp)
    4f84:	df000304 	addi	fp,sp,12
    4f88:	e13ffe15 	stw	r4,-8(fp)
    4f8c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4f90:	e0bffe17 	ldw	r2,-8(fp)
    4f94:	10800a17 	ldw	r2,40(r2)
    4f98:	10800037 	ldwio	r2,0(r2)
    4f9c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    4fa0:	e0bffe17 	ldw	r2,-8(fp)
    4fa4:	10800a17 	ldw	r2,40(r2)
    4fa8:	e0ffff03 	ldbu	r3,-4(fp)
    4fac:	10c00035 	stwio	r3,0(r2)
	return 0;
    4fb0:	0005883a 	mov	r2,zero
}
    4fb4:	e037883a 	mov	sp,fp
    4fb8:	df000017 	ldw	fp,0(sp)
    4fbc:	dec00104 	addi	sp,sp,4
    4fc0:	f800283a 	ret

00004fc4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    4fc4:	defffa04 	addi	sp,sp,-24
    4fc8:	dfc00515 	stw	ra,20(sp)
    4fcc:	df000415 	stw	fp,16(sp)
    4fd0:	df000404 	addi	fp,sp,16
    4fd4:	e13ffd15 	stw	r4,-12(fp)
    4fd8:	e17ffe15 	stw	r5,-8(fp)
    4fdc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4fe0:	e0bffd17 	ldw	r2,-12(fp)
    4fe4:	10800a17 	ldw	r2,40(r2)
    4fe8:	10800037 	ldwio	r2,0(r2)
    4fec:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    4ff0:	e0bffc17 	ldw	r2,-16(fp)
    4ff4:	1007883a 	mov	r3,r2
    4ff8:	e0bffe17 	ldw	r2,-8(fp)
    4ffc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    5000:	e13ffc17 	ldw	r4,-16(fp)
    5004:	0004f2c0 	call	4f2c <alt_up_rs232_check_parity>
    5008:	1007883a 	mov	r3,r2
    500c:	e0bfff17 	ldw	r2,-4(fp)
    5010:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    5014:	e0bffc17 	ldw	r2,-16(fp)
    5018:	10a0000c 	andi	r2,r2,32768
    501c:	1004d3fa 	srli	r2,r2,15
    5020:	10bfffc4 	addi	r2,r2,-1
}
    5024:	e037883a 	mov	sp,fp
    5028:	dfc00117 	ldw	ra,4(sp)
    502c:	df000017 	ldw	fp,0(sp)
    5030:	dec00204 	addi	sp,sp,8
    5034:	f800283a 	ret

00005038 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    5038:	defff804 	addi	sp,sp,-32
    503c:	dfc00715 	stw	ra,28(sp)
    5040:	df000615 	stw	fp,24(sp)
    5044:	df000604 	addi	fp,sp,24
    5048:	e13ffd15 	stw	r4,-12(fp)
    504c:	e17ffe15 	stw	r5,-8(fp)
    5050:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    5054:	e0bffd17 	ldw	r2,-12(fp)
    5058:	10800017 	ldw	r2,0(r2)
    505c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    5060:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    5064:	00000c06 	br	5098 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    5068:	e17ffe17 	ldw	r5,-8(fp)
    506c:	e0bffe17 	ldw	r2,-8(fp)
    5070:	10800044 	addi	r2,r2,1
    5074:	e0bffe15 	stw	r2,-8(fp)
    5078:	e1bffc04 	addi	r6,fp,-16
    507c:	e13ffb17 	ldw	r4,-20(fp)
    5080:	0004fc40 	call	4fc4 <alt_up_rs232_read_data>
    5084:	1004c03a 	cmpne	r2,r2,zero
    5088:	1000091e 	bne	r2,zero,50b0 <alt_up_rs232_read_fd+0x78>
			count++;
    508c:	e0bffa17 	ldw	r2,-24(fp)
    5090:	10800044 	addi	r2,r2,1
    5094:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5098:	e0bfff17 	ldw	r2,-4(fp)
    509c:	10bfffc4 	addi	r2,r2,-1
    50a0:	e0bfff15 	stw	r2,-4(fp)
    50a4:	e0bfff17 	ldw	r2,-4(fp)
    50a8:	10bfffd8 	cmpnei	r2,r2,-1
    50ac:	103fee1e 	bne	r2,zero,5068 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    50b0:	e0bffa17 	ldw	r2,-24(fp)
}
    50b4:	e037883a 	mov	sp,fp
    50b8:	dfc00117 	ldw	ra,4(sp)
    50bc:	df000017 	ldw	fp,0(sp)
    50c0:	dec00204 	addi	sp,sp,8
    50c4:	f800283a 	ret

000050c8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    50c8:	defff904 	addi	sp,sp,-28
    50cc:	dfc00615 	stw	ra,24(sp)
    50d0:	df000515 	stw	fp,20(sp)
    50d4:	df000504 	addi	fp,sp,20
    50d8:	e13ffd15 	stw	r4,-12(fp)
    50dc:	e17ffe15 	stw	r5,-8(fp)
    50e0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    50e4:	e0bffd17 	ldw	r2,-12(fp)
    50e8:	10800017 	ldw	r2,0(r2)
    50ec:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    50f0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    50f4:	00000d06 	br	512c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    50f8:	e0bffe17 	ldw	r2,-8(fp)
    50fc:	10800003 	ldbu	r2,0(r2)
    5100:	11403fcc 	andi	r5,r2,255
    5104:	e13ffc17 	ldw	r4,-16(fp)
    5108:	0004f7c0 	call	4f7c <alt_up_rs232_write_data>
    510c:	1004c03a 	cmpne	r2,r2,zero
    5110:	10000c1e 	bne	r2,zero,5144 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    5114:	e0bffb17 	ldw	r2,-20(fp)
    5118:	10800044 	addi	r2,r2,1
    511c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    5120:	e0bffe17 	ldw	r2,-8(fp)
    5124:	10800044 	addi	r2,r2,1
    5128:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    512c:	e0bfff17 	ldw	r2,-4(fp)
    5130:	10bfffc4 	addi	r2,r2,-1
    5134:	e0bfff15 	stw	r2,-4(fp)
    5138:	e0bfff17 	ldw	r2,-4(fp)
    513c:	10bfffd8 	cmpnei	r2,r2,-1
    5140:	103fed1e 	bne	r2,zero,50f8 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    5144:	e0bffb17 	ldw	r2,-20(fp)
}
    5148:	e037883a 	mov	sp,fp
    514c:	dfc00117 	ldw	ra,4(sp)
    5150:	df000017 	ldw	fp,0(sp)
    5154:	dec00204 	addi	sp,sp,8
    5158:	f800283a 	ret

0000515c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    515c:	defffc04 	addi	sp,sp,-16
    5160:	dfc00315 	stw	ra,12(sp)
    5164:	df000215 	stw	fp,8(sp)
    5168:	df000204 	addi	fp,sp,8
    516c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    5170:	e13fff17 	ldw	r4,-4(fp)
    5174:	01400034 	movhi	r5,0
    5178:	295ffc04 	addi	r5,r5,32752
    517c:	00054e80 	call	54e8 <alt_find_dev>
    5180:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5184:	e0bffe17 	ldw	r2,-8(fp)
}
    5188:	e037883a 	mov	sp,fp
    518c:	dfc00117 	ldw	ra,4(sp)
    5190:	df000017 	ldw	fp,0(sp)
    5194:	dec00204 	addi	sp,sp,8
    5198:	f800283a 	ret

0000519c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    519c:	defff404 	addi	sp,sp,-48
    51a0:	df000b15 	stw	fp,44(sp)
    51a4:	df000b04 	addi	fp,sp,44
    51a8:	e13ffb15 	stw	r4,-20(fp)
    51ac:	e17ffc15 	stw	r5,-16(fp)
    51b0:	e1bffd15 	stw	r6,-12(fp)
    51b4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    51b8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    51bc:	00800074 	movhi	r2,1
    51c0:	10a6f704 	addi	r2,r2,-25636
    51c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    51c8:	1005003a 	cmpeq	r2,r2,zero
    51cc:	1000411e 	bne	r2,zero,52d4 <alt_alarm_start+0x138>
  {
    if (alarm)
    51d0:	e0bffb17 	ldw	r2,-20(fp)
    51d4:	1005003a 	cmpeq	r2,r2,zero
    51d8:	10003b1e 	bne	r2,zero,52c8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    51dc:	e0fffb17 	ldw	r3,-20(fp)
    51e0:	e0bffd17 	ldw	r2,-12(fp)
    51e4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    51e8:	e0fffb17 	ldw	r3,-20(fp)
    51ec:	e0bffe17 	ldw	r2,-8(fp)
    51f0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51f4:	0005303a 	rdctl	r2,status
    51f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51fc:	e0fff817 	ldw	r3,-32(fp)
    5200:	00bfff84 	movi	r2,-2
    5204:	1884703a 	and	r2,r3,r2
    5208:	1001703a 	wrctl	status,r2
  
  return context;
    520c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    5210:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5214:	00800074 	movhi	r2,1
    5218:	10a6f804 	addi	r2,r2,-25632
    521c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    5220:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    5224:	e0fffc17 	ldw	r3,-16(fp)
    5228:	e0bff917 	ldw	r2,-28(fp)
    522c:	1885883a 	add	r2,r3,r2
    5230:	10c00044 	addi	r3,r2,1
    5234:	e0bffb17 	ldw	r2,-20(fp)
    5238:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    523c:	e0bffb17 	ldw	r2,-20(fp)
    5240:	10c00217 	ldw	r3,8(r2)
    5244:	e0bff917 	ldw	r2,-28(fp)
    5248:	1880042e 	bgeu	r3,r2,525c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    524c:	e0fffb17 	ldw	r3,-20(fp)
    5250:	00800044 	movi	r2,1
    5254:	18800405 	stb	r2,16(r3)
    5258:	00000206 	br	5264 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    525c:	e0bffb17 	ldw	r2,-20(fp)
    5260:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    5264:	e0fffb17 	ldw	r3,-20(fp)
    5268:	00800074 	movhi	r2,1
    526c:	10a00204 	addi	r2,r2,-32760
    5270:	e0bff615 	stw	r2,-40(fp)
    5274:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5278:	e0fff717 	ldw	r3,-36(fp)
    527c:	e0bff617 	ldw	r2,-40(fp)
    5280:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5284:	e0bff617 	ldw	r2,-40(fp)
    5288:	10c00017 	ldw	r3,0(r2)
    528c:	e0bff717 	ldw	r2,-36(fp)
    5290:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5294:	e0bff617 	ldw	r2,-40(fp)
    5298:	10c00017 	ldw	r3,0(r2)
    529c:	e0bff717 	ldw	r2,-36(fp)
    52a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    52a4:	e0fff617 	ldw	r3,-40(fp)
    52a8:	e0bff717 	ldw	r2,-36(fp)
    52ac:	18800015 	stw	r2,0(r3)
    52b0:	e0bffa17 	ldw	r2,-24(fp)
    52b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    52b8:	e0bff517 	ldw	r2,-44(fp)
    52bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    52c0:	e03fff15 	stw	zero,-4(fp)
    52c4:	00000506 	br	52dc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    52c8:	00bffa84 	movi	r2,-22
    52cc:	e0bfff15 	stw	r2,-4(fp)
    52d0:	00000206 	br	52dc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    52d4:	00bfde84 	movi	r2,-134
    52d8:	e0bfff15 	stw	r2,-4(fp)
    52dc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    52e0:	e037883a 	mov	sp,fp
    52e4:	df000017 	ldw	fp,0(sp)
    52e8:	dec00104 	addi	sp,sp,4
    52ec:	f800283a 	ret

000052f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    52f0:	deffff04 	addi	sp,sp,-4
    52f4:	df000015 	stw	fp,0(sp)
    52f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    52fc:	e037883a 	mov	sp,fp
    5300:	df000017 	ldw	fp,0(sp)
    5304:	dec00104 	addi	sp,sp,4
    5308:	f800283a 	ret

0000530c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    530c:	defff904 	addi	sp,sp,-28
    5310:	dfc00615 	stw	ra,24(sp)
    5314:	df000515 	stw	fp,20(sp)
    5318:	df000504 	addi	fp,sp,20
    531c:	e13ffd15 	stw	r4,-12(fp)
    5320:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5324:	e0bffd17 	ldw	r2,-12(fp)
    5328:	1005003a 	cmpeq	r2,r2,zero
    532c:	1000041e 	bne	r2,zero,5340 <alt_dev_llist_insert+0x34>
    5330:	e0bffd17 	ldw	r2,-12(fp)
    5334:	10800217 	ldw	r2,8(r2)
    5338:	1004c03a 	cmpne	r2,r2,zero
    533c:	1000071e 	bne	r2,zero,535c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    5340:	00053c00 	call	53c0 <alt_get_errno>
    5344:	1007883a 	mov	r3,r2
    5348:	00800584 	movi	r2,22
    534c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5350:	00bffa84 	movi	r2,-22
    5354:	e0bfff15 	stw	r2,-4(fp)
    5358:	00001306 	br	53a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    535c:	e0fffd17 	ldw	r3,-12(fp)
    5360:	e0bffe17 	ldw	r2,-8(fp)
    5364:	e0bffb15 	stw	r2,-20(fp)
    5368:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    536c:	e0fffc17 	ldw	r3,-16(fp)
    5370:	e0bffb17 	ldw	r2,-20(fp)
    5374:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5378:	e0bffb17 	ldw	r2,-20(fp)
    537c:	10c00017 	ldw	r3,0(r2)
    5380:	e0bffc17 	ldw	r2,-16(fp)
    5384:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5388:	e0bffb17 	ldw	r2,-20(fp)
    538c:	10c00017 	ldw	r3,0(r2)
    5390:	e0bffc17 	ldw	r2,-16(fp)
    5394:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5398:	e0fffb17 	ldw	r3,-20(fp)
    539c:	e0bffc17 	ldw	r2,-16(fp)
    53a0:	18800015 	stw	r2,0(r3)

  return 0;  
    53a4:	e03fff15 	stw	zero,-4(fp)
    53a8:	e0bfff17 	ldw	r2,-4(fp)
}
    53ac:	e037883a 	mov	sp,fp
    53b0:	dfc00117 	ldw	ra,4(sp)
    53b4:	df000017 	ldw	fp,0(sp)
    53b8:	dec00204 	addi	sp,sp,8
    53bc:	f800283a 	ret

000053c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53c0:	defffd04 	addi	sp,sp,-12
    53c4:	dfc00215 	stw	ra,8(sp)
    53c8:	df000115 	stw	fp,4(sp)
    53cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    53d0:	00800034 	movhi	r2,0
    53d4:	109fff04 	addi	r2,r2,32764
    53d8:	10800017 	ldw	r2,0(r2)
    53dc:	1005003a 	cmpeq	r2,r2,zero
    53e0:	1000061e 	bne	r2,zero,53fc <alt_get_errno+0x3c>
    53e4:	00800034 	movhi	r2,0
    53e8:	109fff04 	addi	r2,r2,32764
    53ec:	10800017 	ldw	r2,0(r2)
    53f0:	103ee83a 	callr	r2
    53f4:	e0bfff15 	stw	r2,-4(fp)
    53f8:	00000306 	br	5408 <alt_get_errno+0x48>
    53fc:	00800074 	movhi	r2,1
    5400:	10a6f204 	addi	r2,r2,-25656
    5404:	e0bfff15 	stw	r2,-4(fp)
    5408:	e0bfff17 	ldw	r2,-4(fp)
}
    540c:	e037883a 	mov	sp,fp
    5410:	dfc00117 	ldw	ra,4(sp)
    5414:	df000017 	ldw	fp,0(sp)
    5418:	dec00204 	addi	sp,sp,8
    541c:	f800283a 	ret

00005420 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5420:	defffd04 	addi	sp,sp,-12
    5424:	dfc00215 	stw	ra,8(sp)
    5428:	df000115 	stw	fp,4(sp)
    542c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5430:	00bfff04 	movi	r2,-4
    5434:	00c00034 	movhi	r3,0
    5438:	18d8d304 	addi	r3,r3,25420
    543c:	1885883a 	add	r2,r3,r2
    5440:	e0bfff15 	stw	r2,-4(fp)
    5444:	00000606 	br	5460 <_do_ctors+0x40>
        (*ctor) (); 
    5448:	e0bfff17 	ldw	r2,-4(fp)
    544c:	10800017 	ldw	r2,0(r2)
    5450:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5454:	e0bfff17 	ldw	r2,-4(fp)
    5458:	10bfff04 	addi	r2,r2,-4
    545c:	e0bfff15 	stw	r2,-4(fp)
    5460:	e0ffff17 	ldw	r3,-4(fp)
    5464:	00800034 	movhi	r2,0
    5468:	1098d204 	addi	r2,r2,25416
    546c:	18bff62e 	bgeu	r3,r2,5448 <_do_ctors+0x28>
        (*ctor) (); 
}
    5470:	e037883a 	mov	sp,fp
    5474:	dfc00117 	ldw	ra,4(sp)
    5478:	df000017 	ldw	fp,0(sp)
    547c:	dec00204 	addi	sp,sp,8
    5480:	f800283a 	ret

00005484 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5484:	defffd04 	addi	sp,sp,-12
    5488:	dfc00215 	stw	ra,8(sp)
    548c:	df000115 	stw	fp,4(sp)
    5490:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5494:	00bfff04 	movi	r2,-4
    5498:	00c00034 	movhi	r3,0
    549c:	18d8d304 	addi	r3,r3,25420
    54a0:	1885883a 	add	r2,r3,r2
    54a4:	e0bfff15 	stw	r2,-4(fp)
    54a8:	00000606 	br	54c4 <_do_dtors+0x40>
        (*dtor) (); 
    54ac:	e0bfff17 	ldw	r2,-4(fp)
    54b0:	10800017 	ldw	r2,0(r2)
    54b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    54b8:	e0bfff17 	ldw	r2,-4(fp)
    54bc:	10bfff04 	addi	r2,r2,-4
    54c0:	e0bfff15 	stw	r2,-4(fp)
    54c4:	e0ffff17 	ldw	r3,-4(fp)
    54c8:	00800034 	movhi	r2,0
    54cc:	1098d304 	addi	r2,r2,25420
    54d0:	18bff62e 	bgeu	r3,r2,54ac <_do_dtors+0x28>
        (*dtor) (); 
}
    54d4:	e037883a 	mov	sp,fp
    54d8:	dfc00117 	ldw	ra,4(sp)
    54dc:	df000017 	ldw	fp,0(sp)
    54e0:	dec00204 	addi	sp,sp,8
    54e4:	f800283a 	ret

000054e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    54e8:	defff904 	addi	sp,sp,-28
    54ec:	dfc00615 	stw	ra,24(sp)
    54f0:	df000515 	stw	fp,20(sp)
    54f4:	df000504 	addi	fp,sp,20
    54f8:	e13ffd15 	stw	r4,-12(fp)
    54fc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5500:	e0bffe17 	ldw	r2,-8(fp)
    5504:	10800017 	ldw	r2,0(r2)
    5508:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    550c:	e13ffd17 	ldw	r4,-12(fp)
    5510:	000085c0 	call	85c <strlen>
    5514:	10800044 	addi	r2,r2,1
    5518:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    551c:	00000d06 	br	5554 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5520:	e0bffc17 	ldw	r2,-16(fp)
    5524:	11000217 	ldw	r4,8(r2)
    5528:	e1bffb17 	ldw	r6,-20(fp)
    552c:	e17ffd17 	ldw	r5,-12(fp)
    5530:	0005f8c0 	call	5f8c <memcmp>
    5534:	1004c03a 	cmpne	r2,r2,zero
    5538:	1000031e 	bne	r2,zero,5548 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    553c:	e0bffc17 	ldw	r2,-16(fp)
    5540:	e0bfff15 	stw	r2,-4(fp)
    5544:	00000706 	br	5564 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5548:	e0bffc17 	ldw	r2,-16(fp)
    554c:	10800017 	ldw	r2,0(r2)
    5550:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5554:	e0fffe17 	ldw	r3,-8(fp)
    5558:	e0bffc17 	ldw	r2,-16(fp)
    555c:	10fff01e 	bne	r2,r3,5520 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5560:	e03fff15 	stw	zero,-4(fp)
    5564:	e0bfff17 	ldw	r2,-4(fp)
}
    5568:	e037883a 	mov	sp,fp
    556c:	dfc00117 	ldw	ra,4(sp)
    5570:	df000017 	ldw	fp,0(sp)
    5574:	dec00204 	addi	sp,sp,8
    5578:	f800283a 	ret

0000557c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    557c:	deffff04 	addi	sp,sp,-4
    5580:	df000015 	stw	fp,0(sp)
    5584:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5588:	e037883a 	mov	sp,fp
    558c:	df000017 	ldw	fp,0(sp)
    5590:	dec00104 	addi	sp,sp,4
    5594:	f800283a 	ret

00005598 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5598:	defff804 	addi	sp,sp,-32
    559c:	dfc00715 	stw	ra,28(sp)
    55a0:	df000615 	stw	fp,24(sp)
    55a4:	dc000515 	stw	r16,20(sp)
    55a8:	df000504 	addi	fp,sp,20
    55ac:	e13ffc15 	stw	r4,-16(fp)
    55b0:	e17ffd15 	stw	r5,-12(fp)
    55b4:	e1bffe15 	stw	r6,-8(fp)
    55b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    55bc:	e13ffd17 	ldw	r4,-12(fp)
    55c0:	e17ffe17 	ldw	r5,-8(fp)
    55c4:	e1bfff17 	ldw	r6,-4(fp)
    55c8:	00059a00 	call	59a0 <open>
    55cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    55d0:	e0bffb17 	ldw	r2,-20(fp)
    55d4:	1004803a 	cmplt	r2,r2,zero
    55d8:	10001f1e 	bne	r2,zero,5658 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    55dc:	e13ffb17 	ldw	r4,-20(fp)
    55e0:	04000034 	movhi	r16,0
    55e4:	841b2504 	addi	r16,r16,27796
    55e8:	01400304 	movi	r5,12
    55ec:	00007700 	call	770 <__mulsi3>
    55f0:	1405883a 	add	r2,r2,r16
    55f4:	10c00017 	ldw	r3,0(r2)
    55f8:	e0bffc17 	ldw	r2,-16(fp)
    55fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5600:	e13ffb17 	ldw	r4,-20(fp)
    5604:	04000034 	movhi	r16,0
    5608:	841b2504 	addi	r16,r16,27796
    560c:	01400304 	movi	r5,12
    5610:	00007700 	call	770 <__mulsi3>
    5614:	1405883a 	add	r2,r2,r16
    5618:	10800104 	addi	r2,r2,4
    561c:	10c00017 	ldw	r3,0(r2)
    5620:	e0bffc17 	ldw	r2,-16(fp)
    5624:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5628:	e13ffb17 	ldw	r4,-20(fp)
    562c:	04000034 	movhi	r16,0
    5630:	841b2504 	addi	r16,r16,27796
    5634:	01400304 	movi	r5,12
    5638:	00007700 	call	770 <__mulsi3>
    563c:	1405883a 	add	r2,r2,r16
    5640:	10800204 	addi	r2,r2,8
    5644:	10c00017 	ldw	r3,0(r2)
    5648:	e0bffc17 	ldw	r2,-16(fp)
    564c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5650:	e13ffb17 	ldw	r4,-20(fp)
    5654:	00039440 	call	3944 <alt_release_fd>
  }
} 
    5658:	e037883a 	mov	sp,fp
    565c:	dfc00217 	ldw	ra,8(sp)
    5660:	df000117 	ldw	fp,4(sp)
    5664:	dc000017 	ldw	r16,0(sp)
    5668:	dec00304 	addi	sp,sp,12
    566c:	f800283a 	ret

00005670 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5670:	defffb04 	addi	sp,sp,-20
    5674:	dfc00415 	stw	ra,16(sp)
    5678:	df000315 	stw	fp,12(sp)
    567c:	df000304 	addi	fp,sp,12
    5680:	e13ffd15 	stw	r4,-12(fp)
    5684:	e17ffe15 	stw	r5,-8(fp)
    5688:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    568c:	01000034 	movhi	r4,0
    5690:	211b2804 	addi	r4,r4,27808
    5694:	e17ffd17 	ldw	r5,-12(fp)
    5698:	01800044 	movi	r6,1
    569c:	01c07fc4 	movi	r7,511
    56a0:	00055980 	call	5598 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    56a4:	01000034 	movhi	r4,0
    56a8:	211b2504 	addi	r4,r4,27796
    56ac:	e17ffe17 	ldw	r5,-8(fp)
    56b0:	000d883a 	mov	r6,zero
    56b4:	01c07fc4 	movi	r7,511
    56b8:	00055980 	call	5598 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    56bc:	01000034 	movhi	r4,0
    56c0:	211b2b04 	addi	r4,r4,27820
    56c4:	e17fff17 	ldw	r5,-4(fp)
    56c8:	01800044 	movi	r6,1
    56cc:	01c07fc4 	movi	r7,511
    56d0:	00055980 	call	5598 <alt_open_fd>
}  
    56d4:	e037883a 	mov	sp,fp
    56d8:	dfc00117 	ldw	ra,4(sp)
    56dc:	df000017 	ldw	fp,0(sp)
    56e0:	dec00204 	addi	sp,sp,8
    56e4:	f800283a 	ret

000056e8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    56e8:	deffef04 	addi	sp,sp,-68
    56ec:	df001015 	stw	fp,64(sp)
    56f0:	df001004 	addi	fp,sp,64
    56f4:	e13ffc15 	stw	r4,-16(fp)
    56f8:	e17ffd15 	stw	r5,-12(fp)
    56fc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    5700:	00bffa84 	movi	r2,-22
    5704:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5708:	e0bffc17 	ldw	r2,-16(fp)
    570c:	10800828 	cmpgeui	r2,r2,32
    5710:	1000601e 	bne	r2,zero,5894 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5714:	0005303a 	rdctl	r2,status
    5718:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    571c:	e0fff917 	ldw	r3,-28(fp)
    5720:	00bfff84 	movi	r2,-2
    5724:	1884703a 	and	r2,r3,r2
    5728:	1001703a 	wrctl	status,r2
  
  return context;
    572c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    5730:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    5734:	e0bffc17 	ldw	r2,-16(fp)
    5738:	00c00074 	movhi	r3,1
    573c:	18e70304 	addi	r3,r3,-25588
    5740:	100490fa 	slli	r2,r2,3
    5744:	10c7883a 	add	r3,r2,r3
    5748:	e0bffe17 	ldw	r2,-8(fp)
    574c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    5750:	e0bffc17 	ldw	r2,-16(fp)
    5754:	00c00074 	movhi	r3,1
    5758:	18e70304 	addi	r3,r3,-25588
    575c:	100490fa 	slli	r2,r2,3
    5760:	10c5883a 	add	r2,r2,r3
    5764:	10c00104 	addi	r3,r2,4
    5768:	e0bffd17 	ldw	r2,-12(fp)
    576c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    5770:	e0bffe17 	ldw	r2,-8(fp)
    5774:	1005003a 	cmpeq	r2,r2,zero
    5778:	1000201e 	bne	r2,zero,57fc <alt_irq_register+0x114>
    577c:	e0bffc17 	ldw	r2,-16(fp)
    5780:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5784:	0005303a 	rdctl	r2,status
    5788:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    578c:	e0fff617 	ldw	r3,-40(fp)
    5790:	00bfff84 	movi	r2,-2
    5794:	1884703a 	and	r2,r3,r2
    5798:	1001703a 	wrctl	status,r2
  
  return context;
    579c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    57a0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    57a4:	e0fff717 	ldw	r3,-36(fp)
    57a8:	00800044 	movi	r2,1
    57ac:	10c4983a 	sll	r2,r2,r3
    57b0:	1007883a 	mov	r3,r2
    57b4:	00800074 	movhi	r2,1
    57b8:	10a6f604 	addi	r2,r2,-25640
    57bc:	10800017 	ldw	r2,0(r2)
    57c0:	1886b03a 	or	r3,r3,r2
    57c4:	00800074 	movhi	r2,1
    57c8:	10a6f604 	addi	r2,r2,-25640
    57cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    57d0:	00800074 	movhi	r2,1
    57d4:	10a6f604 	addi	r2,r2,-25640
    57d8:	10800017 	ldw	r2,0(r2)
    57dc:	100170fa 	wrctl	ienable,r2
    57e0:	e0bff817 	ldw	r2,-32(fp)
    57e4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57e8:	e0bff517 	ldw	r2,-44(fp)
    57ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    57f0:	0005883a 	mov	r2,zero
    57f4:	e0bfff15 	stw	r2,-4(fp)
    57f8:	00002006 	br	587c <alt_irq_register+0x194>
    57fc:	e0bffc17 	ldw	r2,-16(fp)
    5800:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5804:	0005303a 	rdctl	r2,status
    5808:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    580c:	e0fff217 	ldw	r3,-56(fp)
    5810:	00bfff84 	movi	r2,-2
    5814:	1884703a 	and	r2,r3,r2
    5818:	1001703a 	wrctl	status,r2
  
  return context;
    581c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5820:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    5824:	e0fff317 	ldw	r3,-52(fp)
    5828:	00800044 	movi	r2,1
    582c:	10c4983a 	sll	r2,r2,r3
    5830:	0084303a 	nor	r2,zero,r2
    5834:	1007883a 	mov	r3,r2
    5838:	00800074 	movhi	r2,1
    583c:	10a6f604 	addi	r2,r2,-25640
    5840:	10800017 	ldw	r2,0(r2)
    5844:	1886703a 	and	r3,r3,r2
    5848:	00800074 	movhi	r2,1
    584c:	10a6f604 	addi	r2,r2,-25640
    5850:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5854:	00800074 	movhi	r2,1
    5858:	10a6f604 	addi	r2,r2,-25640
    585c:	10800017 	ldw	r2,0(r2)
    5860:	100170fa 	wrctl	ienable,r2
    5864:	e0bff417 	ldw	r2,-48(fp)
    5868:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    586c:	e0bff117 	ldw	r2,-60(fp)
    5870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5874:	0005883a 	mov	r2,zero
    5878:	e0bfff15 	stw	r2,-4(fp)
    587c:	e0bfff17 	ldw	r2,-4(fp)
    5880:	e0bffb15 	stw	r2,-20(fp)
    5884:	e0bffa17 	ldw	r2,-24(fp)
    5888:	e0bff015 	stw	r2,-64(fp)
    588c:	e0bff017 	ldw	r2,-64(fp)
    5890:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    5894:	e0bffb17 	ldw	r2,-20(fp)
}
    5898:	e037883a 	mov	sp,fp
    589c:	df000017 	ldw	fp,0(sp)
    58a0:	dec00104 	addi	sp,sp,4
    58a4:	f800283a 	ret

000058a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    58a8:	defffa04 	addi	sp,sp,-24
    58ac:	dfc00515 	stw	ra,20(sp)
    58b0:	df000415 	stw	fp,16(sp)
    58b4:	dc000315 	stw	r16,12(sp)
    58b8:	df000304 	addi	fp,sp,12
    58bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    58c0:	e0bffe17 	ldw	r2,-8(fp)
    58c4:	10800217 	ldw	r2,8(r2)
    58c8:	10d00034 	orhi	r3,r2,16384
    58cc:	e0bffe17 	ldw	r2,-8(fp)
    58d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    58d4:	e03ffd15 	stw	zero,-12(fp)
    58d8:	00002306 	br	5968 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    58dc:	e13ffd17 	ldw	r4,-12(fp)
    58e0:	04000034 	movhi	r16,0
    58e4:	841b2504 	addi	r16,r16,27796
    58e8:	01400304 	movi	r5,12
    58ec:	00007700 	call	770 <__mulsi3>
    58f0:	1405883a 	add	r2,r2,r16
    58f4:	10c00017 	ldw	r3,0(r2)
    58f8:	e0bffe17 	ldw	r2,-8(fp)
    58fc:	10800017 	ldw	r2,0(r2)
    5900:	1880161e 	bne	r3,r2,595c <alt_file_locked+0xb4>
    5904:	e13ffd17 	ldw	r4,-12(fp)
    5908:	04000034 	movhi	r16,0
    590c:	841b2504 	addi	r16,r16,27796
    5910:	01400304 	movi	r5,12
    5914:	00007700 	call	770 <__mulsi3>
    5918:	1405883a 	add	r2,r2,r16
    591c:	10800204 	addi	r2,r2,8
    5920:	10800017 	ldw	r2,0(r2)
    5924:	1004403a 	cmpge	r2,r2,zero
    5928:	10000c1e 	bne	r2,zero,595c <alt_file_locked+0xb4>
    592c:	e13ffd17 	ldw	r4,-12(fp)
    5930:	01400304 	movi	r5,12
    5934:	00007700 	call	770 <__mulsi3>
    5938:	1007883a 	mov	r3,r2
    593c:	00800034 	movhi	r2,0
    5940:	109b2504 	addi	r2,r2,27796
    5944:	1887883a 	add	r3,r3,r2
    5948:	e0bffe17 	ldw	r2,-8(fp)
    594c:	18800326 	beq	r3,r2,595c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5950:	00bffcc4 	movi	r2,-13
    5954:	e0bfff15 	stw	r2,-4(fp)
    5958:	00000a06 	br	5984 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    595c:	e0bffd17 	ldw	r2,-12(fp)
    5960:	10800044 	addi	r2,r2,1
    5964:	e0bffd15 	stw	r2,-12(fp)
    5968:	00800034 	movhi	r2,0
    596c:	109ffe04 	addi	r2,r2,32760
    5970:	10800017 	ldw	r2,0(r2)
    5974:	1007883a 	mov	r3,r2
    5978:	e0bffd17 	ldw	r2,-12(fp)
    597c:	18bfd72e 	bgeu	r3,r2,58dc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5980:	e03fff15 	stw	zero,-4(fp)
    5984:	e0bfff17 	ldw	r2,-4(fp)
}
    5988:	e037883a 	mov	sp,fp
    598c:	dfc00217 	ldw	ra,8(sp)
    5990:	df000117 	ldw	fp,4(sp)
    5994:	dc000017 	ldw	r16,0(sp)
    5998:	dec00304 	addi	sp,sp,12
    599c:	f800283a 	ret

000059a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    59a0:	defff404 	addi	sp,sp,-48
    59a4:	dfc00b15 	stw	ra,44(sp)
    59a8:	df000a15 	stw	fp,40(sp)
    59ac:	df000a04 	addi	fp,sp,40
    59b0:	e13ffb15 	stw	r4,-20(fp)
    59b4:	e17ffc15 	stw	r5,-16(fp)
    59b8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    59bc:	00bfffc4 	movi	r2,-1
    59c0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    59c4:	00bffb44 	movi	r2,-19
    59c8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    59cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    59d0:	e13ffb17 	ldw	r4,-20(fp)
    59d4:	01400034 	movhi	r5,0
    59d8:	295ffc04 	addi	r5,r5,32752
    59dc:	00054e80 	call	54e8 <alt_find_dev>
    59e0:	e0bffa15 	stw	r2,-24(fp)
    59e4:	e0bffa17 	ldw	r2,-24(fp)
    59e8:	1004c03a 	cmpne	r2,r2,zero
    59ec:	1000051e 	bne	r2,zero,5a04 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    59f0:	e13ffb17 	ldw	r4,-20(fp)
    59f4:	0005d500 	call	5d50 <alt_find_file>
    59f8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    59fc:	00800044 	movi	r2,1
    5a00:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5a04:	e0bffa17 	ldw	r2,-24(fp)
    5a08:	1005003a 	cmpeq	r2,r2,zero
    5a0c:	1000311e 	bne	r2,zero,5ad4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5a10:	e13ffa17 	ldw	r4,-24(fp)
    5a14:	0005e700 	call	5e70 <alt_get_fd>
    5a18:	e0bff815 	stw	r2,-32(fp)
    5a1c:	e0bff817 	ldw	r2,-32(fp)
    5a20:	1004403a 	cmpge	r2,r2,zero
    5a24:	1000031e 	bne	r2,zero,5a34 <open+0x94>
    {
      status = index;
    5a28:	e0bff817 	ldw	r2,-32(fp)
    5a2c:	e0bff715 	stw	r2,-36(fp)
    5a30:	00002a06 	br	5adc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    5a34:	e13ff817 	ldw	r4,-32(fp)
    5a38:	01400304 	movi	r5,12
    5a3c:	00007700 	call	770 <__mulsi3>
    5a40:	1007883a 	mov	r3,r2
    5a44:	00800034 	movhi	r2,0
    5a48:	109b2504 	addi	r2,r2,27796
    5a4c:	1885883a 	add	r2,r3,r2
    5a50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5a54:	e0fffc17 	ldw	r3,-16(fp)
    5a58:	00900034 	movhi	r2,16384
    5a5c:	10bfffc4 	addi	r2,r2,-1
    5a60:	1886703a 	and	r3,r3,r2
    5a64:	e0bff917 	ldw	r2,-28(fp)
    5a68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5a6c:	e0bff617 	ldw	r2,-40(fp)
    5a70:	1004c03a 	cmpne	r2,r2,zero
    5a74:	1000061e 	bne	r2,zero,5a90 <open+0xf0>
    5a78:	e13ff917 	ldw	r4,-28(fp)
    5a7c:	00058a80 	call	58a8 <alt_file_locked>
    5a80:	e0bff715 	stw	r2,-36(fp)
    5a84:	e0bff717 	ldw	r2,-36(fp)
    5a88:	1004803a 	cmplt	r2,r2,zero
    5a8c:	1000131e 	bne	r2,zero,5adc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5a90:	e0bffa17 	ldw	r2,-24(fp)
    5a94:	10800317 	ldw	r2,12(r2)
    5a98:	1005003a 	cmpeq	r2,r2,zero
    5a9c:	1000091e 	bne	r2,zero,5ac4 <open+0x124>
    5aa0:	e0bffa17 	ldw	r2,-24(fp)
    5aa4:	10800317 	ldw	r2,12(r2)
    5aa8:	e13ff917 	ldw	r4,-28(fp)
    5aac:	e17ffb17 	ldw	r5,-20(fp)
    5ab0:	e1bffc17 	ldw	r6,-16(fp)
    5ab4:	e1fffd17 	ldw	r7,-12(fp)
    5ab8:	103ee83a 	callr	r2
    5abc:	e0bfff15 	stw	r2,-4(fp)
    5ac0:	00000106 	br	5ac8 <open+0x128>
    5ac4:	e03fff15 	stw	zero,-4(fp)
    5ac8:	e0bfff17 	ldw	r2,-4(fp)
    5acc:	e0bff715 	stw	r2,-36(fp)
    5ad0:	00000206 	br	5adc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5ad4:	00bffb44 	movi	r2,-19
    5ad8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5adc:	e0bff717 	ldw	r2,-36(fp)
    5ae0:	1004403a 	cmpge	r2,r2,zero
    5ae4:	1000091e 	bne	r2,zero,5b0c <open+0x16c>
  {
    alt_release_fd (index);  
    5ae8:	e13ff817 	ldw	r4,-32(fp)
    5aec:	00039440 	call	3944 <alt_release_fd>
    ALT_ERRNO = -status;
    5af0:	0005b2c0 	call	5b2c <alt_get_errno>
    5af4:	e0fff717 	ldw	r3,-36(fp)
    5af8:	00c7c83a 	sub	r3,zero,r3
    5afc:	10c00015 	stw	r3,0(r2)
    return -1;
    5b00:	00bfffc4 	movi	r2,-1
    5b04:	e0bffe15 	stw	r2,-8(fp)
    5b08:	00000206 	br	5b14 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    5b0c:	e0bff817 	ldw	r2,-32(fp)
    5b10:	e0bffe15 	stw	r2,-8(fp)
    5b14:	e0bffe17 	ldw	r2,-8(fp)
}
    5b18:	e037883a 	mov	sp,fp
    5b1c:	dfc00117 	ldw	ra,4(sp)
    5b20:	df000017 	ldw	fp,0(sp)
    5b24:	dec00204 	addi	sp,sp,8
    5b28:	f800283a 	ret

00005b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5b2c:	defffd04 	addi	sp,sp,-12
    5b30:	dfc00215 	stw	ra,8(sp)
    5b34:	df000115 	stw	fp,4(sp)
    5b38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5b3c:	00800034 	movhi	r2,0
    5b40:	109fff04 	addi	r2,r2,32764
    5b44:	10800017 	ldw	r2,0(r2)
    5b48:	1005003a 	cmpeq	r2,r2,zero
    5b4c:	1000061e 	bne	r2,zero,5b68 <alt_get_errno+0x3c>
    5b50:	00800034 	movhi	r2,0
    5b54:	109fff04 	addi	r2,r2,32764
    5b58:	10800017 	ldw	r2,0(r2)
    5b5c:	103ee83a 	callr	r2
    5b60:	e0bfff15 	stw	r2,-4(fp)
    5b64:	00000306 	br	5b74 <alt_get_errno+0x48>
    5b68:	00800074 	movhi	r2,1
    5b6c:	10a6f204 	addi	r2,r2,-25656
    5b70:	e0bfff15 	stw	r2,-4(fp)
    5b74:	e0bfff17 	ldw	r2,-4(fp)
}
    5b78:	e037883a 	mov	sp,fp
    5b7c:	dfc00117 	ldw	ra,4(sp)
    5b80:	df000017 	ldw	fp,0(sp)
    5b84:	dec00204 	addi	sp,sp,8
    5b88:	f800283a 	ret

00005b8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5b8c:	defffa04 	addi	sp,sp,-24
    5b90:	df000515 	stw	fp,20(sp)
    5b94:	df000504 	addi	fp,sp,20
    5b98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b9c:	0005303a 	rdctl	r2,status
    5ba0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ba4:	e0fffd17 	ldw	r3,-12(fp)
    5ba8:	00bfff84 	movi	r2,-2
    5bac:	1884703a 	and	r2,r3,r2
    5bb0:	1001703a 	wrctl	status,r2
  
  return context;
    5bb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5bb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    5bbc:	e0bfff17 	ldw	r2,-4(fp)
    5bc0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5bc4:	e0bffc17 	ldw	r2,-16(fp)
    5bc8:	10c00017 	ldw	r3,0(r2)
    5bcc:	e0bffc17 	ldw	r2,-16(fp)
    5bd0:	10800117 	ldw	r2,4(r2)
    5bd4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    5bd8:	e0bffc17 	ldw	r2,-16(fp)
    5bdc:	10c00117 	ldw	r3,4(r2)
    5be0:	e0bffc17 	ldw	r2,-16(fp)
    5be4:	10800017 	ldw	r2,0(r2)
    5be8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5bec:	e0fffc17 	ldw	r3,-16(fp)
    5bf0:	e0bffc17 	ldw	r2,-16(fp)
    5bf4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    5bf8:	e0fffc17 	ldw	r3,-16(fp)
    5bfc:	e0bffc17 	ldw	r2,-16(fp)
    5c00:	18800015 	stw	r2,0(r3)
    5c04:	e0bffe17 	ldw	r2,-8(fp)
    5c08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5c0c:	e0bffb17 	ldw	r2,-20(fp)
    5c10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5c14:	e037883a 	mov	sp,fp
    5c18:	df000017 	ldw	fp,0(sp)
    5c1c:	dec00104 	addi	sp,sp,4
    5c20:	f800283a 	ret

00005c24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5c24:	defffb04 	addi	sp,sp,-20
    5c28:	dfc00415 	stw	ra,16(sp)
    5c2c:	df000315 	stw	fp,12(sp)
    5c30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5c34:	d0a00d17 	ldw	r2,-32716(gp)
    5c38:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5c3c:	d0a70317 	ldw	r2,-25588(gp)
    5c40:	10800044 	addi	r2,r2,1
    5c44:	d0a70315 	stw	r2,-25588(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5c48:	00003106 	br	5d10 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    5c4c:	e0bffe17 	ldw	r2,-8(fp)
    5c50:	10800017 	ldw	r2,0(r2)
    5c54:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5c58:	e0bffe17 	ldw	r2,-8(fp)
    5c5c:	10800403 	ldbu	r2,16(r2)
    5c60:	10803fcc 	andi	r2,r2,255
    5c64:	1005003a 	cmpeq	r2,r2,zero
    5c68:	1000051e 	bne	r2,zero,5c80 <alt_tick+0x5c>
    5c6c:	d0a70317 	ldw	r2,-25588(gp)
    5c70:	1004c03a 	cmpne	r2,r2,zero
    5c74:	1000021e 	bne	r2,zero,5c80 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    5c78:	e0bffe17 	ldw	r2,-8(fp)
    5c7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5c80:	e0bffe17 	ldw	r2,-8(fp)
    5c84:	10c00217 	ldw	r3,8(r2)
    5c88:	d0a70317 	ldw	r2,-25588(gp)
    5c8c:	10c01e36 	bltu	r2,r3,5d08 <alt_tick+0xe4>
    5c90:	e0bffe17 	ldw	r2,-8(fp)
    5c94:	10800403 	ldbu	r2,16(r2)
    5c98:	10803fcc 	andi	r2,r2,255
    5c9c:	1004c03a 	cmpne	r2,r2,zero
    5ca0:	1000191e 	bne	r2,zero,5d08 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    5ca4:	e0bffe17 	ldw	r2,-8(fp)
    5ca8:	10c00317 	ldw	r3,12(r2)
    5cac:	e0bffe17 	ldw	r2,-8(fp)
    5cb0:	11000517 	ldw	r4,20(r2)
    5cb4:	183ee83a 	callr	r3
    5cb8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5cbc:	e0bffd17 	ldw	r2,-12(fp)
    5cc0:	1004c03a 	cmpne	r2,r2,zero
    5cc4:	1000031e 	bne	r2,zero,5cd4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    5cc8:	e13ffe17 	ldw	r4,-8(fp)
    5ccc:	0005b8c0 	call	5b8c <alt_alarm_stop>
    5cd0:	00000d06 	br	5d08 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    5cd4:	e0bffe17 	ldw	r2,-8(fp)
    5cd8:	10c00217 	ldw	r3,8(r2)
    5cdc:	e0bffd17 	ldw	r2,-12(fp)
    5ce0:	1887883a 	add	r3,r3,r2
    5ce4:	e0bffe17 	ldw	r2,-8(fp)
    5ce8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5cec:	e0bffe17 	ldw	r2,-8(fp)
    5cf0:	10c00217 	ldw	r3,8(r2)
    5cf4:	d0a70317 	ldw	r2,-25588(gp)
    5cf8:	1880032e 	bgeu	r3,r2,5d08 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    5cfc:	e0fffe17 	ldw	r3,-8(fp)
    5d00:	00800044 	movi	r2,1
    5d04:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    5d08:	e0bfff17 	ldw	r2,-4(fp)
    5d0c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5d10:	d0e00d04 	addi	r3,gp,-32716
    5d14:	e0bffe17 	ldw	r2,-8(fp)
    5d18:	10ffcc1e 	bne	r2,r3,5c4c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    5d1c:	e037883a 	mov	sp,fp
    5d20:	dfc00117 	ldw	ra,4(sp)
    5d24:	df000017 	ldw	fp,0(sp)
    5d28:	dec00204 	addi	sp,sp,8
    5d2c:	f800283a 	ret

00005d30 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    5d30:	deffff04 	addi	sp,sp,-4
    5d34:	df000015 	stw	fp,0(sp)
    5d38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5d3c:	000170fa 	wrctl	ienable,zero
}
    5d40:	e037883a 	mov	sp,fp
    5d44:	df000017 	ldw	fp,0(sp)
    5d48:	dec00104 	addi	sp,sp,4
    5d4c:	f800283a 	ret

00005d50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5d50:	defffa04 	addi	sp,sp,-24
    5d54:	dfc00515 	stw	ra,20(sp)
    5d58:	df000415 	stw	fp,16(sp)
    5d5c:	df000404 	addi	fp,sp,16
    5d60:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5d64:	00800034 	movhi	r2,0
    5d68:	109ffa04 	addi	r2,r2,32744
    5d6c:	10800017 	ldw	r2,0(r2)
    5d70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5d74:	00003306 	br	5e44 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    5d78:	e0bffd17 	ldw	r2,-12(fp)
    5d7c:	11000217 	ldw	r4,8(r2)
    5d80:	000085c0 	call	85c <strlen>
    5d84:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    5d88:	e0bffd17 	ldw	r2,-12(fp)
    5d8c:	10c00217 	ldw	r3,8(r2)
    5d90:	e0bffc17 	ldw	r2,-16(fp)
    5d94:	1885883a 	add	r2,r3,r2
    5d98:	10bfffc4 	addi	r2,r2,-1
    5d9c:	10800003 	ldbu	r2,0(r2)
    5da0:	10803fcc 	andi	r2,r2,255
    5da4:	1080201c 	xori	r2,r2,128
    5da8:	10bfe004 	addi	r2,r2,-128
    5dac:	10800bd8 	cmpnei	r2,r2,47
    5db0:	1000031e 	bne	r2,zero,5dc0 <alt_find_file+0x70>
    {
      len -= 1;
    5db4:	e0bffc17 	ldw	r2,-16(fp)
    5db8:	10bfffc4 	addi	r2,r2,-1
    5dbc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5dc0:	e0bffc17 	ldw	r2,-16(fp)
    5dc4:	1007883a 	mov	r3,r2
    5dc8:	e0bffe17 	ldw	r2,-8(fp)
    5dcc:	1885883a 	add	r2,r3,r2
    5dd0:	10800003 	ldbu	r2,0(r2)
    5dd4:	10803fcc 	andi	r2,r2,255
    5dd8:	1080201c 	xori	r2,r2,128
    5ddc:	10bfe004 	addi	r2,r2,-128
    5de0:	10800be0 	cmpeqi	r2,r2,47
    5de4:	10000a1e 	bne	r2,zero,5e10 <alt_find_file+0xc0>
    5de8:	e0bffc17 	ldw	r2,-16(fp)
    5dec:	1007883a 	mov	r3,r2
    5df0:	e0bffe17 	ldw	r2,-8(fp)
    5df4:	1885883a 	add	r2,r3,r2
    5df8:	10800003 	ldbu	r2,0(r2)
    5dfc:	10803fcc 	andi	r2,r2,255
    5e00:	1080201c 	xori	r2,r2,128
    5e04:	10bfe004 	addi	r2,r2,-128
    5e08:	1004c03a 	cmpne	r2,r2,zero
    5e0c:	10000a1e 	bne	r2,zero,5e38 <alt_find_file+0xe8>
    5e10:	e0bffd17 	ldw	r2,-12(fp)
    5e14:	11000217 	ldw	r4,8(r2)
    5e18:	e1bffc17 	ldw	r6,-16(fp)
    5e1c:	e17ffe17 	ldw	r5,-8(fp)
    5e20:	0005f8c0 	call	5f8c <memcmp>
    5e24:	1004c03a 	cmpne	r2,r2,zero
    5e28:	1000031e 	bne	r2,zero,5e38 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5e2c:	e0bffd17 	ldw	r2,-12(fp)
    5e30:	e0bfff15 	stw	r2,-4(fp)
    5e34:	00000806 	br	5e58 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    5e38:	e0bffd17 	ldw	r2,-12(fp)
    5e3c:	10800017 	ldw	r2,0(r2)
    5e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5e44:	00c00034 	movhi	r3,0
    5e48:	18dffa04 	addi	r3,r3,32744
    5e4c:	e0bffd17 	ldw	r2,-12(fp)
    5e50:	10ffc91e 	bne	r2,r3,5d78 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5e54:	e03fff15 	stw	zero,-4(fp)
    5e58:	e0bfff17 	ldw	r2,-4(fp)
}
    5e5c:	e037883a 	mov	sp,fp
    5e60:	dfc00117 	ldw	ra,4(sp)
    5e64:	df000017 	ldw	fp,0(sp)
    5e68:	dec00204 	addi	sp,sp,8
    5e6c:	f800283a 	ret

00005e70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5e70:	defffa04 	addi	sp,sp,-24
    5e74:	dfc00515 	stw	ra,20(sp)
    5e78:	df000415 	stw	fp,16(sp)
    5e7c:	dc000315 	stw	r16,12(sp)
    5e80:	df000304 	addi	fp,sp,12
    5e84:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5e88:	00bffa04 	movi	r2,-24
    5e8c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5e90:	e03ffe15 	stw	zero,-8(fp)
    5e94:	00002006 	br	5f18 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    5e98:	e13ffe17 	ldw	r4,-8(fp)
    5e9c:	04000034 	movhi	r16,0
    5ea0:	841b2504 	addi	r16,r16,27796
    5ea4:	01400304 	movi	r5,12
    5ea8:	00007700 	call	770 <__mulsi3>
    5eac:	1405883a 	add	r2,r2,r16
    5eb0:	10800017 	ldw	r2,0(r2)
    5eb4:	1004c03a 	cmpne	r2,r2,zero
    5eb8:	1000141e 	bne	r2,zero,5f0c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    5ebc:	e13ffe17 	ldw	r4,-8(fp)
    5ec0:	04000034 	movhi	r16,0
    5ec4:	841b2504 	addi	r16,r16,27796
    5ec8:	01400304 	movi	r5,12
    5ecc:	00007700 	call	770 <__mulsi3>
    5ed0:	1407883a 	add	r3,r2,r16
    5ed4:	e0bfff17 	ldw	r2,-4(fp)
    5ed8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    5edc:	00800034 	movhi	r2,0
    5ee0:	109ffe04 	addi	r2,r2,32760
    5ee4:	10c00017 	ldw	r3,0(r2)
    5ee8:	e0bffe17 	ldw	r2,-8(fp)
    5eec:	1880040e 	bge	r3,r2,5f00 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    5ef0:	00c00034 	movhi	r3,0
    5ef4:	18dffe04 	addi	r3,r3,32760
    5ef8:	e0bffe17 	ldw	r2,-8(fp)
    5efc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    5f00:	e0bffe17 	ldw	r2,-8(fp)
    5f04:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    5f08:	00000606 	br	5f24 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5f0c:	e0bffe17 	ldw	r2,-8(fp)
    5f10:	10800044 	addi	r2,r2,1
    5f14:	e0bffe15 	stw	r2,-8(fp)
    5f18:	e0bffe17 	ldw	r2,-8(fp)
    5f1c:	10800810 	cmplti	r2,r2,32
    5f20:	103fdd1e 	bne	r2,zero,5e98 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5f24:	e0bffd17 	ldw	r2,-12(fp)
}
    5f28:	e037883a 	mov	sp,fp
    5f2c:	dfc00217 	ldw	ra,8(sp)
    5f30:	df000117 	ldw	fp,4(sp)
    5f34:	dc000017 	ldw	r16,0(sp)
    5f38:	dec00304 	addi	sp,sp,12
    5f3c:	f800283a 	ret

00005f40 <atexit>:
    5f40:	200b883a 	mov	r5,r4
    5f44:	000d883a 	mov	r6,zero
    5f48:	0009883a 	mov	r4,zero
    5f4c:	000f883a 	mov	r7,zero
    5f50:	00060001 	jmpi	6000 <__register_exitproc>

00005f54 <exit>:
    5f54:	defffe04 	addi	sp,sp,-8
    5f58:	000b883a 	mov	r5,zero
    5f5c:	dc000015 	stw	r16,0(sp)
    5f60:	dfc00115 	stw	ra,4(sp)
    5f64:	2021883a 	mov	r16,r4
    5f68:	00061380 	call	6138 <__call_exitprocs>
    5f6c:	00800034 	movhi	r2,0
    5f70:	109ff704 	addi	r2,r2,32732
    5f74:	11000017 	ldw	r4,0(r2)
    5f78:	20800f17 	ldw	r2,60(r4)
    5f7c:	10000126 	beq	r2,zero,5f84 <exit+0x30>
    5f80:	103ee83a 	callr	r2
    5f84:	8009883a 	mov	r4,r16
    5f88:	00063280 	call	6328 <_exit>

00005f8c <memcmp>:
    5f8c:	00c000c4 	movi	r3,3
    5f90:	1980032e 	bgeu	r3,r6,5fa0 <memcmp+0x14>
    5f94:	2144b03a 	or	r2,r4,r5
    5f98:	10c4703a 	and	r2,r2,r3
    5f9c:	10000f26 	beq	r2,zero,5fdc <memcmp+0x50>
    5fa0:	31ffffc4 	addi	r7,r6,-1
    5fa4:	3000061e 	bne	r6,zero,5fc0 <memcmp+0x34>
    5fa8:	00000a06 	br	5fd4 <memcmp+0x48>
    5fac:	39ffffc4 	addi	r7,r7,-1
    5fb0:	00bfffc4 	movi	r2,-1
    5fb4:	21000044 	addi	r4,r4,1
    5fb8:	29400044 	addi	r5,r5,1
    5fbc:	38800526 	beq	r7,r2,5fd4 <memcmp+0x48>
    5fc0:	20c00003 	ldbu	r3,0(r4)
    5fc4:	28800003 	ldbu	r2,0(r5)
    5fc8:	18bff826 	beq	r3,r2,5fac <memcmp+0x20>
    5fcc:	1885c83a 	sub	r2,r3,r2
    5fd0:	f800283a 	ret
    5fd4:	0005883a 	mov	r2,zero
    5fd8:	f800283a 	ret
    5fdc:	180f883a 	mov	r7,r3
    5fe0:	20c00017 	ldw	r3,0(r4)
    5fe4:	28800017 	ldw	r2,0(r5)
    5fe8:	18bfed1e 	bne	r3,r2,5fa0 <memcmp+0x14>
    5fec:	31bfff04 	addi	r6,r6,-4
    5ff0:	21000104 	addi	r4,r4,4
    5ff4:	29400104 	addi	r5,r5,4
    5ff8:	39bff936 	bltu	r7,r6,5fe0 <memcmp+0x54>
    5ffc:	003fe806 	br	5fa0 <memcmp+0x14>

00006000 <__register_exitproc>:
    6000:	defffa04 	addi	sp,sp,-24
    6004:	00800034 	movhi	r2,0
    6008:	109ff704 	addi	r2,r2,32732
    600c:	dc000015 	stw	r16,0(sp)
    6010:	14000017 	ldw	r16,0(r2)
    6014:	dd000415 	stw	r20,16(sp)
    6018:	2829883a 	mov	r20,r5
    601c:	81405217 	ldw	r5,328(r16)
    6020:	dcc00315 	stw	r19,12(sp)
    6024:	dc800215 	stw	r18,8(sp)
    6028:	dc400115 	stw	r17,4(sp)
    602c:	dfc00515 	stw	ra,20(sp)
    6030:	2023883a 	mov	r17,r4
    6034:	3027883a 	mov	r19,r6
    6038:	3825883a 	mov	r18,r7
    603c:	28002526 	beq	r5,zero,60d4 <__register_exitproc+0xd4>
    6040:	29000117 	ldw	r4,4(r5)
    6044:	008007c4 	movi	r2,31
    6048:	11002716 	blt	r2,r4,60e8 <__register_exitproc+0xe8>
    604c:	8800101e 	bne	r17,zero,6090 <__register_exitproc+0x90>
    6050:	2105883a 	add	r2,r4,r4
    6054:	1085883a 	add	r2,r2,r2
    6058:	20c00044 	addi	r3,r4,1
    605c:	1145883a 	add	r2,r2,r5
    6060:	0009883a 	mov	r4,zero
    6064:	15000215 	stw	r20,8(r2)
    6068:	28c00115 	stw	r3,4(r5)
    606c:	2005883a 	mov	r2,r4
    6070:	dfc00517 	ldw	ra,20(sp)
    6074:	dd000417 	ldw	r20,16(sp)
    6078:	dcc00317 	ldw	r19,12(sp)
    607c:	dc800217 	ldw	r18,8(sp)
    6080:	dc400117 	ldw	r17,4(sp)
    6084:	dc000017 	ldw	r16,0(sp)
    6088:	dec00604 	addi	sp,sp,24
    608c:	f800283a 	ret
    6090:	29802204 	addi	r6,r5,136
    6094:	00800044 	movi	r2,1
    6098:	110e983a 	sll	r7,r2,r4
    609c:	30c04017 	ldw	r3,256(r6)
    60a0:	2105883a 	add	r2,r4,r4
    60a4:	1085883a 	add	r2,r2,r2
    60a8:	1185883a 	add	r2,r2,r6
    60ac:	19c6b03a 	or	r3,r3,r7
    60b0:	14802015 	stw	r18,128(r2)
    60b4:	14c00015 	stw	r19,0(r2)
    60b8:	00800084 	movi	r2,2
    60bc:	30c04015 	stw	r3,256(r6)
    60c0:	88bfe31e 	bne	r17,r2,6050 <__register_exitproc+0x50>
    60c4:	30804117 	ldw	r2,260(r6)
    60c8:	11c4b03a 	or	r2,r2,r7
    60cc:	30804115 	stw	r2,260(r6)
    60d0:	003fdf06 	br	6050 <__register_exitproc+0x50>
    60d4:	00800074 	movhi	r2,1
    60d8:	10a74304 	addi	r2,r2,-25332
    60dc:	100b883a 	mov	r5,r2
    60e0:	80805215 	stw	r2,328(r16)
    60e4:	003fd606 	br	6040 <__register_exitproc+0x40>
    60e8:	00800034 	movhi	r2,0
    60ec:	10800004 	addi	r2,r2,0
    60f0:	1000021e 	bne	r2,zero,60fc <__register_exitproc+0xfc>
    60f4:	013fffc4 	movi	r4,-1
    60f8:	003fdc06 	br	606c <__register_exitproc+0x6c>
    60fc:	01006404 	movi	r4,400
    6100:	103ee83a 	callr	r2
    6104:	1007883a 	mov	r3,r2
    6108:	103ffa26 	beq	r2,zero,60f4 <__register_exitproc+0xf4>
    610c:	80805217 	ldw	r2,328(r16)
    6110:	180b883a 	mov	r5,r3
    6114:	18000115 	stw	zero,4(r3)
    6118:	18800015 	stw	r2,0(r3)
    611c:	80c05215 	stw	r3,328(r16)
    6120:	18006215 	stw	zero,392(r3)
    6124:	18006315 	stw	zero,396(r3)
    6128:	0009883a 	mov	r4,zero
    612c:	883fc826 	beq	r17,zero,6050 <__register_exitproc+0x50>
    6130:	003fd706 	br	6090 <__register_exitproc+0x90>

00006134 <register_fini>:
    6134:	f800283a 	ret

00006138 <__call_exitprocs>:
    6138:	00800034 	movhi	r2,0
    613c:	109ff704 	addi	r2,r2,32732
    6140:	10800017 	ldw	r2,0(r2)
    6144:	defff304 	addi	sp,sp,-52
    6148:	df000b15 	stw	fp,44(sp)
    614c:	d8800115 	stw	r2,4(sp)
    6150:	00800034 	movhi	r2,0
    6154:	10800004 	addi	r2,r2,0
    6158:	1005003a 	cmpeq	r2,r2,zero
    615c:	d8800215 	stw	r2,8(sp)
    6160:	d8800117 	ldw	r2,4(sp)
    6164:	dd400815 	stw	r21,32(sp)
    6168:	dd000715 	stw	r20,28(sp)
    616c:	10805204 	addi	r2,r2,328
    6170:	dfc00c15 	stw	ra,48(sp)
    6174:	ddc00a15 	stw	r23,40(sp)
    6178:	dd800915 	stw	r22,36(sp)
    617c:	dcc00615 	stw	r19,24(sp)
    6180:	dc800515 	stw	r18,20(sp)
    6184:	dc400415 	stw	r17,16(sp)
    6188:	dc000315 	stw	r16,12(sp)
    618c:	282b883a 	mov	r21,r5
    6190:	2039883a 	mov	fp,r4
    6194:	d8800015 	stw	r2,0(sp)
    6198:	2829003a 	cmpeq	r20,r5,zero
    619c:	d8800117 	ldw	r2,4(sp)
    61a0:	14405217 	ldw	r17,328(r2)
    61a4:	88001026 	beq	r17,zero,61e8 <__call_exitprocs+0xb0>
    61a8:	ddc00017 	ldw	r23,0(sp)
    61ac:	88800117 	ldw	r2,4(r17)
    61b0:	8c802204 	addi	r18,r17,136
    61b4:	143fffc4 	addi	r16,r2,-1
    61b8:	80000916 	blt	r16,zero,61e0 <__call_exitprocs+0xa8>
    61bc:	05bfffc4 	movi	r22,-1
    61c0:	a000151e 	bne	r20,zero,6218 <__call_exitprocs+0xe0>
    61c4:	8409883a 	add	r4,r16,r16
    61c8:	2105883a 	add	r2,r4,r4
    61cc:	1485883a 	add	r2,r2,r18
    61d0:	10c02017 	ldw	r3,128(r2)
    61d4:	a8c01126 	beq	r21,r3,621c <__call_exitprocs+0xe4>
    61d8:	843fffc4 	addi	r16,r16,-1
    61dc:	85bff81e 	bne	r16,r22,61c0 <__call_exitprocs+0x88>
    61e0:	d8800217 	ldw	r2,8(sp)
    61e4:	10003126 	beq	r2,zero,62ac <__call_exitprocs+0x174>
    61e8:	dfc00c17 	ldw	ra,48(sp)
    61ec:	df000b17 	ldw	fp,44(sp)
    61f0:	ddc00a17 	ldw	r23,40(sp)
    61f4:	dd800917 	ldw	r22,36(sp)
    61f8:	dd400817 	ldw	r21,32(sp)
    61fc:	dd000717 	ldw	r20,28(sp)
    6200:	dcc00617 	ldw	r19,24(sp)
    6204:	dc800517 	ldw	r18,20(sp)
    6208:	dc400417 	ldw	r17,16(sp)
    620c:	dc000317 	ldw	r16,12(sp)
    6210:	dec00d04 	addi	sp,sp,52
    6214:	f800283a 	ret
    6218:	8409883a 	add	r4,r16,r16
    621c:	88c00117 	ldw	r3,4(r17)
    6220:	2105883a 	add	r2,r4,r4
    6224:	1445883a 	add	r2,r2,r17
    6228:	18ffffc4 	addi	r3,r3,-1
    622c:	11800217 	ldw	r6,8(r2)
    6230:	1c001526 	beq	r3,r16,6288 <__call_exitprocs+0x150>
    6234:	10000215 	stw	zero,8(r2)
    6238:	303fe726 	beq	r6,zero,61d8 <__call_exitprocs+0xa0>
    623c:	00c00044 	movi	r3,1
    6240:	1c06983a 	sll	r3,r3,r16
    6244:	90804017 	ldw	r2,256(r18)
    6248:	8cc00117 	ldw	r19,4(r17)
    624c:	1884703a 	and	r2,r3,r2
    6250:	10001426 	beq	r2,zero,62a4 <__call_exitprocs+0x16c>
    6254:	90804117 	ldw	r2,260(r18)
    6258:	1884703a 	and	r2,r3,r2
    625c:	10000c1e 	bne	r2,zero,6290 <__call_exitprocs+0x158>
    6260:	2105883a 	add	r2,r4,r4
    6264:	1485883a 	add	r2,r2,r18
    6268:	11400017 	ldw	r5,0(r2)
    626c:	e009883a 	mov	r4,fp
    6270:	303ee83a 	callr	r6
    6274:	88800117 	ldw	r2,4(r17)
    6278:	98bfc81e 	bne	r19,r2,619c <__call_exitprocs+0x64>
    627c:	b8800017 	ldw	r2,0(r23)
    6280:	147fd526 	beq	r2,r17,61d8 <__call_exitprocs+0xa0>
    6284:	003fc506 	br	619c <__call_exitprocs+0x64>
    6288:	8c000115 	stw	r16,4(r17)
    628c:	003fea06 	br	6238 <__call_exitprocs+0x100>
    6290:	2105883a 	add	r2,r4,r4
    6294:	1485883a 	add	r2,r2,r18
    6298:	11000017 	ldw	r4,0(r2)
    629c:	303ee83a 	callr	r6
    62a0:	003ff406 	br	6274 <__call_exitprocs+0x13c>
    62a4:	303ee83a 	callr	r6
    62a8:	003ff206 	br	6274 <__call_exitprocs+0x13c>
    62ac:	88800117 	ldw	r2,4(r17)
    62b0:	1000081e 	bne	r2,zero,62d4 <__call_exitprocs+0x19c>
    62b4:	89000017 	ldw	r4,0(r17)
    62b8:	20000726 	beq	r4,zero,62d8 <__call_exitprocs+0x1a0>
    62bc:	b9000015 	stw	r4,0(r23)
    62c0:	8809883a 	mov	r4,r17
    62c4:	00000000 	call	0 <__alt_mem_SDRAM>
    62c8:	bc400017 	ldw	r17,0(r23)
    62cc:	883fb71e 	bne	r17,zero,61ac <__call_exitprocs+0x74>
    62d0:	003fc506 	br	61e8 <__call_exitprocs+0xb0>
    62d4:	89000017 	ldw	r4,0(r17)
    62d8:	882f883a 	mov	r23,r17
    62dc:	2023883a 	mov	r17,r4
    62e0:	883fb21e 	bne	r17,zero,61ac <__call_exitprocs+0x74>
    62e4:	003fc006 	br	61e8 <__call_exitprocs+0xb0>

000062e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    62e8:	defffd04 	addi	sp,sp,-12
    62ec:	df000215 	stw	fp,8(sp)
    62f0:	df000204 	addi	fp,sp,8
    62f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    62f8:	e0bfff17 	ldw	r2,-4(fp)
    62fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6300:	e0bffe17 	ldw	r2,-8(fp)
    6304:	1005003a 	cmpeq	r2,r2,zero
    6308:	1000021e 	bne	r2,zero,6314 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    630c:	002af070 	cmpltui	zero,zero,43969
    6310:	00000106 	br	6318 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    6314:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    6318:	e037883a 	mov	sp,fp
    631c:	df000017 	ldw	fp,0(sp)
    6320:	dec00104 	addi	sp,sp,4
    6324:	f800283a 	ret

00006328 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6328:	defffd04 	addi	sp,sp,-12
    632c:	dfc00215 	stw	ra,8(sp)
    6330:	df000115 	stw	fp,4(sp)
    6334:	df000104 	addi	fp,sp,4
    6338:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    633c:	e13fff17 	ldw	r4,-4(fp)
    6340:	00062e80 	call	62e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6344:	003fff06 	br	6344 <_exit+0x1c>
    6348:	00006134 	movhi	zero,388
